// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.2
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="dut,hls_ip_2016_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.750000,HLS_SYN_LAT=3793263,HLS_SYN_TPT=none,HLS_SYN_MEM=254,HLS_SYN_DSP=54,HLS_SYN_FF=19112,HLS_SYN_LUT=21796}" *)

module dut (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        strm_in_V_V_dout,
        strm_in_V_V_empty_n,
        strm_in_V_V_read,
        strm_out_V_V_din,
        strm_out_V_V_full_n,
        strm_out_V_V_write
);

parameter    ap_ST_st1_fsm_0 = 11'b1;
parameter    ap_ST_st2_fsm_1 = 11'b10;
parameter    ap_ST_st3_fsm_2 = 11'b100;
parameter    ap_ST_st4_fsm_3 = 11'b1000;
parameter    ap_ST_st5_fsm_4 = 11'b10000;
parameter    ap_ST_st6_fsm_5 = 11'b100000;
parameter    ap_ST_st7_fsm_6 = 11'b1000000;
parameter    ap_ST_st8_fsm_7 = 11'b10000000;
parameter    ap_ST_st9_fsm_8 = 11'b100000000;
parameter    ap_ST_st10_fsm_9 = 11'b1000000000;
parameter    ap_ST_st11_fsm_10 = 11'b10000000000;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_const_lv32_A = 32'b1010;
parameter    ap_const_lv32_3 = 32'b11;
parameter    ap_const_lv32_8 = 32'b1000;
parameter    ap_const_lv14_0 = 14'b00000000000000;
parameter    ap_const_lv32_9 = 32'b1001;
parameter    ap_const_lv14_3100 = 14'b11000100000000;
parameter    ap_const_lv14_1 = 14'b1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] strm_in_V_V_dout;
input   strm_in_V_V_empty_n;
output   strm_in_V_V_read;
output  [31:0] strm_out_V_V_din;
input   strm_out_V_V_full_n;
output   strm_out_V_V_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg strm_in_V_V_read;
reg strm_out_V_V_write;

(* fsm_encoding = "none" *) reg   [10:0] ap_CS_fsm;
reg    ap_sig_cseq_ST_st1_fsm_0;
reg    ap_sig_26;
reg    strm_in_V_V_blk_n;
reg    ap_sig_cseq_ST_st2_fsm_1;
reg    ap_sig_47;
wire   [0:0] exitcond_fu_132_p2;
reg    ap_sig_cseq_ST_st3_fsm_2;
reg    ap_sig_58;
reg    strm_out_V_V_blk_n;
reg    ap_sig_cseq_ST_st11_fsm_10;
reg    ap_sig_67;
wire   [13:0] i_8_fu_138_p2;
reg   [13:0] i_8_reg_164;
reg    ap_sig_73;
reg   [31:0] tmp_V_1_reg_169;
reg   [31:0] tmp_V_2_reg_174;
reg    ap_sig_cseq_ST_st4_fsm_3;
reg    ap_sig_89;
wire   [31:0] grp_fu_129_p1;
reg   [31:0] tmp_s_reg_184;
reg    ap_sig_cseq_ST_st9_fsm_8;
reg    ap_sig_98;
reg   [13:0] sound_in_address0;
reg    sound_in_ce0;
reg    sound_in_we0;
wire   [31:0] sound_in_q0;
wire    grp_dut_mfcc_fu_104_ap_start;
wire    grp_dut_mfcc_fu_104_ap_done;
wire    grp_dut_mfcc_fu_104_ap_idle;
wire    grp_dut_mfcc_fu_104_ap_ready;
wire   [13:0] grp_dut_mfcc_fu_104_sound_file_address0;
wire    grp_dut_mfcc_fu_104_sound_file_ce0;
wire   [0:0] grp_dut_mfcc_fu_104_ap_return;
reg   [13:0] i_reg_92;
reg    ap_sig_cseq_ST_st10_fsm_9;
reg    ap_sig_131;
reg    ap_reg_grp_dut_mfcc_fu_104_ap_start;
wire   [63:0] tmp_63_fu_151_p1;
wire   [63:0] grp_fu_129_p0;
reg   [10:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 11'b1;
#0 ap_reg_grp_dut_mfcc_fu_104_ap_start = 1'b0;
end

dut_mfcc_M #(
    .DataWidth( 32 ),
    .AddressRange( 12544 ),
    .AddressWidth( 14 ))
sound_in_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(sound_in_address0),
    .ce0(sound_in_ce0),
    .we0(sound_in_we0),
    .d0(tmp_s_reg_184),
    .q0(sound_in_q0)
);

dut_mfcc grp_dut_mfcc_fu_104(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_dut_mfcc_fu_104_ap_start),
    .ap_done(grp_dut_mfcc_fu_104_ap_done),
    .ap_idle(grp_dut_mfcc_fu_104_ap_idle),
    .ap_ready(grp_dut_mfcc_fu_104_ap_ready),
    .sound_file_address0(grp_dut_mfcc_fu_104_sound_file_address0),
    .sound_file_ce0(grp_dut_mfcc_fu_104_sound_file_ce0),
    .sound_file_q0(sound_in_q0),
    .ap_return(grp_dut_mfcc_fu_104_ap_return)
);

dut_uitofp_64ns_32_6 #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 64 ),
    .dout_WIDTH( 32 ))
dut_uitofp_64ns_32_6_U38(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_129_p0),
    .ce(1'b1),
    .dout(grp_fu_129_p1)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_grp_dut_mfcc_fu_104_ap_start <= 1'b0;
    end else begin
        if (((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & ~ap_sig_73 & ~(exitcond_fu_132_p2 == 1'b0))) begin
            ap_reg_grp_dut_mfcc_fu_104_ap_start <= 1'b1;
        end else if ((1'b1 == grp_dut_mfcc_fu_104_ap_ready)) begin
            ap_reg_grp_dut_mfcc_fu_104_ap_start <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st10_fsm_9)) begin
        i_reg_92 <= i_8_reg_164;
    end else if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == 1'b0))) begin
        i_reg_92 <= ap_const_lv14_0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & ~ap_sig_73)) begin
        i_8_reg_164 <= i_8_fu_138_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & (exitcond_fu_132_p2 == 1'b0) & ~ap_sig_73)) begin
        tmp_V_1_reg_169 <= strm_in_V_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st3_fsm_2) & ~(strm_in_V_V_empty_n == 1'b0))) begin
        tmp_V_2_reg_174 <= strm_in_V_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st9_fsm_8)) begin
        tmp_s_reg_184 <= grp_fu_129_p1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st11_fsm_10) & ~((strm_out_V_V_full_n == 1'b0) | (1'b0 == grp_dut_mfcc_fu_104_ap_done)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_sig_cseq_ST_st1_fsm_0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st11_fsm_10) & ~((strm_out_V_V_full_n == 1'b0) | (1'b0 == grp_dut_mfcc_fu_104_ap_done)))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_131) begin
        ap_sig_cseq_ST_st10_fsm_9 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st10_fsm_9 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_67) begin
        ap_sig_cseq_ST_st11_fsm_10 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st11_fsm_10 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_26) begin
        ap_sig_cseq_ST_st1_fsm_0 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st1_fsm_0 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_47) begin
        ap_sig_cseq_ST_st2_fsm_1 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st2_fsm_1 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_58) begin
        ap_sig_cseq_ST_st3_fsm_2 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st3_fsm_2 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_89) begin
        ap_sig_cseq_ST_st4_fsm_3 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st4_fsm_3 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_98) begin
        ap_sig_cseq_ST_st9_fsm_8 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st9_fsm_8 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st10_fsm_9)) begin
        sound_in_address0 = tmp_63_fu_151_p1;
    end else if ((1'b1 == ap_sig_cseq_ST_st11_fsm_10)) begin
        sound_in_address0 = grp_dut_mfcc_fu_104_sound_file_address0;
    end else begin
        sound_in_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st10_fsm_9)) begin
        sound_in_ce0 = 1'b1;
    end else if ((1'b1 == ap_sig_cseq_ST_st11_fsm_10)) begin
        sound_in_ce0 = grp_dut_mfcc_fu_104_sound_file_ce0;
    end else begin
        sound_in_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st10_fsm_9)) begin
        sound_in_we0 = 1'b1;
    end else begin
        sound_in_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & (exitcond_fu_132_p2 == 1'b0)) | (1'b1 == ap_sig_cseq_ST_st3_fsm_2))) begin
        strm_in_V_V_blk_n = strm_in_V_V_empty_n;
    end else begin
        strm_in_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & (exitcond_fu_132_p2 == 1'b0) & ~ap_sig_73) | ((1'b1 == ap_sig_cseq_ST_st3_fsm_2) & ~(strm_in_V_V_empty_n == 1'b0)))) begin
        strm_in_V_V_read = 1'b1;
    end else begin
        strm_in_V_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st11_fsm_10)) begin
        strm_out_V_V_blk_n = strm_out_V_V_full_n;
    end else begin
        strm_out_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st11_fsm_10) & ~((strm_out_V_V_full_n == 1'b0) | (1'b0 == grp_dut_mfcc_fu_104_ap_done)))) begin
        strm_out_V_V_write = 1'b1;
    end else begin
        strm_out_V_V_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : begin
            if (~(ap_start == 1'b0)) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end
        end
        ap_ST_st2_fsm_1 : begin
            if ((~ap_sig_73 & ~(exitcond_fu_132_p2 == 1'b0))) begin
                ap_NS_fsm = ap_ST_st11_fsm_10;
            end else if (((exitcond_fu_132_p2 == 1'b0) & ~ap_sig_73)) begin
                ap_NS_fsm = ap_ST_st3_fsm_2;
            end else begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end
        end
        ap_ST_st3_fsm_2 : begin
            if (~(strm_in_V_V_empty_n == 1'b0)) begin
                ap_NS_fsm = ap_ST_st4_fsm_3;
            end else begin
                ap_NS_fsm = ap_ST_st3_fsm_2;
            end
        end
        ap_ST_st4_fsm_3 : begin
            ap_NS_fsm = ap_ST_st5_fsm_4;
        end
        ap_ST_st5_fsm_4 : begin
            ap_NS_fsm = ap_ST_st6_fsm_5;
        end
        ap_ST_st6_fsm_5 : begin
            ap_NS_fsm = ap_ST_st7_fsm_6;
        end
        ap_ST_st7_fsm_6 : begin
            ap_NS_fsm = ap_ST_st8_fsm_7;
        end
        ap_ST_st8_fsm_7 : begin
            ap_NS_fsm = ap_ST_st9_fsm_8;
        end
        ap_ST_st9_fsm_8 : begin
            ap_NS_fsm = ap_ST_st10_fsm_9;
        end
        ap_ST_st10_fsm_9 : begin
            ap_NS_fsm = ap_ST_st2_fsm_1;
        end
        ap_ST_st11_fsm_10 : begin
            if (~((strm_out_V_V_full_n == 1'b0) | (1'b0 == grp_dut_mfcc_fu_104_ap_done))) begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end else begin
                ap_NS_fsm = ap_ST_st11_fsm_10;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    ap_sig_131 = (1'b1 == ap_CS_fsm[ap_const_lv32_9]);
end

always @ (*) begin
    ap_sig_26 = (ap_CS_fsm[ap_const_lv32_0] == 1'b1);
end

always @ (*) begin
    ap_sig_47 = (1'b1 == ap_CS_fsm[ap_const_lv32_1]);
end

always @ (*) begin
    ap_sig_58 = (1'b1 == ap_CS_fsm[ap_const_lv32_2]);
end

always @ (*) begin
    ap_sig_67 = (1'b1 == ap_CS_fsm[ap_const_lv32_A]);
end

always @ (*) begin
    ap_sig_73 = ((exitcond_fu_132_p2 == 1'b0) & (strm_in_V_V_empty_n == 1'b0));
end

always @ (*) begin
    ap_sig_89 = (1'b1 == ap_CS_fsm[ap_const_lv32_3]);
end

always @ (*) begin
    ap_sig_98 = (1'b1 == ap_CS_fsm[ap_const_lv32_8]);
end

assign exitcond_fu_132_p2 = ((i_reg_92 == ap_const_lv14_3100) ? 1'b1 : 1'b0);

assign grp_dut_mfcc_fu_104_ap_start = ap_reg_grp_dut_mfcc_fu_104_ap_start;

assign grp_fu_129_p0 = {{tmp_V_2_reg_174}, {tmp_V_1_reg_169}};

assign i_8_fu_138_p2 = (i_reg_92 + ap_const_lv14_1);

assign strm_out_V_V_din = grp_dut_mfcc_fu_104_ap_return;

assign tmp_63_fu_151_p1 = i_reg_92;

endmodule //dut
