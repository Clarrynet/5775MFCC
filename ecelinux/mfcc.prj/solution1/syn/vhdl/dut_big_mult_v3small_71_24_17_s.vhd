-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.2
-- Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity dut_big_mult_v3small_71_24_17_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    a_V : IN STD_LOGIC_VECTOR (70 downto 0);
    b_V : IN STD_LOGIC_VECTOR (23 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (94 downto 0) );
end;


architecture behav of dut_big_mult_v3small_71_24_17_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000010";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (11 downto 0) := "000000000100";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (11 downto 0) := "000000001000";
    constant ap_ST_st5_fsm_4 : STD_LOGIC_VECTOR (11 downto 0) := "000000010000";
    constant ap_ST_st6_fsm_5 : STD_LOGIC_VECTOR (11 downto 0) := "000000100000";
    constant ap_ST_st7_fsm_6 : STD_LOGIC_VECTOR (11 downto 0) := "000001000000";
    constant ap_ST_st8_fsm_7 : STD_LOGIC_VECTOR (11 downto 0) := "000010000000";
    constant ap_ST_st9_fsm_8 : STD_LOGIC_VECTOR (11 downto 0) := "000100000000";
    constant ap_ST_st10_fsm_9 : STD_LOGIC_VECTOR (11 downto 0) := "001000000000";
    constant ap_ST_st11_fsm_10 : STD_LOGIC_VECTOR (11 downto 0) := "010000000000";
    constant ap_ST_st12_fsm_11 : STD_LOGIC_VECTOR (11 downto 0) := "100000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_4 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv7_10 : STD_LOGIC_VECTOR (6 downto 0) := "0010000";
    constant ap_const_lv7_46 : STD_LOGIC_VECTOR (6 downto 0) := "1000110";
    constant ap_const_lv32_46 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000110";
    constant ap_const_lv71_7FFFFFFFFFFFFFFFFF : STD_LOGIC_VECTOR (70 downto 0) := "11111111111111111111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv7_5E : STD_LOGIC_VECTOR (6 downto 0) := "1011110";
    constant ap_const_lv32_5E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011110";
    constant ap_const_lv95_7FFFFFFFFFFFFFFFFFFFFFFF : STD_LOGIC_VECTOR (94 downto 0) := "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_44 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000100";
    constant ap_const_lv95_0 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_29 : BOOLEAN;
    signal tmp_fu_201_p1 : STD_LOGIC_VECTOR (40 downto 0);
    signal tmp_reg_600 : STD_LOGIC_VECTOR (40 downto 0);
    signal i_6_fu_211_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_6_reg_608 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_sig_cseq_ST_st2_fsm_1 : STD_LOGIC;
    signal ap_sig_51 : BOOLEAN;
    signal tmp_58_fu_303_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_58_reg_613 : STD_LOGIC_VECTOR (6 downto 0);
    signal exitcond3_fu_205_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_61_fu_313_p2 : STD_LOGIC_VECTOR (70 downto 0);
    signal tmp_61_reg_618 : STD_LOGIC_VECTOR (70 downto 0);
    signal ap_sig_cseq_ST_st3_fsm_2 : STD_LOGIC;
    signal ap_sig_72 : BOOLEAN;
    signal tmp_45_fu_354_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_45_reg_636 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_sig_cseq_ST_st8_fsm_7 : STD_LOGIC;
    signal ap_sig_81 : BOOLEAN;
    signal exitcond4_fu_348_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_5_fu_370_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_5_reg_651 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_50_fu_403_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_50_reg_659 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_sig_cseq_ST_st10_fsm_9 : STD_LOGIC;
    signal ap_sig_99 : BOOLEAN;
    signal exitcond_fu_397_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_25_fu_572_p2 : STD_LOGIC_VECTOR (94 downto 0);
    signal ap_sig_cseq_ST_st11_fsm_10 : STD_LOGIC;
    signal ap_sig_117 : BOOLEAN;
    signal pp_V_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal pp_V_ce0 : STD_LOGIC;
    signal pp_V_we0 : STD_LOGIC;
    signal pp_V_q0 : STD_LOGIC_VECTOR (40 downto 0);
    signal pps_V_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal pps_V_ce0 : STD_LOGIC;
    signal pps_V_we0 : STD_LOGIC;
    signal pps_V_d0 : STD_LOGIC_VECTOR (40 downto 0);
    signal pps_V_q0 : STD_LOGIC_VECTOR (40 downto 0);
    signal i_reg_154 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_sig_cseq_ST_st6_fsm_5 : STD_LOGIC;
    signal ap_sig_145 : BOOLEAN;
    signal i_1_reg_166 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_sig_cseq_ST_st7_fsm_6 : STD_LOGIC;
    signal ap_sig_156 : BOOLEAN;
    signal ap_sig_cseq_ST_st9_fsm_8 : STD_LOGIC;
    signal ap_sig_163 : BOOLEAN;
    signal p_Val2_s_reg_177 : STD_LOGIC_VECTOR (94 downto 0);
    signal i_2_reg_189 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_42_fu_343_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_47_fu_365_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_49_fu_409_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_337_p2 : STD_LOGIC_VECTOR (40 downto 0);
    signal tmp_48_fu_390_p2 : STD_LOGIC_VECTOR (40 downto 0);
    signal Lo_assign_fu_223_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_s_fu_217_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_41_fu_233_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal Ui_fu_239_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_43_fu_247_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_52_fu_262_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_54_fu_274_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_51_fu_253_p4 : STD_LOGIC_VECTOR (70 downto 0);
    signal tmp_53_fu_268_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_55_fu_280_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_57_fu_295_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_56_fu_288_p3 : STD_LOGIC_VECTOR (70 downto 0);
    signal tmp_59_fu_309_p1 : STD_LOGIC_VECTOR (70 downto 0);
    signal tmp_60_fu_319_p1 : STD_LOGIC_VECTOR (70 downto 0);
    signal tmp_62_fu_322_p2 : STD_LOGIC_VECTOR (70 downto 0);
    signal p_Result_26_fu_328_p2 : STD_LOGIC_VECTOR (70 downto 0);
    signal grp_fu_337_p0 : STD_LOGIC_VECTOR (40 downto 0);
    signal grp_fu_337_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_46_fu_359_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal r_V_fu_376_p4 : STD_LOGIC_VECTOR (23 downto 0);
    signal r_V_4_fu_386_p1 : STD_LOGIC_VECTOR (40 downto 0);
    signal tmp_66_fu_414_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal Li_fu_418_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal Li_cast1_fu_428_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal Ui_1_fu_436_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_67_fu_446_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal Li_cast_fu_432_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal Ui_1_cast_fu_442_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_69_fu_460_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_68_fu_454_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_70_fu_464_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_71_fu_470_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_73_fu_486_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_72_fu_478_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_74_fu_494_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal loc_V_fu_450_p1 : STD_LOGIC_VECTOR (94 downto 0);
    signal tmp_75_fu_500_p1 : STD_LOGIC_VECTOR (94 downto 0);
    signal tmp_78_fu_512_p2 : STD_LOGIC_VECTOR (94 downto 0);
    signal tmp_79_fu_518_p4 : STD_LOGIC_VECTOR (94 downto 0);
    signal tmp_76_fu_504_p1 : STD_LOGIC_VECTOR (94 downto 0);
    signal tmp_77_fu_508_p1 : STD_LOGIC_VECTOR (94 downto 0);
    signal tmp_81_fu_536_p2 : STD_LOGIC_VECTOR (94 downto 0);
    signal tmp_82_fu_542_p2 : STD_LOGIC_VECTOR (94 downto 0);
    signal p_demorgan_fu_548_p2 : STD_LOGIC_VECTOR (94 downto 0);
    signal tmp_83_fu_554_p2 : STD_LOGIC_VECTOR (94 downto 0);
    signal tmp_80_fu_528_p3 : STD_LOGIC_VECTOR (94 downto 0);
    signal tmp_84_fu_560_p2 : STD_LOGIC_VECTOR (94 downto 0);
    signal tmp_85_fu_566_p2 : STD_LOGIC_VECTOR (94 downto 0);
    signal ap_sig_cseq_ST_st12_fsm_11 : STD_LOGIC;
    signal ap_sig_374 : BOOLEAN;
    signal tmp_65_fu_578_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal p_Result_s_fu_582_p5 : STD_LOGIC_VECTOR (94 downto 0);
    signal ap_return_preg : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (11 downto 0);

    component dut_mul_41s_24ns_41_4 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (40 downto 0);
        din1 : IN STD_LOGIC_VECTOR (23 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (40 downto 0) );
    end component;


    component dut_big_mult_v3small_71_24_17_s_pp_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (40 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (40 downto 0) );
    end component;



begin
    pp_V_U : component dut_big_mult_v3small_71_24_17_s_pp_V
    generic map (
        DataWidth => 41,
        AddressRange => 5,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => pp_V_address0,
        ce0 => pp_V_ce0,
        we0 => pp_V_we0,
        d0 => grp_fu_337_p2,
        q0 => pp_V_q0);

    pps_V_U : component dut_big_mult_v3small_71_24_17_s_pp_V
    generic map (
        DataWidth => 41,
        AddressRange => 5,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => pps_V_address0,
        ce0 => pps_V_ce0,
        we0 => pps_V_we0,
        d0 => pps_V_d0,
        q0 => pps_V_q0);

    dut_mul_41s_24ns_41_4_U1 : component dut_mul_41s_24ns_41_4
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 41,
        din1_WIDTH => 24,
        dout_WIDTH => 41)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_337_p0,
        din1 => grp_fu_337_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_337_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_return_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_preg <= ap_const_lv95_0;
            else
                if ((ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_11)) then 
                    ap_return_preg <= p_Result_s_fu_582_p5;
                end if; 
            end if;
        end if;
    end process;


    i_1_reg_166_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8)) then 
                i_1_reg_166 <= i_5_reg_651;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6)) then 
                i_1_reg_166 <= ap_const_lv3_1;
            end if; 
        end if;
    end process;

    i_2_reg_189_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7) and not((ap_const_lv1_0 = exitcond4_fu_348_p2)))) then 
                i_2_reg_189 <= ap_const_lv3_0;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_10)) then 
                i_2_reg_189 <= tmp_50_reg_659;
            end if; 
        end if;
    end process;

    i_reg_154_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                i_reg_154 <= ap_const_lv3_0;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then 
                i_reg_154 <= i_6_reg_608;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7) and (ap_const_lv1_0 = exitcond4_fu_348_p2))) then
                i_5_reg_651 <= i_5_fu_370_p2;
                    tmp_45_reg_636(2 downto 0) <= tmp_45_fu_354_p1(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then
                i_6_reg_608 <= i_6_fu_211_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_10)) then
                p_Val2_s_reg_177 <= p_Result_25_fu_572_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9)) then
                tmp_50_reg_659 <= tmp_50_fu_403_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (exitcond3_fu_205_p2 = ap_const_lv1_0))) then
                tmp_58_reg_613 <= tmp_58_fu_303_p2;
                tmp_61_reg_618 <= tmp_61_fu_313_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then
                    tmp_reg_600(23 downto 0) <= tmp_fu_201_p1(23 downto 0);
            end if;
        end if;
    end process;
    tmp_reg_600(40 downto 24) <= "00000000000000000";
    tmp_45_reg_636(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, exitcond3_fu_205_p2, exitcond4_fu_348_p2, exitcond_fu_397_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                if (not((exitcond3_fu_205_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_st7_fsm_6;
                else
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                end if;
            when ap_ST_st3_fsm_2 => 
                ap_NS_fsm <= ap_ST_st4_fsm_3;
            when ap_ST_st4_fsm_3 => 
                ap_NS_fsm <= ap_ST_st5_fsm_4;
            when ap_ST_st5_fsm_4 => 
                ap_NS_fsm <= ap_ST_st6_fsm_5;
            when ap_ST_st6_fsm_5 => 
                ap_NS_fsm <= ap_ST_st2_fsm_1;
            when ap_ST_st7_fsm_6 => 
                ap_NS_fsm <= ap_ST_st8_fsm_7;
            when ap_ST_st8_fsm_7 => 
                if (not((ap_const_lv1_0 = exitcond4_fu_348_p2))) then
                    ap_NS_fsm <= ap_ST_st10_fsm_9;
                else
                    ap_NS_fsm <= ap_ST_st9_fsm_8;
                end if;
            when ap_ST_st9_fsm_8 => 
                ap_NS_fsm <= ap_ST_st8_fsm_7;
            when ap_ST_st10_fsm_9 => 
                if (not((ap_const_lv1_0 = exitcond_fu_397_p2))) then
                    ap_NS_fsm <= ap_ST_st12_fsm_11;
                else
                    ap_NS_fsm <= ap_ST_st11_fsm_10;
                end if;
            when ap_ST_st11_fsm_10 => 
                ap_NS_fsm <= ap_ST_st10_fsm_9;
            when ap_ST_st12_fsm_11 => 
                ap_NS_fsm <= ap_ST_st1_fsm_0;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXX";
        end case;
    end process;
    Li_cast1_fu_428_p1 <= std_logic_vector(resize(unsigned(Li_fu_418_p4),7));
    Li_cast_fu_432_p1 <= std_logic_vector(resize(unsigned(Li_fu_418_p4),32));
    Li_fu_418_p4 <= ((tmp_66_fu_414_p1 & ap_const_lv1_0) & i_2_reg_189);
    Lo_assign_fu_223_p4 <= ((i_reg_154 & ap_const_lv1_0) & i_reg_154);
    Ui_1_cast_fu_442_p1 <= std_logic_vector(resize(unsigned(Ui_1_fu_436_p2),32));
    Ui_1_fu_436_p2 <= std_logic_vector(unsigned(ap_const_lv7_10) + unsigned(Li_cast1_fu_428_p1));
    Ui_fu_239_p3 <= 
        ap_const_lv7_46 when (tmp_s_fu_217_p2(0) = '1') else 
        tmp_41_fu_233_p2;

    ap_done_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0, ap_sig_cseq_ST_st12_fsm_11)
    begin
        if ((((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0)) or (ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_11))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_sig_cseq_ST_st12_fsm_11)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_11)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_assign_proc : process(ap_sig_cseq_ST_st12_fsm_11, p_Result_s_fu_582_p5, ap_return_preg)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_11)) then 
            ap_return <= p_Result_s_fu_582_p5;
        else 
            ap_return <= ap_return_preg;
        end if; 
    end process;


    ap_sig_117_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_117 <= (ap_const_lv1_1 = ap_CS_fsm(10 downto 10));
    end process;


    ap_sig_145_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_145 <= (ap_const_lv1_1 = ap_CS_fsm(5 downto 5));
    end process;


    ap_sig_156_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_156 <= (ap_const_lv1_1 = ap_CS_fsm(6 downto 6));
    end process;


    ap_sig_163_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_163 <= (ap_const_lv1_1 = ap_CS_fsm(8 downto 8));
    end process;


    ap_sig_29_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_29 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    ap_sig_374_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_374 <= (ap_const_lv1_1 = ap_CS_fsm(11 downto 11));
    end process;


    ap_sig_51_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_51 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    ap_sig_72_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_72 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    ap_sig_81_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_81 <= (ap_const_lv1_1 = ap_CS_fsm(7 downto 7));
    end process;


    ap_sig_99_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_99 <= (ap_const_lv1_1 = ap_CS_fsm(9 downto 9));
    end process;


    ap_sig_cseq_ST_st10_fsm_9_assign_proc : process(ap_sig_99)
    begin
        if (ap_sig_99) then 
            ap_sig_cseq_ST_st10_fsm_9 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st10_fsm_9 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st11_fsm_10_assign_proc : process(ap_sig_117)
    begin
        if (ap_sig_117) then 
            ap_sig_cseq_ST_st11_fsm_10 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st11_fsm_10 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st12_fsm_11_assign_proc : process(ap_sig_374)
    begin
        if (ap_sig_374) then 
            ap_sig_cseq_ST_st12_fsm_11 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st12_fsm_11 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_29)
    begin
        if (ap_sig_29) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st2_fsm_1_assign_proc : process(ap_sig_51)
    begin
        if (ap_sig_51) then 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st3_fsm_2_assign_proc : process(ap_sig_72)
    begin
        if (ap_sig_72) then 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st6_fsm_5_assign_proc : process(ap_sig_145)
    begin
        if (ap_sig_145) then 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st7_fsm_6_assign_proc : process(ap_sig_156)
    begin
        if (ap_sig_156) then 
            ap_sig_cseq_ST_st7_fsm_6 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st7_fsm_6 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st8_fsm_7_assign_proc : process(ap_sig_81)
    begin
        if (ap_sig_81) then 
            ap_sig_cseq_ST_st8_fsm_7 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st8_fsm_7 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st9_fsm_8_assign_proc : process(ap_sig_163)
    begin
        if (ap_sig_163) then 
            ap_sig_cseq_ST_st9_fsm_8 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st9_fsm_8 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond3_fu_205_p2 <= "1" when (i_reg_154 = ap_const_lv3_5) else "0";
    exitcond4_fu_348_p2 <= "1" when (i_1_reg_166 = ap_const_lv3_5) else "0";
    exitcond_fu_397_p2 <= "1" when (i_2_reg_189 = ap_const_lv3_4) else "0";
    grp_fu_337_p0 <= p_Result_26_fu_328_p2(41 - 1 downto 0);
    grp_fu_337_p1 <= tmp_reg_600(24 - 1 downto 0);
    i_5_fu_370_p2 <= std_logic_vector(unsigned(i_1_reg_166) + unsigned(ap_const_lv3_1));
    i_6_fu_211_p2 <= std_logic_vector(unsigned(i_reg_154) + unsigned(ap_const_lv3_1));
    loc_V_fu_450_p1 <= std_logic_vector(resize(unsigned(tmp_67_fu_446_p1),95));
    p_Result_25_fu_572_p2 <= (tmp_84_fu_560_p2 or tmp_85_fu_566_p2);
    p_Result_26_fu_328_p2 <= (tmp_61_reg_618 and tmp_62_fu_322_p2);
    p_Result_s_fu_582_p5 <= (tmp_65_fu_578_p1 & p_Val2_s_reg_177(67 downto 0));
    p_demorgan_fu_548_p2 <= (tmp_81_fu_536_p2 and tmp_82_fu_542_p2);

    pp_V_address0_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, tmp_45_fu_354_p1, ap_sig_cseq_ST_st8_fsm_7, ap_sig_cseq_ST_st6_fsm_5, tmp_42_fu_343_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then 
            pp_V_address0 <= tmp_42_fu_343_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7)) then 
            pp_V_address0 <= tmp_45_fu_354_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            pp_V_address0 <= ap_const_lv64_0(3 - 1 downto 0);
        else 
            pp_V_address0 <= "XXX";
        end if; 
    end process;


    pp_V_ce0_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, ap_sig_cseq_ST_st8_fsm_7, ap_sig_cseq_ST_st6_fsm_5)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) or (ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7) or (ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5))) then 
            pp_V_ce0 <= ap_const_logic_1;
        else 
            pp_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    pp_V_we0_assign_proc : process(ap_sig_cseq_ST_st6_fsm_5)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5))) then 
            pp_V_we0 <= ap_const_logic_1;
        else 
            pp_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    pps_V_address0_assign_proc : process(tmp_45_reg_636, ap_sig_cseq_ST_st8_fsm_7, ap_sig_cseq_ST_st10_fsm_9, exitcond_fu_397_p2, ap_sig_cseq_ST_st7_fsm_6, ap_sig_cseq_ST_st9_fsm_8, tmp_47_fu_365_p1, tmp_49_fu_409_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8)) then 
            pps_V_address0 <= tmp_45_reg_636(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6)) then 
            pps_V_address0 <= ap_const_lv64_0(3 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9) and not((ap_const_lv1_0 = exitcond_fu_397_p2)))) then 
            pps_V_address0 <= ap_const_lv64_4(3 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9) and (ap_const_lv1_0 = exitcond_fu_397_p2))) then 
            pps_V_address0 <= tmp_49_fu_409_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7)) then 
            pps_V_address0 <= tmp_47_fu_365_p1(3 - 1 downto 0);
        else 
            pps_V_address0 <= "XXX";
        end if; 
    end process;


    pps_V_ce0_assign_proc : process(ap_sig_cseq_ST_st8_fsm_7, ap_sig_cseq_ST_st10_fsm_9, exitcond_fu_397_p2, ap_sig_cseq_ST_st7_fsm_6, ap_sig_cseq_ST_st9_fsm_8)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7) or ((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9) and (ap_const_lv1_0 = exitcond_fu_397_p2)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9) and not((ap_const_lv1_0 = exitcond_fu_397_p2))) or (ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6) or (ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8))) then 
            pps_V_ce0 <= ap_const_logic_1;
        else 
            pps_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    pps_V_d0_assign_proc : process(pp_V_q0, ap_sig_cseq_ST_st7_fsm_6, ap_sig_cseq_ST_st9_fsm_8, tmp_48_fu_390_p2)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8)) then 
            pps_V_d0 <= tmp_48_fu_390_p2;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6)) then 
            pps_V_d0 <= pp_V_q0;
        else 
            pps_V_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    pps_V_we0_assign_proc : process(ap_sig_cseq_ST_st7_fsm_6, ap_sig_cseq_ST_st9_fsm_8)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6) or (ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8))) then 
            pps_V_we0 <= ap_const_logic_1;
        else 
            pps_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    r_V_4_fu_386_p1 <= std_logic_vector(resize(unsigned(r_V_fu_376_p4),41));
    r_V_fu_376_p4 <= pps_V_q0(40 downto 17);
    tmp_41_fu_233_p2 <= std_logic_vector(unsigned(ap_const_lv7_10) + unsigned(Lo_assign_fu_223_p4));
    tmp_42_fu_343_p1 <= std_logic_vector(resize(unsigned(i_reg_154),64));
    tmp_43_fu_247_p2 <= "1" when (unsigned(Lo_assign_fu_223_p4) > unsigned(Ui_fu_239_p3)) else "0";
    tmp_45_fu_354_p1 <= std_logic_vector(resize(unsigned(i_1_reg_166),64));
    tmp_46_fu_359_p2 <= std_logic_vector(unsigned(i_1_reg_166) + unsigned(ap_const_lv3_7));
    tmp_47_fu_365_p1 <= std_logic_vector(resize(unsigned(tmp_46_fu_359_p2),64));
    tmp_48_fu_390_p2 <= std_logic_vector(unsigned(pp_V_q0) + unsigned(r_V_4_fu_386_p1));
    tmp_49_fu_409_p1 <= std_logic_vector(resize(unsigned(i_2_reg_189),64));
    tmp_50_fu_403_p2 <= std_logic_vector(unsigned(i_2_reg_189) + unsigned(ap_const_lv3_1));
    
    tmp_51_fu_253_p4_proc : process(a_V)
    variable vlo_cpy : STD_LOGIC_VECTOR(71+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(71+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(71 - 1 downto 0);
    variable tmp_51_fu_253_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(71 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(71 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(71 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(7 - 1 downto 0) := ap_const_lv32_46(7 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(7 - 1 downto 0) := ap_const_lv32_0(7 - 1 downto 0);
        v0_cpy := a_V;
        if (vlo_cpy(7 - 1 downto 0) > vhi_cpy(7 - 1 downto 0)) then
            vhi_cpy(7-1 downto 0) := std_logic_vector(71-1-unsigned(ap_const_lv32_0(7-1 downto 0)));
            vlo_cpy(7-1 downto 0) := std_logic_vector(71-1-unsigned(ap_const_lv32_46(7-1 downto 0)));
            for tmp_51_fu_253_p4_i in 0 to 71-1 loop
                v0_cpy(tmp_51_fu_253_p4_i) := a_V(71-1-tmp_51_fu_253_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(7-1 downto 0)))));

        section := (others=>'0');
        section(7-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(7-1 downto 0)) - unsigned(vlo_cpy(7-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(71-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_51_fu_253_p4 <= resvalue(71-1 downto 0);
    end process;

    tmp_52_fu_262_p2 <= std_logic_vector(unsigned(Lo_assign_fu_223_p4) - unsigned(Ui_fu_239_p3));
    tmp_53_fu_268_p2 <= std_logic_vector(signed(ap_const_lv7_46) - signed(Lo_assign_fu_223_p4));
    tmp_54_fu_274_p2 <= std_logic_vector(unsigned(Ui_fu_239_p3) - unsigned(Lo_assign_fu_223_p4));
    tmp_55_fu_280_p3 <= 
        tmp_52_fu_262_p2 when (tmp_43_fu_247_p2(0) = '1') else 
        tmp_54_fu_274_p2;
    tmp_56_fu_288_p3 <= 
        tmp_51_fu_253_p4 when (tmp_43_fu_247_p2(0) = '1') else 
        a_V;
    tmp_57_fu_295_p3 <= 
        tmp_53_fu_268_p2 when (tmp_43_fu_247_p2(0) = '1') else 
        Lo_assign_fu_223_p4;
    tmp_58_fu_303_p2 <= std_logic_vector(signed(ap_const_lv7_46) - signed(tmp_55_fu_280_p3));
    tmp_59_fu_309_p1 <= std_logic_vector(resize(unsigned(tmp_57_fu_295_p3),71));
    tmp_60_fu_319_p1 <= std_logic_vector(resize(unsigned(tmp_58_reg_613),71));
    tmp_61_fu_313_p2 <= std_logic_vector(shift_right(unsigned(tmp_56_fu_288_p3),to_integer(unsigned('0' & tmp_59_fu_309_p1(31-1 downto 0)))));
    tmp_62_fu_322_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv71_7FFFFFFFFFFFFFFFFF),to_integer(unsigned('0' & tmp_60_fu_319_p1(31-1 downto 0)))));
    tmp_65_fu_578_p1 <= pps_V_q0(27 - 1 downto 0);
    tmp_66_fu_414_p1 <= i_2_reg_189(2 - 1 downto 0);
    tmp_67_fu_446_p1 <= pps_V_q0(17 - 1 downto 0);
    tmp_68_fu_454_p2 <= "1" when (unsigned(Li_cast_fu_432_p1) > unsigned(Ui_1_cast_fu_442_p1)) else "0";
    tmp_69_fu_460_p1 <= std_logic_vector(resize(unsigned(Li_fu_418_p4),7));
    tmp_70_fu_464_p2 <= std_logic_vector(signed(ap_const_lv7_5E) - signed(tmp_69_fu_460_p1));
    tmp_71_fu_470_p3 <= 
        tmp_69_fu_460_p1 when (tmp_68_fu_454_p2(0) = '1') else 
        Ui_1_fu_436_p2;
    tmp_72_fu_478_p3 <= 
        Ui_1_fu_436_p2 when (tmp_68_fu_454_p2(0) = '1') else 
        tmp_69_fu_460_p1;
    tmp_73_fu_486_p3 <= 
        tmp_70_fu_464_p2 when (tmp_68_fu_454_p2(0) = '1') else 
        tmp_69_fu_460_p1;
    tmp_74_fu_494_p2 <= std_logic_vector(signed(ap_const_lv7_5E) - signed(tmp_71_fu_470_p3));
    tmp_75_fu_500_p1 <= std_logic_vector(resize(unsigned(tmp_73_fu_486_p3),95));
    tmp_76_fu_504_p1 <= std_logic_vector(resize(unsigned(tmp_72_fu_478_p3),95));
    tmp_77_fu_508_p1 <= std_logic_vector(resize(unsigned(tmp_74_fu_494_p2),95));
    tmp_78_fu_512_p2 <= std_logic_vector(shift_left(unsigned(loc_V_fu_450_p1),to_integer(unsigned('0' & tmp_75_fu_500_p1(31-1 downto 0)))));
    
    tmp_79_fu_518_p4_proc : process(tmp_78_fu_512_p2)
    variable vlo_cpy : STD_LOGIC_VECTOR(95+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(95+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(95 - 1 downto 0);
    variable tmp_79_fu_518_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(95 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(95 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(95 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(7 - 1 downto 0) := ap_const_lv32_5E(7 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(7 - 1 downto 0) := ap_const_lv32_0(7 - 1 downto 0);
        v0_cpy := tmp_78_fu_512_p2;
        if (vlo_cpy(7 - 1 downto 0) > vhi_cpy(7 - 1 downto 0)) then
            vhi_cpy(7-1 downto 0) := std_logic_vector(95-1-unsigned(ap_const_lv32_0(7-1 downto 0)));
            vlo_cpy(7-1 downto 0) := std_logic_vector(95-1-unsigned(ap_const_lv32_5E(7-1 downto 0)));
            for tmp_79_fu_518_p4_i in 0 to 95-1 loop
                v0_cpy(tmp_79_fu_518_p4_i) := tmp_78_fu_512_p2(95-1-tmp_79_fu_518_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(7-1 downto 0)))));

        section := (others=>'0');
        section(7-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(7-1 downto 0)) - unsigned(vlo_cpy(7-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(95-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_79_fu_518_p4 <= resvalue(95-1 downto 0);
    end process;

    tmp_80_fu_528_p3 <= 
        tmp_79_fu_518_p4 when (tmp_68_fu_454_p2(0) = '1') else 
        tmp_78_fu_512_p2;
    tmp_81_fu_536_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv95_7FFFFFFFFFFFFFFFFFFFFFFF),to_integer(unsigned('0' & tmp_76_fu_504_p1(31-1 downto 0)))));
    tmp_82_fu_542_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv95_7FFFFFFFFFFFFFFFFFFFFFFF),to_integer(unsigned('0' & tmp_77_fu_508_p1(31-1 downto 0)))));
    tmp_83_fu_554_p2 <= (p_demorgan_fu_548_p2 xor ap_const_lv95_7FFFFFFFFFFFFFFFFFFFFFFF);
    tmp_84_fu_560_p2 <= (p_Val2_s_reg_177 and tmp_83_fu_554_p2);
    tmp_85_fu_566_p2 <= (tmp_80_fu_528_p3 and p_demorgan_fu_548_p2);
    tmp_fu_201_p1 <= std_logic_vector(resize(unsigned(b_V),41));
    tmp_s_fu_217_p2 <= "1" when (i_reg_154 = ap_const_lv3_4) else "0";
end behav;
