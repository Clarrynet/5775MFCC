-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.2
-- Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity dut_big_mult_v3small_71_24_17_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_return : OUT STD_LOGIC_VECTOR (94 downto 0) );
end;


architecture behav of dut_big_mult_v3small_71_24_17_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (6 downto 0) := "0001000";
    constant ap_ST_st5_fsm_4 : STD_LOGIC_VECTOR (6 downto 0) := "0010000";
    constant ap_ST_st6_fsm_5 : STD_LOGIC_VECTOR (6 downto 0) := "0100000";
    constant ap_ST_st7_fsm_6 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_4 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100";
    constant ap_const_lv41_66317D2BC0 : STD_LOGIC_VECTOR (40 downto 0) := "00110011000110001011111010010101111000000";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv7_10 : STD_LOGIC_VECTOR (6 downto 0) := "0010000";
    constant ap_const_lv7_5E : STD_LOGIC_VECTOR (6 downto 0) := "1011110";
    constant ap_const_lv32_5E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011110";
    constant ap_const_lv95_7FFFFFFFFFFFFFFFFFFFFFFF : STD_LOGIC_VECTOR (94 downto 0) := "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_44 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000100";
    constant ap_const_lv95_0 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_24 : BOOLEAN;
    signal pp_V_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal pp_V_ce0 : STD_LOGIC;
    signal pp_V_q0 : STD_LOGIC_VECTOR (39 downto 0);
    signal i_10_fu_162_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_sig_cseq_ST_st2_fsm_1 : STD_LOGIC;
    signal ap_sig_44 : BOOLEAN;
    signal tmp_64_fu_174_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_64_reg_429 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_sig_cseq_ST_st3_fsm_2 : STD_LOGIC;
    signal ap_sig_53 : BOOLEAN;
    signal exitcond14_fu_168_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_9_fu_190_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_9_reg_444 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_s_fu_227_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_s_reg_452 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_sig_cseq_ST_st5_fsm_4 : STD_LOGIC;
    signal ap_sig_72 : BOOLEAN;
    signal exitcond_fu_221_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_22_fu_396_p2 : STD_LOGIC_VECTOR (94 downto 0);
    signal ap_sig_cseq_ST_st6_fsm_5 : STD_LOGIC;
    signal ap_sig_90 : BOOLEAN;
    signal pps_V_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal pps_V_ce0 : STD_LOGIC;
    signal pps_V_we0 : STD_LOGIC;
    signal pps_V_d0 : STD_LOGIC_VECTOR (40 downto 0);
    signal pps_V_q0 : STD_LOGIC_VECTOR (40 downto 0);
    signal i_reg_110 : STD_LOGIC_VECTOR (2 downto 0);
    signal exitcond13_fu_156_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_1_reg_121 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_sig_cseq_ST_st4_fsm_3 : STD_LOGIC;
    signal ap_sig_121 : BOOLEAN;
    signal p_Val2_s_reg_132 : STD_LOGIC_VECTOR (94 downto 0);
    signal i_2_reg_144 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_66_fu_185_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_70_fu_233_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_71_cast_fu_216_p1 : STD_LOGIC_VECTOR (40 downto 0);
    signal tmp_65_fu_179_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_fu_196_p4 : STD_LOGIC_VECTOR (23 downto 0);
    signal r_V_4_cast_fu_206_p1 : STD_LOGIC_VECTOR (39 downto 0);
    signal tmp_67_fu_210_p2 : STD_LOGIC_VECTOR (39 downto 0);
    signal tmp_69_fu_238_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal Li_fu_242_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal Li_cast1_fu_252_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal Ui_fu_260_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_71_fu_270_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal Li_cast_fu_256_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal Ui_1_cast_fu_266_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_73_fu_284_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_72_fu_278_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_74_fu_288_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_75_fu_294_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_77_fu_310_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_76_fu_302_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_78_fu_318_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal loc_V_fu_274_p1 : STD_LOGIC_VECTOR (94 downto 0);
    signal tmp_79_fu_324_p1 : STD_LOGIC_VECTOR (94 downto 0);
    signal tmp_82_fu_336_p2 : STD_LOGIC_VECTOR (94 downto 0);
    signal tmp_83_fu_342_p4 : STD_LOGIC_VECTOR (94 downto 0);
    signal tmp_80_fu_328_p1 : STD_LOGIC_VECTOR (94 downto 0);
    signal tmp_81_fu_332_p1 : STD_LOGIC_VECTOR (94 downto 0);
    signal tmp_85_fu_360_p2 : STD_LOGIC_VECTOR (94 downto 0);
    signal tmp_86_fu_366_p2 : STD_LOGIC_VECTOR (94 downto 0);
    signal p_demorgan_fu_372_p2 : STD_LOGIC_VECTOR (94 downto 0);
    signal tmp_87_fu_378_p2 : STD_LOGIC_VECTOR (94 downto 0);
    signal tmp_84_fu_352_p3 : STD_LOGIC_VECTOR (94 downto 0);
    signal tmp_88_fu_384_p2 : STD_LOGIC_VECTOR (94 downto 0);
    signal tmp_89_fu_390_p2 : STD_LOGIC_VECTOR (94 downto 0);
    signal ap_sig_cseq_ST_st7_fsm_6 : STD_LOGIC;
    signal ap_sig_264 : BOOLEAN;
    signal tmp_68_fu_402_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal p_Result_s_fu_406_p5 : STD_LOGIC_VECTOR (94 downto 0);
    signal ap_return_preg : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (6 downto 0);

    component dut_big_mult_v3small_71_24_17_s_pp_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (39 downto 0) );
    end component;


    component dut_big_mult_v3small_71_24_17_s_pps_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (40 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (40 downto 0) );
    end component;



begin
    pp_V_U : component dut_big_mult_v3small_71_24_17_s_pp_V
    generic map (
        DataWidth => 40,
        AddressRange => 5,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => pp_V_address0,
        ce0 => pp_V_ce0,
        q0 => pp_V_q0);

    pps_V_U : component dut_big_mult_v3small_71_24_17_s_pps_V
    generic map (
        DataWidth => 41,
        AddressRange => 5,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => pps_V_address0,
        ce0 => pps_V_ce0,
        we0 => pps_V_we0,
        d0 => pps_V_d0,
        q0 => pps_V_q0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_return_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_preg <= ap_const_lv95_0;
            else
                if ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6)) then 
                    ap_return_preg <= p_Result_s_fu_406_p5;
                end if; 
            end if;
        end if;
    end process;


    i_1_reg_121_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
                i_1_reg_121 <= i_9_reg_444;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((ap_const_lv1_0 = exitcond13_fu_156_p2)))) then 
                i_1_reg_121 <= ap_const_lv3_1;
            end if; 
        end if;
    end process;

    i_2_reg_144_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and not((exitcond14_fu_168_p2 = ap_const_lv1_0)))) then 
                i_2_reg_144 <= ap_const_lv3_0;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then 
                i_2_reg_144 <= tmp_s_reg_452;
            end if; 
        end if;
    end process;

    i_reg_110_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (ap_const_lv1_0 = exitcond13_fu_156_p2))) then 
                i_reg_110 <= i_10_fu_162_p2;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                i_reg_110 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and (exitcond14_fu_168_p2 = ap_const_lv1_0))) then
                i_9_reg_444 <= i_9_fu_190_p2;
                    tmp_64_reg_429(2 downto 0) <= tmp_64_fu_174_p1(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then
                p_Val2_s_reg_132 <= p_Result_22_fu_396_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then
                tmp_s_reg_452 <= tmp_s_fu_227_p2;
            end if;
        end if;
    end process;
    tmp_64_reg_429(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, exitcond14_fu_168_p2, exitcond_fu_221_p2, exitcond13_fu_156_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                if (not((ap_const_lv1_0 = exitcond13_fu_156_p2))) then
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                else
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                end if;
            when ap_ST_st3_fsm_2 => 
                if (not((exitcond14_fu_168_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_st5_fsm_4;
                else
                    ap_NS_fsm <= ap_ST_st4_fsm_3;
                end if;
            when ap_ST_st4_fsm_3 => 
                ap_NS_fsm <= ap_ST_st3_fsm_2;
            when ap_ST_st5_fsm_4 => 
                if (not((ap_const_lv1_0 = exitcond_fu_221_p2))) then
                    ap_NS_fsm <= ap_ST_st7_fsm_6;
                else
                    ap_NS_fsm <= ap_ST_st6_fsm_5;
                end if;
            when ap_ST_st6_fsm_5 => 
                ap_NS_fsm <= ap_ST_st5_fsm_4;
            when ap_ST_st7_fsm_6 => 
                ap_NS_fsm <= ap_ST_st1_fsm_0;
            when others =>  
                ap_NS_fsm <= "XXXXXXX";
        end case;
    end process;
    Li_cast1_fu_252_p1 <= std_logic_vector(resize(unsigned(Li_fu_242_p4),7));
    Li_cast_fu_256_p1 <= std_logic_vector(resize(unsigned(Li_fu_242_p4),32));
    Li_fu_242_p4 <= ((tmp_69_fu_238_p1 & ap_const_lv1_0) & i_2_reg_144);
    Ui_1_cast_fu_266_p1 <= std_logic_vector(resize(unsigned(Ui_fu_260_p2),32));
    Ui_fu_260_p2 <= std_logic_vector(unsigned(ap_const_lv7_10) + unsigned(Li_cast1_fu_252_p1));

    ap_done_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0, ap_sig_cseq_ST_st7_fsm_6)
    begin
        if ((((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0)) or (ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_sig_cseq_ST_st7_fsm_6)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_assign_proc : process(ap_sig_cseq_ST_st7_fsm_6, p_Result_s_fu_406_p5, ap_return_preg)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6)) then 
            ap_return <= p_Result_s_fu_406_p5;
        else 
            ap_return <= ap_return_preg;
        end if; 
    end process;


    ap_sig_121_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_121 <= (ap_const_lv1_1 = ap_CS_fsm(3 downto 3));
    end process;


    ap_sig_24_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_24 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    ap_sig_264_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_264 <= (ap_const_lv1_1 = ap_CS_fsm(6 downto 6));
    end process;


    ap_sig_44_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_44 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    ap_sig_53_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_53 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    ap_sig_72_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_72 <= (ap_const_lv1_1 = ap_CS_fsm(4 downto 4));
    end process;


    ap_sig_90_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_90 <= (ap_const_lv1_1 = ap_CS_fsm(5 downto 5));
    end process;


    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_24)
    begin
        if (ap_sig_24) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st2_fsm_1_assign_proc : process(ap_sig_44)
    begin
        if (ap_sig_44) then 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st3_fsm_2_assign_proc : process(ap_sig_53)
    begin
        if (ap_sig_53) then 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st4_fsm_3_assign_proc : process(ap_sig_121)
    begin
        if (ap_sig_121) then 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st5_fsm_4_assign_proc : process(ap_sig_72)
    begin
        if (ap_sig_72) then 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st6_fsm_5_assign_proc : process(ap_sig_90)
    begin
        if (ap_sig_90) then 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st7_fsm_6_assign_proc : process(ap_sig_264)
    begin
        if (ap_sig_264) then 
            ap_sig_cseq_ST_st7_fsm_6 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st7_fsm_6 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond13_fu_156_p2 <= "1" when (i_reg_110 = ap_const_lv3_5) else "0";
    exitcond14_fu_168_p2 <= "1" when (i_1_reg_121 = ap_const_lv3_5) else "0";
    exitcond_fu_221_p2 <= "1" when (i_2_reg_144 = ap_const_lv3_4) else "0";
    i_10_fu_162_p2 <= std_logic_vector(unsigned(i_reg_110) + unsigned(ap_const_lv3_1));
    i_9_fu_190_p2 <= std_logic_vector(unsigned(i_1_reg_121) + unsigned(ap_const_lv3_1));
    loc_V_fu_274_p1 <= std_logic_vector(resize(unsigned(tmp_71_fu_270_p1),95));
    p_Result_22_fu_396_p2 <= (tmp_88_fu_384_p2 or tmp_89_fu_390_p2);
    p_Result_s_fu_406_p5 <= (tmp_68_fu_402_p1 & p_Val2_s_reg_132(67 downto 0));
    p_demorgan_fu_372_p2 <= (tmp_85_fu_360_p2 and tmp_86_fu_366_p2);
    pp_V_address0 <= tmp_64_fu_174_p1(3 - 1 downto 0);

    pp_V_ce0_assign_proc : process(ap_sig_cseq_ST_st3_fsm_2)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
            pp_V_ce0 <= ap_const_logic_1;
        else 
            pp_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    pps_V_address0_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, tmp_64_reg_429, ap_sig_cseq_ST_st3_fsm_2, ap_sig_cseq_ST_st5_fsm_4, exitcond_fu_221_p2, ap_sig_cseq_ST_st4_fsm_3, tmp_66_fu_185_p1, tmp_70_fu_233_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            pps_V_address0 <= tmp_64_reg_429(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            pps_V_address0 <= ap_const_lv64_0(3 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) and not((ap_const_lv1_0 = exitcond_fu_221_p2)))) then 
            pps_V_address0 <= ap_const_lv64_4(3 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) and (ap_const_lv1_0 = exitcond_fu_221_p2))) then 
            pps_V_address0 <= tmp_70_fu_233_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
            pps_V_address0 <= tmp_66_fu_185_p1(3 - 1 downto 0);
        else 
            pps_V_address0 <= "XXX";
        end if; 
    end process;


    pps_V_ce0_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, ap_sig_cseq_ST_st3_fsm_2, ap_sig_cseq_ST_st5_fsm_4, exitcond_fu_221_p2, ap_sig_cseq_ST_st4_fsm_3)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) or (ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) or ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) and (ap_const_lv1_0 = exitcond_fu_221_p2)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) and not((ap_const_lv1_0 = exitcond_fu_221_p2))) or (ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3))) then 
            pps_V_ce0 <= ap_const_logic_1;
        else 
            pps_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    pps_V_d0_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, ap_sig_cseq_ST_st4_fsm_3, tmp_71_cast_fu_216_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            pps_V_d0 <= tmp_71_cast_fu_216_p1;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            pps_V_d0 <= ap_const_lv41_66317D2BC0;
        else 
            pps_V_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    pps_V_we0_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, exitcond13_fu_156_p2, ap_sig_cseq_ST_st4_fsm_3)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((ap_const_lv1_0 = exitcond13_fu_156_p2))) or (ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3))) then 
            pps_V_we0 <= ap_const_logic_1;
        else 
            pps_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    r_V_4_cast_fu_206_p1 <= std_logic_vector(resize(unsigned(tmp_fu_196_p4),40));
    tmp_64_fu_174_p1 <= std_logic_vector(resize(unsigned(i_1_reg_121),64));
    tmp_65_fu_179_p2 <= std_logic_vector(unsigned(i_1_reg_121) + unsigned(ap_const_lv3_7));
    tmp_66_fu_185_p1 <= std_logic_vector(resize(unsigned(tmp_65_fu_179_p2),64));
    tmp_67_fu_210_p2 <= std_logic_vector(unsigned(r_V_4_cast_fu_206_p1) + unsigned(pp_V_q0));
    tmp_68_fu_402_p1 <= pps_V_q0(27 - 1 downto 0);
    tmp_69_fu_238_p1 <= i_2_reg_144(2 - 1 downto 0);
    tmp_70_fu_233_p1 <= std_logic_vector(resize(unsigned(i_2_reg_144),64));
    tmp_71_cast_fu_216_p1 <= std_logic_vector(resize(unsigned(tmp_67_fu_210_p2),41));
    tmp_71_fu_270_p1 <= pps_V_q0(17 - 1 downto 0);
    tmp_72_fu_278_p2 <= "1" when (unsigned(Li_cast_fu_256_p1) > unsigned(Ui_1_cast_fu_266_p1)) else "0";
    tmp_73_fu_284_p1 <= std_logic_vector(resize(unsigned(Li_fu_242_p4),7));
    tmp_74_fu_288_p2 <= std_logic_vector(signed(ap_const_lv7_5E) - signed(tmp_73_fu_284_p1));
    tmp_75_fu_294_p3 <= 
        tmp_73_fu_284_p1 when (tmp_72_fu_278_p2(0) = '1') else 
        Ui_fu_260_p2;
    tmp_76_fu_302_p3 <= 
        Ui_fu_260_p2 when (tmp_72_fu_278_p2(0) = '1') else 
        tmp_73_fu_284_p1;
    tmp_77_fu_310_p3 <= 
        tmp_74_fu_288_p2 when (tmp_72_fu_278_p2(0) = '1') else 
        tmp_73_fu_284_p1;
    tmp_78_fu_318_p2 <= std_logic_vector(signed(ap_const_lv7_5E) - signed(tmp_75_fu_294_p3));
    tmp_79_fu_324_p1 <= std_logic_vector(resize(unsigned(tmp_77_fu_310_p3),95));
    tmp_80_fu_328_p1 <= std_logic_vector(resize(unsigned(tmp_76_fu_302_p3),95));
    tmp_81_fu_332_p1 <= std_logic_vector(resize(unsigned(tmp_78_fu_318_p2),95));
    tmp_82_fu_336_p2 <= std_logic_vector(shift_left(unsigned(loc_V_fu_274_p1),to_integer(unsigned('0' & tmp_79_fu_324_p1(31-1 downto 0)))));
    
    tmp_83_fu_342_p4_proc : process(tmp_82_fu_336_p2)
    variable vlo_cpy : STD_LOGIC_VECTOR(95+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(95+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(95 - 1 downto 0);
    variable tmp_83_fu_342_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(95 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(95 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(95 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(7 - 1 downto 0) := ap_const_lv32_5E(7 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(7 - 1 downto 0) := ap_const_lv32_0(7 - 1 downto 0);
        v0_cpy := tmp_82_fu_336_p2;
        if (vlo_cpy(7 - 1 downto 0) > vhi_cpy(7 - 1 downto 0)) then
            vhi_cpy(7-1 downto 0) := std_logic_vector(95-1-unsigned(ap_const_lv32_0(7-1 downto 0)));
            vlo_cpy(7-1 downto 0) := std_logic_vector(95-1-unsigned(ap_const_lv32_5E(7-1 downto 0)));
            for tmp_83_fu_342_p4_i in 0 to 95-1 loop
                v0_cpy(tmp_83_fu_342_p4_i) := tmp_82_fu_336_p2(95-1-tmp_83_fu_342_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(7-1 downto 0)))));

        section := (others=>'0');
        section(7-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(7-1 downto 0)) - unsigned(vlo_cpy(7-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(95-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_83_fu_342_p4 <= resvalue(95-1 downto 0);
    end process;

    tmp_84_fu_352_p3 <= 
        tmp_83_fu_342_p4 when (tmp_72_fu_278_p2(0) = '1') else 
        tmp_82_fu_336_p2;
    tmp_85_fu_360_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv95_7FFFFFFFFFFFFFFFFFFFFFFF),to_integer(unsigned('0' & tmp_80_fu_328_p1(31-1 downto 0)))));
    tmp_86_fu_366_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv95_7FFFFFFFFFFFFFFFFFFFFFFF),to_integer(unsigned('0' & tmp_81_fu_332_p1(31-1 downto 0)))));
    tmp_87_fu_378_p2 <= (p_demorgan_fu_372_p2 xor ap_const_lv95_7FFFFFFFFFFFFFFFFFFFFFFF);
    tmp_88_fu_384_p2 <= (p_Val2_s_reg_132 and tmp_87_fu_378_p2);
    tmp_89_fu_390_p2 <= (tmp_84_fu_352_p3 and p_demorgan_fu_372_p2);
    tmp_fu_196_p4 <= pps_V_q0(40 downto 17);
    tmp_s_fu_227_p2 <= std_logic_vector(unsigned(i_2_reg_144) + unsigned(ap_const_lv3_1));
end behav;
