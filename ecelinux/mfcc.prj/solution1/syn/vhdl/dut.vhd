-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.2
-- Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity dut is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    strm_in_V_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    strm_in_V_V_empty_n : IN STD_LOGIC;
    strm_in_V_V_read : OUT STD_LOGIC;
    strm_out_V_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    strm_out_V_V_full_n : IN STD_LOGIC;
    strm_out_V_V_write : OUT STD_LOGIC );
end;


architecture behav of dut is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "dut,hls_ip_2016_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=9.575400,HLS_SYN_LAT=3891527,HLS_SYN_TPT=none,HLS_SYN_MEM=98,HLS_SYN_DSP=30,HLS_SYN_FF=6042,HLS_SYN_LUT=11717}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_st5_fsm_4 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_st6_fsm_5 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv6_31 : STD_LOGIC_VECTOR (5 downto 0) := "110001";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv8_81 : STD_LOGIC_VECTOR (7 downto 0) := "10000001";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_21 : BOOLEAN;
    signal strm_in_V_V_blk_n : STD_LOGIC;
    signal ap_sig_cseq_ST_st3_fsm_2 : STD_LOGIC;
    signal ap_sig_42 : BOOLEAN;
    signal exitcond_fu_170_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_st4_fsm_3 : STD_LOGIC;
    signal ap_sig_53 : BOOLEAN;
    signal strm_out_V_V_blk_n : STD_LOGIC;
    signal ap_sig_cseq_ST_st5_fsm_4 : STD_LOGIC;
    signal ap_sig_62 : BOOLEAN;
    signal ap_sig_cseq_ST_st6_fsm_5 : STD_LOGIC;
    signal ap_sig_69 : BOOLEAN;
    signal i_4_fu_142_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_4_reg_209 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_sig_cseq_ST_st2_fsm_1 : STD_LOGIC;
    signal ap_sig_79 : BOOLEAN;
    signal tmp_s_fu_164_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_s_reg_214 : STD_LOGIC_VECTOR (13 downto 0);
    signal exitcond5_fu_136_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_5_fu_176_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal j_5_reg_222 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_90 : BOOLEAN;
    signal stage1_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal stage1_ce0 : STD_LOGIC;
    signal stage1_we0 : STD_LOGIC;
    signal stage1_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal stage1_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_dut_mel_into_dct_fu_119_ap_start : STD_LOGIC;
    signal grp_dut_mel_into_dct_fu_119_ap_done : STD_LOGIC;
    signal grp_dut_mel_into_dct_fu_119_ap_idle : STD_LOGIC;
    signal grp_dut_mel_into_dct_fu_119_ap_ready : STD_LOGIC;
    signal grp_dut_mel_into_dct_fu_119_z2_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_dut_mel_into_dct_fu_119_z2_ce0 : STD_LOGIC;
    signal grp_dut_mel_into_dct_fu_119_ap_return : STD_LOGIC_VECTOR (0 downto 0);
    signal i_reg_97 : STD_LOGIC_VECTOR (5 downto 0);
    signal j_reg_108 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_reg_grp_dut_mel_into_dct_fu_119_ap_start : STD_LOGIC := '0';
    signal tmp_57_cast_fu_196_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal output_fu_201_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_152_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_cast_fu_148_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_shl_cast_fu_160_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_40_cast_fu_187_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_40_fu_191_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);

    component dut_mel_into_dct IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        z2_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
        z2_ce0 : OUT STD_LOGIC;
        z2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component dut_stage1 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (12 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    stage1_U : component dut_stage1
    generic map (
        DataWidth => 32,
        AddressRange => 6321,
        AddressWidth => 13)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => stage1_address0,
        ce0 => stage1_ce0,
        we0 => stage1_we0,
        d0 => stage1_d0,
        q0 => stage1_q0);

    grp_dut_mel_into_dct_fu_119 : component dut_mel_into_dct
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_dut_mel_into_dct_fu_119_ap_start,
        ap_done => grp_dut_mel_into_dct_fu_119_ap_done,
        ap_idle => grp_dut_mel_into_dct_fu_119_ap_idle,
        ap_ready => grp_dut_mel_into_dct_fu_119_ap_ready,
        z2_address0 => grp_dut_mel_into_dct_fu_119_z2_address0,
        z2_ce0 => grp_dut_mel_into_dct_fu_119_z2_ce0,
        z2_q0 => stage1_q0,
        ap_return => grp_dut_mel_into_dct_fu_119_ap_return);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_reg_grp_dut_mel_into_dct_fu_119_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_grp_dut_mel_into_dct_fu_119_ap_start <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((ap_const_lv1_0 = exitcond5_fu_136_p2)))) then 
                    ap_reg_grp_dut_mel_into_dct_fu_119_ap_start <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_dut_mel_into_dct_fu_119_ap_ready)) then 
                    ap_reg_grp_dut_mel_into_dct_fu_119_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_reg_97_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and not(ap_sig_90) and not((exitcond_fu_170_p2 = ap_const_lv1_0)))) then 
                i_reg_97 <= i_4_reg_209;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                i_reg_97 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    j_reg_108_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (ap_const_lv1_0 = exitcond5_fu_136_p2))) then 
                j_reg_108 <= ap_const_lv8_0;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and not((strm_in_V_V_empty_n = ap_const_logic_0)))) then 
                j_reg_108 <= j_5_reg_222;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then
                i_4_reg_209 <= i_4_fu_142_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and not(ap_sig_90))) then
                j_5_reg_222 <= j_5_fu_176_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (ap_const_lv1_0 = exitcond5_fu_136_p2))) then
                tmp_s_reg_214 <= tmp_s_fu_164_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, strm_in_V_V_empty_n, strm_out_V_V_full_n, exitcond_fu_170_p2, exitcond5_fu_136_p2, ap_sig_90, grp_dut_mel_into_dct_fu_119_ap_done)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                if ((ap_const_lv1_0 = exitcond5_fu_136_p2)) then
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                else
                    ap_NS_fsm <= ap_ST_st5_fsm_4;
                end if;
            when ap_ST_st3_fsm_2 => 
                if (((exitcond_fu_170_p2 = ap_const_lv1_0) and not(ap_sig_90))) then
                    ap_NS_fsm <= ap_ST_st4_fsm_3;
                elsif ((not(ap_sig_90) and not((exitcond_fu_170_p2 = ap_const_lv1_0)))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                end if;
            when ap_ST_st4_fsm_3 => 
                if (not((strm_in_V_V_empty_n = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                else
                    ap_NS_fsm <= ap_ST_st4_fsm_3;
                end if;
            when ap_ST_st5_fsm_4 => 
                if (not(((strm_out_V_V_full_n = ap_const_logic_0) or (ap_const_logic_0 = grp_dut_mel_into_dct_fu_119_ap_done)))) then
                    ap_NS_fsm <= ap_ST_st6_fsm_5;
                else
                    ap_NS_fsm <= ap_ST_st5_fsm_4;
                end if;
            when ap_ST_st6_fsm_5 => 
                if (not((strm_out_V_V_full_n = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                else
                    ap_NS_fsm <= ap_ST_st6_fsm_5;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;

    ap_done_assign_proc : process(strm_out_V_V_full_n, ap_sig_cseq_ST_st6_fsm_5)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5) and not((strm_out_V_V_full_n = ap_const_logic_0)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(strm_out_V_V_full_n, ap_sig_cseq_ST_st6_fsm_5)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5) and not((strm_out_V_V_full_n = ap_const_logic_0)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_21_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_21 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    ap_sig_42_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_42 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    ap_sig_53_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_53 <= (ap_const_lv1_1 = ap_CS_fsm(3 downto 3));
    end process;


    ap_sig_62_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_62 <= (ap_const_lv1_1 = ap_CS_fsm(4 downto 4));
    end process;


    ap_sig_69_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_69 <= (ap_const_lv1_1 = ap_CS_fsm(5 downto 5));
    end process;


    ap_sig_79_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_79 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    ap_sig_90_assign_proc : process(strm_in_V_V_empty_n, exitcond_fu_170_p2)
    begin
                ap_sig_90 <= ((exitcond_fu_170_p2 = ap_const_lv1_0) and (strm_in_V_V_empty_n = ap_const_logic_0));
    end process;


    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_21)
    begin
        if (ap_sig_21) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st2_fsm_1_assign_proc : process(ap_sig_79)
    begin
        if (ap_sig_79) then 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st3_fsm_2_assign_proc : process(ap_sig_42)
    begin
        if (ap_sig_42) then 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st4_fsm_3_assign_proc : process(ap_sig_53)
    begin
        if (ap_sig_53) then 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st5_fsm_4_assign_proc : process(ap_sig_62)
    begin
        if (ap_sig_62) then 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st6_fsm_5_assign_proc : process(ap_sig_69)
    begin
        if (ap_sig_69) then 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond5_fu_136_p2 <= "1" when (i_reg_97 = ap_const_lv6_31) else "0";
    exitcond_fu_170_p2 <= "1" when (j_reg_108 = ap_const_lv8_81) else "0";
    grp_dut_mel_into_dct_fu_119_ap_start <= ap_reg_grp_dut_mel_into_dct_fu_119_ap_start;
    i_4_fu_142_p2 <= std_logic_vector(unsigned(i_reg_97) + unsigned(ap_const_lv6_1));
    j_5_fu_176_p2 <= std_logic_vector(unsigned(j_reg_108) + unsigned(ap_const_lv8_1));
    output_fu_201_p1 <= std_logic_vector(resize(unsigned(grp_dut_mel_into_dct_fu_119_ap_return),32));
    p_shl_cast_fu_160_p1 <= std_logic_vector(resize(unsigned(tmp_fu_152_p3),14));

    stage1_address0_assign_proc : process(ap_sig_cseq_ST_st3_fsm_2, ap_sig_cseq_ST_st5_fsm_4, grp_dut_mel_into_dct_fu_119_z2_address0, tmp_57_cast_fu_196_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
            stage1_address0 <= tmp_57_cast_fu_196_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then 
            stage1_address0 <= grp_dut_mel_into_dct_fu_119_z2_address0;
        else 
            stage1_address0 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    stage1_ce0_assign_proc : process(ap_sig_cseq_ST_st3_fsm_2, ap_sig_cseq_ST_st5_fsm_4, ap_sig_90, grp_dut_mel_into_dct_fu_119_z2_ce0)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and not(ap_sig_90))) then 
            stage1_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then 
            stage1_ce0 <= grp_dut_mel_into_dct_fu_119_z2_ce0;
        else 
            stage1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    stage1_d0 <= strm_in_V_V_dout;

    stage1_we0_assign_proc : process(ap_sig_cseq_ST_st3_fsm_2, exitcond_fu_170_p2, ap_sig_90)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and (exitcond_fu_170_p2 = ap_const_lv1_0) and not(ap_sig_90)))) then 
            stage1_we0 <= ap_const_logic_1;
        else 
            stage1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    strm_in_V_V_blk_n_assign_proc : process(strm_in_V_V_empty_n, ap_sig_cseq_ST_st3_fsm_2, exitcond_fu_170_p2, ap_sig_cseq_ST_st4_fsm_3)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and (exitcond_fu_170_p2 = ap_const_lv1_0)) or (ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3))) then 
            strm_in_V_V_blk_n <= strm_in_V_V_empty_n;
        else 
            strm_in_V_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    strm_in_V_V_read_assign_proc : process(strm_in_V_V_empty_n, ap_sig_cseq_ST_st3_fsm_2, exitcond_fu_170_p2, ap_sig_cseq_ST_st4_fsm_3, ap_sig_90)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and not((strm_in_V_V_empty_n = ap_const_logic_0))) or ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and (exitcond_fu_170_p2 = ap_const_lv1_0) and not(ap_sig_90)))) then 
            strm_in_V_V_read <= ap_const_logic_1;
        else 
            strm_in_V_V_read <= ap_const_logic_0;
        end if; 
    end process;


    strm_out_V_V_blk_n_assign_proc : process(strm_out_V_V_full_n, ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st6_fsm_5)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) or (ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5))) then 
            strm_out_V_V_blk_n <= strm_out_V_V_full_n;
        else 
            strm_out_V_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    strm_out_V_V_din_assign_proc : process(strm_out_V_V_full_n, ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st6_fsm_5, grp_dut_mel_into_dct_fu_119_ap_done, output_fu_201_p1)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5) and not((strm_out_V_V_full_n = ap_const_logic_0)))) then 
            strm_out_V_V_din <= ap_const_lv32_1;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) and not(((strm_out_V_V_full_n = ap_const_logic_0) or (ap_const_logic_0 = grp_dut_mel_into_dct_fu_119_ap_done))))) then 
            strm_out_V_V_din <= output_fu_201_p1;
        else 
            strm_out_V_V_din <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    strm_out_V_V_write_assign_proc : process(strm_out_V_V_full_n, ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st6_fsm_5, grp_dut_mel_into_dct_fu_119_ap_done)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) and not(((strm_out_V_V_full_n = ap_const_logic_0) or (ap_const_logic_0 = grp_dut_mel_into_dct_fu_119_ap_done)))) or ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5) and not((strm_out_V_V_full_n = ap_const_logic_0))))) then 
            strm_out_V_V_write <= ap_const_logic_1;
        else 
            strm_out_V_V_write <= ap_const_logic_0;
        end if; 
    end process;

    tmp_40_cast_fu_187_p1 <= std_logic_vector(resize(unsigned(j_reg_108),14));
    tmp_40_fu_191_p2 <= std_logic_vector(unsigned(tmp_s_reg_214) + unsigned(tmp_40_cast_fu_187_p1));
    tmp_57_cast_fu_196_p1 <= std_logic_vector(resize(unsigned(tmp_40_fu_191_p2),64));
    tmp_cast_fu_148_p1 <= std_logic_vector(resize(unsigned(i_reg_97),14));
    tmp_fu_152_p3 <= (i_reg_97 & ap_const_lv7_0);
    tmp_s_fu_164_p2 <= std_logic_vector(unsigned(tmp_cast_fu_148_p1) + unsigned(p_shl_cast_fu_160_p1));
end behav;
