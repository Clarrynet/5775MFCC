-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.2
-- Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity dut_knn is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_r_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    input_r_ce0 : OUT STD_LOGIC;
    input_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of dut_knn is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000000000000001";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000000000000010";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000000000000100";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000000000001000";
    constant ap_ST_st5_fsm_4 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000000000010000";
    constant ap_ST_st6_fsm_5 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000000000100000";
    constant ap_ST_st7_fsm_6 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000000001000000";
    constant ap_ST_st8_fsm_7 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000000010000000";
    constant ap_ST_st9_fsm_8 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000000100000000";
    constant ap_ST_st10_fsm_9 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000001000000000";
    constant ap_ST_st11_fsm_10 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000010000000000";
    constant ap_ST_st12_fsm_11 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000100000000000";
    constant ap_ST_st13_fsm_12 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000001000000000000";
    constant ap_ST_st14_fsm_13 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000010000000000000";
    constant ap_ST_st15_fsm_14 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000100000000000000";
    constant ap_ST_st16_fsm_15 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000001000000000000000";
    constant ap_ST_st17_fsm_16 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000010000000000000000";
    constant ap_ST_st18_fsm_17 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000100000000000000000";
    constant ap_ST_st19_fsm_18 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000001000000000000000000";
    constant ap_ST_st20_fsm_19 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000010000000000000000000";
    constant ap_ST_st21_fsm_20 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000100000000000000000000";
    constant ap_ST_st22_fsm_21 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000001000000000000000000000";
    constant ap_ST_st23_fsm_22 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000010000000000000000000000";
    constant ap_ST_st24_fsm_23 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000100000000000000000000000";
    constant ap_ST_st25_fsm_24 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000001000000000000000000000000";
    constant ap_ST_st26_fsm_25 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000010000000000000000000000000";
    constant ap_ST_st27_fsm_26 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000100000000000000000000000000";
    constant ap_ST_st28_fsm_27 : STD_LOGIC_VECTOR (36 downto 0) := "0000000001000000000000000000000000000";
    constant ap_ST_st29_fsm_28 : STD_LOGIC_VECTOR (36 downto 0) := "0000000010000000000000000000000000000";
    constant ap_ST_st30_fsm_29 : STD_LOGIC_VECTOR (36 downto 0) := "0000000100000000000000000000000000000";
    constant ap_ST_st31_fsm_30 : STD_LOGIC_VECTOR (36 downto 0) := "0000001000000000000000000000000000000";
    constant ap_ST_st32_fsm_31 : STD_LOGIC_VECTOR (36 downto 0) := "0000010000000000000000000000000000000";
    constant ap_ST_st33_fsm_32 : STD_LOGIC_VECTOR (36 downto 0) := "0000100000000000000000000000000000000";
    constant ap_ST_st34_fsm_33 : STD_LOGIC_VECTOR (36 downto 0) := "0001000000000000000000000000000000000";
    constant ap_ST_st35_fsm_34 : STD_LOGIC_VECTOR (36 downto 0) := "0010000000000000000000000000000000000";
    constant ap_ST_st36_fsm_35 : STD_LOGIC_VECTOR (36 downto 0) := "0100000000000000000000000000000000000";
    constant ap_ST_st37_fsm_36 : STD_LOGIC_VECTOR (36 downto 0) := "1000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv14_0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_3E4CCCCD : STD_LOGIC_VECTOR (31 downto 0) := "00111110010011001100110011001101";
    constant ap_const_lv14_3D5 : STD_LOGIC_VECTOR (13 downto 0) := "00001111010101";
    constant ap_const_lv14_3E8 : STD_LOGIC_VECTOR (13 downto 0) := "00001111101000";
    constant ap_const_lv9_13 : STD_LOGIC_VECTOR (8 downto 0) := "000010011";
    constant ap_const_lv4_E : STD_LOGIC_VECTOR (3 downto 0) := "1110";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv14_3D4 : STD_LOGIC_VECTOR (13 downto 0) := "00001111010100";
    constant ap_const_lv10_32 : STD_LOGIC_VECTOR (9 downto 0) := "0000110010";
    constant ap_const_lv5_14 : STD_LOGIC_VECTOR (4 downto 0) := "10100";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv6_31 : STD_LOGIC_VECTOR (5 downto 0) := "110001";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv14_2AE : STD_LOGIC_VECTOR (13 downto 0) := "00001010101110";
    constant ap_const_lv10_31 : STD_LOGIC_VECTOR (9 downto 0) := "0000110001";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv9_181 : STD_LOGIC_VECTOR (8 downto 0) := "110000001";
    constant ap_const_lv8_7F : STD_LOGIC_VECTOR (7 downto 0) := "01111111";
    constant ap_const_lv32_36 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110110";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_54 : BOOLEAN;
    signal training_data_V_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal training_data_V_ce0 : STD_LOGIC;
    signal training_data_V_q0 : STD_LOGIC_VECTOR (5 downto 0);
    signal next_mul8_fu_515_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal next_mul8_reg_1120 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_sig_cseq_ST_st2_fsm_1 : STD_LOGIC;
    signal ap_sig_80 : BOOLEAN;
    signal next_mul6_fu_521_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal next_mul6_reg_1125 : STD_LOGIC_VECTOR (13 downto 0);
    signal next_mul4_fu_527_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal next_mul4_reg_1130 : STD_LOGIC_VECTOR (8 downto 0);
    signal j_6_fu_539_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_6_reg_1138 : STD_LOGIC_VECTOR (3 downto 0);
    signal training_data2_addr_reg_1143 : STD_LOGIC_VECTOR (13 downto 0);
    signal exitcond10_fu_533_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal next_mul2_fu_556_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal next_mul2_reg_1148 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_sig_cseq_ST_st3_fsm_2 : STD_LOGIC;
    signal ap_sig_101 : BOOLEAN;
    signal i_cast_cast_fu_562_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_cast_cast_reg_1153 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_6_fu_572_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_6_reg_1161 : STD_LOGIC_VECTOR (4 downto 0);
    signal exitcond9_fu_566_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal k_2_fu_603_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal k_2_reg_1174 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_sig_cseq_ST_st4_fsm_3 : STD_LOGIC;
    signal ap_sig_120 : BOOLEAN;
    signal exitcond8_fu_597_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal next_mul_fu_630_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal next_mul_reg_1184 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_52_fu_639_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_52_reg_1189 : STD_LOGIC_VECTOR (13 downto 0);
    signal training_data_V_load_reg_1194 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_sig_cseq_ST_st5_fsm_4 : STD_LOGIC;
    signal ap_sig_137 : BOOLEAN;
    signal ap_sig_cseq_ST_st6_fsm_5 : STD_LOGIC;
    signal ap_sig_146 : BOOLEAN;
    signal grp_fu_504_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_46_reg_1204 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st11_fsm_10 : STD_LOGIC;
    signal ap_sig_155 : BOOLEAN;
    signal grp_fu_507_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_40_reg_1209 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st17_fsm_16 : STD_LOGIC;
    signal ap_sig_164 : BOOLEAN;
    signal next_mul3_fu_653_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal next_mul3_reg_1214 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_sig_cseq_ST_st19_fsm_18 : STD_LOGIC;
    signal ap_sig_173 : BOOLEAN;
    signal i1_cast_cast_fu_659_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal i1_cast_cast_reg_1219 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_5_fu_669_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_5_reg_1227 : STD_LOGIC_VECTOR (4 downto 0);
    signal next_mul9_fu_675_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal next_mul9_reg_1232 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_sig_cseq_ST_st20_fsm_19 : STD_LOGIC;
    signal ap_sig_186 : BOOLEAN;
    signal j2_cast_fu_681_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal j2_cast_reg_1237 : STD_LOGIC_VECTOR (9 downto 0);
    signal j_7_fu_691_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_7_reg_1245 : STD_LOGIC_VECTOR (3 downto 0);
    signal k_3_fu_703_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal k_3_reg_1253 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_sig_cseq_ST_st21_fsm_20 : STD_LOGIC;
    signal ap_sig_199 : BOOLEAN;
    signal next_mul10_fu_709_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal next_mul10_reg_1258 : STD_LOGIC_VECTOR (9 downto 0);
    signal exitcond5_fu_697_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal next_mul12_fu_729_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal next_mul12_reg_1268 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_50_fu_738_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_50_reg_1273 : STD_LOGIC_VECTOR (13 downto 0);
    signal next_mul5_fu_748_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal next_mul5_reg_1278 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_sig_cseq_ST_st23_fsm_22 : STD_LOGIC;
    signal ap_sig_219 : BOOLEAN;
    signal next_mul7_fu_754_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal next_mul7_reg_1283 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_7_fu_766_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_7_reg_1291 : STD_LOGIC_VECTOR (4 downto 0);
    signal min_distance_addr_reg_1296 : STD_LOGIC_VECTOR (4 downto 0);
    signal exitcond4_fu_760_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal group_addr_reg_1301 : STD_LOGIC_VECTOR (4 downto 0);
    signal next_mul11_fu_790_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal next_mul11_reg_1306 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_sig_cseq_ST_st24_fsm_23 : STD_LOGIC;
    signal ap_sig_239 : BOOLEAN;
    signal j5_cast6_fu_796_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal j5_cast6_reg_1311 : STD_LOGIC_VECTOR (9 downto 0);
    signal j_8_fu_806_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_8_reg_1319 : STD_LOGIC_VECTOR (3 downto 0);
    signal training_data2_addr_3_reg_1324 : STD_LOGIC_VECTOR (13 downto 0);
    signal exitcond3_fu_800_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal distance_addr_reg_1329 : STD_LOGIC_VECTOR (3 downto 0);
    signal k_4_fu_834_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal k_4_reg_1337 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_sig_cseq_ST_st25_fsm_24 : STD_LOGIC;
    signal ap_sig_259 : BOOLEAN;
    signal exitcond_fu_828_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal next_mul13_fu_855_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal next_mul13_reg_1347 : STD_LOGIC_VECTOR (9 downto 0);
    signal input_load_reg_1357 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st26_fsm_25 : STD_LOGIC;
    signal ap_sig_276 : BOOLEAN;
    signal training_instance_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal training_instance_load_reg_1362 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_500_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_x_assign_reg_1367 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st31_fsm_30 : STD_LOGIC;
    signal ap_sig_287 : BOOLEAN;
    signal tmp_6_fu_927_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_reg_1372 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_st32_fsm_31 : STD_LOGIC;
    signal ap_sig_296 : BOOLEAN;
    signal tmp_54_fu_940_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_54_reg_1376 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_st34_fsm_33 : STD_LOGIC;
    signal ap_sig_305 : BOOLEAN;
    signal p_Result_20_reg_1380 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_st35_fsm_34 : STD_LOGIC;
    signal ap_sig_314 : BOOLEAN;
    signal p_Val2_28_fu_1066_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_28_reg_1385 : STD_LOGIC_VECTOR (31 downto 0);
    signal group_zero_1_fu_1104_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st37_fsm_36 : STD_LOGIC;
    signal ap_sig_325 : BOOLEAN;
    signal group_one_1_fu_1112_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal training_data2_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal training_data2_ce0 : STD_LOGIC;
    signal training_data2_we0 : STD_LOGIC;
    signal training_data2_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal training_data2_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal training_instance_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal training_instance_ce0 : STD_LOGIC;
    signal training_instance_we0 : STD_LOGIC;
    signal min_distance_ce0 : STD_LOGIC;
    signal min_distance_we0 : STD_LOGIC;
    signal min_distance_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal distance_ce0 : STD_LOGIC;
    signal distance_we0 : STD_LOGIC;
    signal distance_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal distance_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal group_ce0 : STD_LOGIC;
    signal group_we0 : STD_LOGIC;
    signal group_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal group_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_reg_226 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_sig_cseq_ST_st18_fsm_17 : STD_LOGIC;
    signal ap_sig_388 : BOOLEAN;
    signal phi_mul3_reg_237 : STD_LOGIC_VECTOR (8 downto 0);
    signal phi_mul5_reg_249 : STD_LOGIC_VECTOR (13 downto 0);
    signal phi_mul7_reg_261 : STD_LOGIC_VECTOR (13 downto 0);
    signal i_reg_273 : STD_LOGIC_VECTOR (4 downto 0);
    signal phi_mul1_reg_284 : STD_LOGIC_VECTOR (9 downto 0);
    signal k_reg_296 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_sig_cseq_ST_st12_fsm_11 : STD_LOGIC;
    signal ap_sig_413 : BOOLEAN;
    signal phi_mul_reg_307 : STD_LOGIC_VECTOR (9 downto 0);
    signal i1_reg_318 : STD_LOGIC_VECTOR (4 downto 0);
    signal exitcond6_fu_685_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal phi_mul4_reg_329 : STD_LOGIC_VECTOR (13 downto 0);
    signal j2_reg_341 : STD_LOGIC_VECTOR (3 downto 0);
    signal exitcond7_fu_663_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal phi_mul10_reg_352 : STD_LOGIC_VECTOR (13 downto 0);
    signal k3_reg_364 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_sig_cseq_ST_st22_fsm_21 : STD_LOGIC;
    signal ap_sig_445 : BOOLEAN;
    signal phi_mul9_reg_375 : STD_LOGIC_VECTOR (9 downto 0);
    signal phi_mul11_reg_386 : STD_LOGIC_VECTOR (9 downto 0);
    signal group_zero_s_reg_397 : STD_LOGIC_VECTOR (31 downto 0);
    signal group_one_s_reg_409 : STD_LOGIC_VECTOR (31 downto 0);
    signal i4_reg_421 : STD_LOGIC_VECTOR (4 downto 0);
    signal phi_mul6_reg_432 : STD_LOGIC_VECTOR (9 downto 0);
    signal phi_mul8_reg_444 : STD_LOGIC_VECTOR (13 downto 0);
    signal j5_reg_456 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_sig_cseq_ST_st36_fsm_35 : STD_LOGIC;
    signal ap_sig_471 : BOOLEAN;
    signal phi_mul12_reg_467 : STD_LOGIC_VECTOR (13 downto 0);
    signal k6_reg_478 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_sig_cseq_ST_st33_fsm_32 : STD_LOGIC;
    signal ap_sig_482 : BOOLEAN;
    signal phi_mul13_reg_489 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_61_cast_fu_551_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_45_fu_625_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_66_cast_fu_649_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_69_cast_fu_724_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_70_cast_fu_744_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_42_fu_772_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_68_cast_fu_823_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_49_fu_812_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_71_cast_fu_850_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_72_cast_fu_870_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_sig_cseq_ST_st27_fsm_26 : STD_LOGIC;
    signal ap_sig_529 : BOOLEAN;
    signal grp_fu_504_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_507_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_fu_510_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_fu_545_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_fu_578_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal k_cast1_fu_593_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp1_fu_609_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp1_cast_fu_615_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_44_fu_619_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_50_cast_fu_635_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_52_cast_fu_714_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_47_fu_718_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_54_cast_fu_734_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal slt_fu_778_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_53_fu_817_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_56_cast_fu_840_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_55_fu_844_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_58_cast_fu_860_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_56_fu_864_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_Val2_s_fu_875_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_32_fu_878_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal p_Result_s_fu_886_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_fu_899_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_33_fu_882_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs_fu_915_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs_fu_909_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_fu_921_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_fu_510_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_25_fu_946_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal loc_V_2_fu_968_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal p_Result_21_fu_972_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal loc_V_fu_958_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_i_i_i_cast2_fu_984_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sh_assign_fu_988_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_115_i_i_fu_1002_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal isNeg_fu_994_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_115_i_i_cast_fu_1008_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sh_assign_1_fu_1012_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal sh_assign_1_cast_fu_1020_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sh_assign_1_cast_cast_fu_1024_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_i_i_fu_980_p1 : STD_LOGIC_VECTOR (77 downto 0);
    signal tmp_116_i_i_fu_1028_p1 : STD_LOGIC_VECTOR (77 downto 0);
    signal tmp_117_i_i_fu_1032_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_37_fu_1044_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_119_i_i_fu_1038_p2 : STD_LOGIC_VECTOR (77 downto 0);
    signal tmp_57_fu_1052_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_58_fu_1056_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_i_i_fu_1074_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_48_fu_1086_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal group_zero_fu_1092_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal group_one_fu_1098_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal rev_fu_784_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_return_preg : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (36 downto 0);

    component dut_fsub_32ns_32ns_32_5_full_dsp IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component dut_uitofp_32ns_32_6 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component dut_sitofp_32ns_32_6 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component dut_fcmp_32ns_32ns_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component dut_knn_training_data_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (13 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (5 downto 0) );
    end component;


    component dut_knn_training_data2 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (13 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component dut_knn_training_instance IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (13 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component dut_knn_min_distance IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component dut_knn_distance IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    training_data_V_U : component dut_knn_training_data_V
    generic map (
        DataWidth => 6,
        AddressRange => 14000,
        AddressWidth => 14)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => training_data_V_address0,
        ce0 => training_data_V_ce0,
        q0 => training_data_V_q0);

    training_data2_U : component dut_knn_training_data2
    generic map (
        DataWidth => 32,
        AddressRange => 13734,
        AddressWidth => 14)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => training_data2_address0,
        ce0 => training_data2_ce0,
        we0 => training_data2_we0,
        d0 => training_data2_d0,
        q0 => training_data2_q0);

    training_instance_U : component dut_knn_training_instance
    generic map (
        DataWidth => 32,
        AddressRange => 13720,
        AddressWidth => 14)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => training_instance_address0,
        ce0 => training_instance_ce0,
        we0 => training_instance_we0,
        d0 => training_data2_q0,
        q0 => training_instance_q0);

    min_distance_U : component dut_knn_min_distance
    generic map (
        DataWidth => 32,
        AddressRange => 20,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => min_distance_addr_reg_1296,
        ce0 => min_distance_ce0,
        we0 => min_distance_we0,
        d0 => distance_q0,
        q0 => min_distance_q0);

    distance_U : component dut_knn_distance
    generic map (
        DataWidth => 32,
        AddressRange => 14,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => distance_addr_reg_1329,
        ce0 => distance_ce0,
        we0 => distance_we0,
        d0 => distance_d0,
        q0 => distance_q0);

    group_U : component dut_knn_min_distance
    generic map (
        DataWidth => 32,
        AddressRange => 20,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => group_addr_reg_1301,
        ce0 => group_ce0,
        we0 => group_we0,
        d0 => group_d0,
        q0 => group_q0);

    dut_fsub_32ns_32ns_32_5_full_dsp_U13 : component dut_fsub_32ns_32ns_32_5_full_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => input_load_reg_1357,
        din1 => training_instance_load_reg_1362,
        ce => ap_const_logic_1,
        dout => grp_fu_500_p2);

    dut_uitofp_32ns_32_6_U14 : component dut_uitofp_32ns_32_6
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_504_p0,
        ce => ap_const_logic_1,
        dout => grp_fu_504_p1);

    dut_sitofp_32ns_32_6_U15 : component dut_sitofp_32ns_32_6
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_507_p0,
        ce => ap_const_logic_1,
        dout => grp_fu_507_p1);

    dut_fcmp_32ns_32ns_1_1_U16 : component dut_fcmp_32ns_32ns_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        din0 => tmp_5_fu_510_p0,
        din1 => ap_const_lv32_3E4CCCCD,
        opcode => ap_const_lv5_4,
        dout => tmp_5_fu_510_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_return_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_preg <= ap_const_lv1_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_st23_fsm_22) and not((ap_const_lv1_0 = exitcond4_fu_760_p2)))) then 
                    ap_return_preg <= rev_fu_784_p2;
                end if; 
            end if;
        end if;
    end process;


    i1_reg_318_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st20_fsm_19) and not((ap_const_lv1_0 = exitcond6_fu_685_p2)))) then 
                i1_reg_318 <= i_5_reg_1227;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((exitcond10_fu_533_p2 = ap_const_lv1_0)))) then 
                i1_reg_318 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    i4_reg_421_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st19_fsm_18) and not((ap_const_lv1_0 = exitcond7_fu_663_p2)))) then 
                i4_reg_421 <= ap_const_lv5_0;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st37_fsm_36)) then 
                i4_reg_421 <= i_7_reg_1291;
            end if; 
        end if;
    end process;

    i_reg_273_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and not((ap_const_lv1_0 = exitcond8_fu_597_p2)))) then 
                i_reg_273 <= i_6_reg_1161;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (exitcond10_fu_533_p2 = ap_const_lv1_0))) then 
                i_reg_273 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    j2_reg_341_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st21_fsm_20) and not((ap_const_lv1_0 = exitcond5_fu_697_p2)))) then 
                j2_reg_341 <= j_7_reg_1245;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st19_fsm_18) and (ap_const_lv1_0 = exitcond7_fu_663_p2))) then 
                j2_reg_341 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    j5_reg_456_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st23_fsm_22) and (ap_const_lv1_0 = exitcond4_fu_760_p2))) then 
                j5_reg_456 <= ap_const_lv4_0;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st36_fsm_35)) then 
                j5_reg_456 <= j_8_reg_1319;
            end if; 
        end if;
    end process;

    j_reg_226_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st18_fsm_17)) then 
                j_reg_226 <= j_6_reg_1138;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                j_reg_226 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    k3_reg_364_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st20_fsm_19) and (ap_const_lv1_0 = exitcond6_fu_685_p2))) then 
                k3_reg_364 <= ap_const_lv6_0;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st22_fsm_21)) then 
                k3_reg_364 <= k_3_reg_1253;
            end if; 
        end if;
    end process;

    k6_reg_478_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st24_fsm_23) and (ap_const_lv1_0 = exitcond3_fu_800_p2))) then 
                k6_reg_478 <= ap_const_lv6_0;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st33_fsm_32)) then 
                k6_reg_478 <= k_4_reg_1337;
            end if; 
        end if;
    end process;

    k_reg_296_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and (ap_const_lv1_0 = exitcond9_fu_566_p2))) then 
                k_reg_296 <= ap_const_lv6_0;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_11)) then 
                k_reg_296 <= k_2_reg_1174;
            end if; 
        end if;
    end process;

    phi_mul10_reg_352_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st21_fsm_20) and not((ap_const_lv1_0 = exitcond5_fu_697_p2)))) then 
                phi_mul10_reg_352 <= next_mul9_reg_1232;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st19_fsm_18) and (ap_const_lv1_0 = exitcond7_fu_663_p2))) then 
                phi_mul10_reg_352 <= ap_const_lv14_0;
            end if; 
        end if;
    end process;

    phi_mul11_reg_386_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st20_fsm_19) and (ap_const_lv1_0 = exitcond6_fu_685_p2))) then 
                phi_mul11_reg_386 <= ap_const_lv10_0;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st22_fsm_21)) then 
                phi_mul11_reg_386 <= next_mul12_reg_1268;
            end if; 
        end if;
    end process;

    phi_mul12_reg_467_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st23_fsm_22) and (ap_const_lv1_0 = exitcond4_fu_760_p2))) then 
                phi_mul12_reg_467 <= ap_const_lv14_0;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st36_fsm_35)) then 
                phi_mul12_reg_467 <= next_mul11_reg_1306;
            end if; 
        end if;
    end process;

    phi_mul13_reg_489_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st24_fsm_23) and (ap_const_lv1_0 = exitcond3_fu_800_p2))) then 
                phi_mul13_reg_489 <= ap_const_lv10_0;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st33_fsm_32)) then 
                phi_mul13_reg_489 <= next_mul13_reg_1347;
            end if; 
        end if;
    end process;

    phi_mul1_reg_284_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and not((ap_const_lv1_0 = exitcond8_fu_597_p2)))) then 
                phi_mul1_reg_284 <= next_mul2_reg_1148;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (exitcond10_fu_533_p2 = ap_const_lv1_0))) then 
                phi_mul1_reg_284 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    phi_mul3_reg_237_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st18_fsm_17)) then 
                phi_mul3_reg_237 <= next_mul4_reg_1130;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                phi_mul3_reg_237 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    phi_mul4_reg_329_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st20_fsm_19) and not((ap_const_lv1_0 = exitcond6_fu_685_p2)))) then 
                phi_mul4_reg_329 <= next_mul3_reg_1214;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((exitcond10_fu_533_p2 = ap_const_lv1_0)))) then 
                phi_mul4_reg_329 <= ap_const_lv14_0;
            end if; 
        end if;
    end process;

    phi_mul5_reg_249_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st18_fsm_17)) then 
                phi_mul5_reg_249 <= next_mul6_reg_1125;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                phi_mul5_reg_249 <= ap_const_lv14_0;
            end if; 
        end if;
    end process;

    phi_mul6_reg_432_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st19_fsm_18) and not((ap_const_lv1_0 = exitcond7_fu_663_p2)))) then 
                phi_mul6_reg_432 <= ap_const_lv10_0;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st37_fsm_36)) then 
                phi_mul6_reg_432 <= next_mul7_reg_1283;
            end if; 
        end if;
    end process;

    phi_mul7_reg_261_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st18_fsm_17)) then 
                phi_mul7_reg_261 <= next_mul8_reg_1120;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                phi_mul7_reg_261 <= ap_const_lv14_0;
            end if; 
        end if;
    end process;

    phi_mul8_reg_444_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st19_fsm_18) and not((ap_const_lv1_0 = exitcond7_fu_663_p2)))) then 
                phi_mul8_reg_444 <= ap_const_lv14_0;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st37_fsm_36)) then 
                phi_mul8_reg_444 <= next_mul5_reg_1278;
            end if; 
        end if;
    end process;

    phi_mul9_reg_375_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st20_fsm_19) and (ap_const_lv1_0 = exitcond6_fu_685_p2))) then 
                phi_mul9_reg_375 <= ap_const_lv10_0;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st22_fsm_21)) then 
                phi_mul9_reg_375 <= next_mul10_reg_1258;
            end if; 
        end if;
    end process;

    phi_mul_reg_307_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and (ap_const_lv1_0 = exitcond9_fu_566_p2))) then 
                phi_mul_reg_307 <= ap_const_lv10_0;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_11)) then 
                phi_mul_reg_307 <= next_mul_reg_1184;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st24_fsm_23) and (ap_const_lv1_0 = exitcond3_fu_800_p2))) then
                distance_addr_reg_1329 <= tmp_49_fu_812_p1(4 - 1 downto 0);
                training_data2_addr_3_reg_1324 <= tmp_68_cast_fu_823_p1(14 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st23_fsm_22) and (ap_const_lv1_0 = exitcond4_fu_760_p2))) then
                group_addr_reg_1301 <= tmp_42_fu_772_p1(5 - 1 downto 0);
                min_distance_addr_reg_1296 <= tmp_42_fu_772_p1(5 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st37_fsm_36)) then
                group_one_s_reg_409 <= group_one_1_fu_1112_p3;
                group_zero_s_reg_397 <= group_zero_1_fu_1104_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st19_fsm_18)) then
                    i1_cast_cast_reg_1219(4 downto 0) <= i1_cast_cast_fu_659_p1(4 downto 0);
                i_5_reg_1227 <= i_5_fu_669_p2;
                next_mul3_reg_1214 <= next_mul3_fu_653_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then
                i_6_reg_1161 <= i_6_fu_572_p2;
                    i_cast_cast_reg_1153(4 downto 0) <= i_cast_cast_fu_562_p1(4 downto 0);
                next_mul2_reg_1148 <= next_mul2_fu_556_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st23_fsm_22)) then
                i_7_reg_1291 <= i_7_fu_766_p2;
                next_mul5_reg_1278 <= next_mul5_fu_748_p2;
                next_mul7_reg_1283 <= next_mul7_fu_754_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st26_fsm_25)) then
                input_load_reg_1357 <= input_r_q0;
                training_instance_load_reg_1362 <= training_instance_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st20_fsm_19)) then
                    j2_cast_reg_1237(3 downto 0) <= j2_cast_fu_681_p1(3 downto 0);
                j_7_reg_1245 <= j_7_fu_691_p2;
                next_mul9_reg_1232 <= next_mul9_fu_675_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st24_fsm_23)) then
                    j5_cast6_reg_1311(3 downto 0) <= j5_cast6_fu_796_p1(3 downto 0);
                j_8_reg_1319 <= j_8_fu_806_p2;
                next_mul11_reg_1306 <= next_mul11_fu_790_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then
                j_6_reg_1138 <= j_6_fu_539_p2;
                next_mul4_reg_1130 <= next_mul4_fu_527_p2;
                next_mul6_reg_1125 <= next_mul6_fu_521_p2;
                next_mul8_reg_1120 <= next_mul8_fu_515_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then
                k_2_reg_1174 <= k_2_fu_603_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st21_fsm_20)) then
                k_3_reg_1253 <= k_3_fu_703_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st25_fsm_24)) then
                k_4_reg_1337 <= k_4_fu_834_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st21_fsm_20) and (ap_const_lv1_0 = exitcond5_fu_697_p2))) then
                next_mul10_reg_1258 <= next_mul10_fu_709_p2;
                next_mul12_reg_1268 <= next_mul12_fu_729_p2;
                tmp_50_reg_1273 <= tmp_50_fu_738_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st25_fsm_24) and (ap_const_lv1_0 = exitcond_fu_828_p2))) then
                next_mul13_reg_1347 <= next_mul13_fu_855_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and (ap_const_lv1_0 = exitcond8_fu_597_p2))) then
                next_mul_reg_1184 <= next_mul_fu_630_p2;
                tmp_52_reg_1189 <= tmp_52_fu_639_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st35_fsm_34)) then
                p_Result_20_reg_1380 <= p_Val2_25_fu_946_p1(31 downto 31);
                p_Val2_28_reg_1385 <= p_Val2_28_fu_1066_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st31_fsm_30)) then
                p_x_assign_reg_1367 <= grp_fu_500_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st17_fsm_16)) then
                tmp_40_reg_1209 <= grp_fu_507_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_10)) then
                tmp_46_reg_1204 <= grp_fu_504_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st34_fsm_33)) then
                tmp_54_reg_1376 <= tmp_54_fu_940_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st32_fsm_31)) then
                tmp_6_reg_1372 <= tmp_6_fu_927_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (exitcond10_fu_533_p2 = ap_const_lv1_0))) then
                training_data2_addr_reg_1143 <= tmp_61_cast_fu_551_p1(14 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then
                training_data_V_load_reg_1194 <= training_data_V_q0;
            end if;
        end if;
    end process;
    i_cast_cast_reg_1153(9 downto 5) <= "00000";
    i1_cast_cast_reg_1219(9 downto 5) <= "00000";
    j2_cast_reg_1237(9 downto 4) <= "000000";
    j5_cast6_reg_1311(9 downto 4) <= "000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, exitcond10_fu_533_p2, exitcond9_fu_566_p2, exitcond8_fu_597_p2, exitcond5_fu_697_p2, exitcond4_fu_760_p2, exitcond3_fu_800_p2, exitcond_fu_828_p2, tmp_54_fu_940_p2, exitcond6_fu_685_p2, exitcond7_fu_663_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                if ((exitcond10_fu_533_p2 = ap_const_lv1_0)) then
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                else
                    ap_NS_fsm <= ap_ST_st19_fsm_18;
                end if;
            when ap_ST_st3_fsm_2 => 
                if (not((ap_const_lv1_0 = exitcond9_fu_566_p2))) then
                    ap_NS_fsm <= ap_ST_st13_fsm_12;
                else
                    ap_NS_fsm <= ap_ST_st4_fsm_3;
                end if;
            when ap_ST_st4_fsm_3 => 
                if ((ap_const_lv1_0 = exitcond8_fu_597_p2)) then
                    ap_NS_fsm <= ap_ST_st5_fsm_4;
                else
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                end if;
            when ap_ST_st5_fsm_4 => 
                ap_NS_fsm <= ap_ST_st6_fsm_5;
            when ap_ST_st6_fsm_5 => 
                ap_NS_fsm <= ap_ST_st7_fsm_6;
            when ap_ST_st7_fsm_6 => 
                ap_NS_fsm <= ap_ST_st8_fsm_7;
            when ap_ST_st8_fsm_7 => 
                ap_NS_fsm <= ap_ST_st9_fsm_8;
            when ap_ST_st9_fsm_8 => 
                ap_NS_fsm <= ap_ST_st10_fsm_9;
            when ap_ST_st10_fsm_9 => 
                ap_NS_fsm <= ap_ST_st11_fsm_10;
            when ap_ST_st11_fsm_10 => 
                ap_NS_fsm <= ap_ST_st12_fsm_11;
            when ap_ST_st12_fsm_11 => 
                ap_NS_fsm <= ap_ST_st4_fsm_3;
            when ap_ST_st13_fsm_12 => 
                ap_NS_fsm <= ap_ST_st14_fsm_13;
            when ap_ST_st14_fsm_13 => 
                ap_NS_fsm <= ap_ST_st15_fsm_14;
            when ap_ST_st15_fsm_14 => 
                ap_NS_fsm <= ap_ST_st16_fsm_15;
            when ap_ST_st16_fsm_15 => 
                ap_NS_fsm <= ap_ST_st17_fsm_16;
            when ap_ST_st17_fsm_16 => 
                ap_NS_fsm <= ap_ST_st18_fsm_17;
            when ap_ST_st18_fsm_17 => 
                ap_NS_fsm <= ap_ST_st2_fsm_1;
            when ap_ST_st19_fsm_18 => 
                if (not((ap_const_lv1_0 = exitcond7_fu_663_p2))) then
                    ap_NS_fsm <= ap_ST_st23_fsm_22;
                else
                    ap_NS_fsm <= ap_ST_st20_fsm_19;
                end if;
            when ap_ST_st20_fsm_19 => 
                if ((ap_const_lv1_0 = exitcond6_fu_685_p2)) then
                    ap_NS_fsm <= ap_ST_st21_fsm_20;
                else
                    ap_NS_fsm <= ap_ST_st19_fsm_18;
                end if;
            when ap_ST_st21_fsm_20 => 
                if ((ap_const_lv1_0 = exitcond5_fu_697_p2)) then
                    ap_NS_fsm <= ap_ST_st22_fsm_21;
                else
                    ap_NS_fsm <= ap_ST_st20_fsm_19;
                end if;
            when ap_ST_st22_fsm_21 => 
                ap_NS_fsm <= ap_ST_st21_fsm_20;
            when ap_ST_st23_fsm_22 => 
                if (not((ap_const_lv1_0 = exitcond4_fu_760_p2))) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                else
                    ap_NS_fsm <= ap_ST_st24_fsm_23;
                end if;
            when ap_ST_st24_fsm_23 => 
                if ((ap_const_lv1_0 = exitcond3_fu_800_p2)) then
                    ap_NS_fsm <= ap_ST_st25_fsm_24;
                else
                    ap_NS_fsm <= ap_ST_st37_fsm_36;
                end if;
            when ap_ST_st25_fsm_24 => 
                if (not((ap_const_lv1_0 = exitcond_fu_828_p2))) then
                    ap_NS_fsm <= ap_ST_st34_fsm_33;
                else
                    ap_NS_fsm <= ap_ST_st26_fsm_25;
                end if;
            when ap_ST_st26_fsm_25 => 
                ap_NS_fsm <= ap_ST_st27_fsm_26;
            when ap_ST_st27_fsm_26 => 
                ap_NS_fsm <= ap_ST_st28_fsm_27;
            when ap_ST_st28_fsm_27 => 
                ap_NS_fsm <= ap_ST_st29_fsm_28;
            when ap_ST_st29_fsm_28 => 
                ap_NS_fsm <= ap_ST_st30_fsm_29;
            when ap_ST_st30_fsm_29 => 
                ap_NS_fsm <= ap_ST_st31_fsm_30;
            when ap_ST_st31_fsm_30 => 
                ap_NS_fsm <= ap_ST_st32_fsm_31;
            when ap_ST_st32_fsm_31 => 
                ap_NS_fsm <= ap_ST_st33_fsm_32;
            when ap_ST_st33_fsm_32 => 
                ap_NS_fsm <= ap_ST_st25_fsm_24;
            when ap_ST_st34_fsm_33 => 
                if ((ap_const_lv1_0 = tmp_54_fu_940_p2)) then
                    ap_NS_fsm <= ap_ST_st36_fsm_35;
                else
                    ap_NS_fsm <= ap_ST_st35_fsm_34;
                end if;
            when ap_ST_st35_fsm_34 => 
                ap_NS_fsm <= ap_ST_st36_fsm_35;
            when ap_ST_st36_fsm_35 => 
                ap_NS_fsm <= ap_ST_st24_fsm_23;
            when ap_ST_st37_fsm_36 => 
                ap_NS_fsm <= ap_ST_st23_fsm_22;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;

    ap_done_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0, ap_sig_cseq_ST_st23_fsm_22, exitcond4_fu_760_p2)
    begin
        if ((((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st23_fsm_22) and not((ap_const_lv1_0 = exitcond4_fu_760_p2))))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_sig_cseq_ST_st23_fsm_22, exitcond4_fu_760_p2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st23_fsm_22) and not((ap_const_lv1_0 = exitcond4_fu_760_p2)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_assign_proc : process(ap_sig_cseq_ST_st23_fsm_22, exitcond4_fu_760_p2, rev_fu_784_p2, ap_return_preg)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st23_fsm_22) and not((ap_const_lv1_0 = exitcond4_fu_760_p2)))) then 
            ap_return <= rev_fu_784_p2;
        else 
            ap_return <= ap_return_preg;
        end if; 
    end process;


    ap_sig_101_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_101 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    ap_sig_120_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_120 <= (ap_const_lv1_1 = ap_CS_fsm(3 downto 3));
    end process;


    ap_sig_137_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_137 <= (ap_const_lv1_1 = ap_CS_fsm(4 downto 4));
    end process;


    ap_sig_146_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_146 <= (ap_const_lv1_1 = ap_CS_fsm(5 downto 5));
    end process;


    ap_sig_155_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_155 <= (ap_const_lv1_1 = ap_CS_fsm(10 downto 10));
    end process;


    ap_sig_164_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_164 <= (ap_const_lv1_1 = ap_CS_fsm(16 downto 16));
    end process;


    ap_sig_173_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_173 <= (ap_const_lv1_1 = ap_CS_fsm(18 downto 18));
    end process;


    ap_sig_186_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_186 <= (ap_const_lv1_1 = ap_CS_fsm(19 downto 19));
    end process;


    ap_sig_199_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_199 <= (ap_const_lv1_1 = ap_CS_fsm(20 downto 20));
    end process;


    ap_sig_219_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_219 <= (ap_const_lv1_1 = ap_CS_fsm(22 downto 22));
    end process;


    ap_sig_239_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_239 <= (ap_const_lv1_1 = ap_CS_fsm(23 downto 23));
    end process;


    ap_sig_259_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_259 <= (ap_const_lv1_1 = ap_CS_fsm(24 downto 24));
    end process;


    ap_sig_276_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_276 <= (ap_const_lv1_1 = ap_CS_fsm(25 downto 25));
    end process;


    ap_sig_287_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_287 <= (ap_const_lv1_1 = ap_CS_fsm(30 downto 30));
    end process;


    ap_sig_296_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_296 <= (ap_const_lv1_1 = ap_CS_fsm(31 downto 31));
    end process;


    ap_sig_305_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_305 <= (ap_const_lv1_1 = ap_CS_fsm(33 downto 33));
    end process;


    ap_sig_314_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_314 <= (ap_const_lv1_1 = ap_CS_fsm(34 downto 34));
    end process;


    ap_sig_325_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_325 <= (ap_const_lv1_1 = ap_CS_fsm(36 downto 36));
    end process;


    ap_sig_388_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_388 <= (ap_const_lv1_1 = ap_CS_fsm(17 downto 17));
    end process;


    ap_sig_413_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_413 <= (ap_const_lv1_1 = ap_CS_fsm(11 downto 11));
    end process;


    ap_sig_445_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_445 <= (ap_const_lv1_1 = ap_CS_fsm(21 downto 21));
    end process;


    ap_sig_471_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_471 <= (ap_const_lv1_1 = ap_CS_fsm(35 downto 35));
    end process;


    ap_sig_482_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_482 <= (ap_const_lv1_1 = ap_CS_fsm(32 downto 32));
    end process;


    ap_sig_529_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_529 <= (ap_const_lv1_1 = ap_CS_fsm(26 downto 26));
    end process;


    ap_sig_54_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_54 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    ap_sig_80_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_80 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    ap_sig_cseq_ST_st11_fsm_10_assign_proc : process(ap_sig_155)
    begin
        if (ap_sig_155) then 
            ap_sig_cseq_ST_st11_fsm_10 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st11_fsm_10 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st12_fsm_11_assign_proc : process(ap_sig_413)
    begin
        if (ap_sig_413) then 
            ap_sig_cseq_ST_st12_fsm_11 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st12_fsm_11 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st17_fsm_16_assign_proc : process(ap_sig_164)
    begin
        if (ap_sig_164) then 
            ap_sig_cseq_ST_st17_fsm_16 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st17_fsm_16 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st18_fsm_17_assign_proc : process(ap_sig_388)
    begin
        if (ap_sig_388) then 
            ap_sig_cseq_ST_st18_fsm_17 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st18_fsm_17 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st19_fsm_18_assign_proc : process(ap_sig_173)
    begin
        if (ap_sig_173) then 
            ap_sig_cseq_ST_st19_fsm_18 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st19_fsm_18 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_54)
    begin
        if (ap_sig_54) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st20_fsm_19_assign_proc : process(ap_sig_186)
    begin
        if (ap_sig_186) then 
            ap_sig_cseq_ST_st20_fsm_19 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st20_fsm_19 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st21_fsm_20_assign_proc : process(ap_sig_199)
    begin
        if (ap_sig_199) then 
            ap_sig_cseq_ST_st21_fsm_20 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st21_fsm_20 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st22_fsm_21_assign_proc : process(ap_sig_445)
    begin
        if (ap_sig_445) then 
            ap_sig_cseq_ST_st22_fsm_21 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st22_fsm_21 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st23_fsm_22_assign_proc : process(ap_sig_219)
    begin
        if (ap_sig_219) then 
            ap_sig_cseq_ST_st23_fsm_22 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st23_fsm_22 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st24_fsm_23_assign_proc : process(ap_sig_239)
    begin
        if (ap_sig_239) then 
            ap_sig_cseq_ST_st24_fsm_23 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st24_fsm_23 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st25_fsm_24_assign_proc : process(ap_sig_259)
    begin
        if (ap_sig_259) then 
            ap_sig_cseq_ST_st25_fsm_24 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st25_fsm_24 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st26_fsm_25_assign_proc : process(ap_sig_276)
    begin
        if (ap_sig_276) then 
            ap_sig_cseq_ST_st26_fsm_25 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st26_fsm_25 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st27_fsm_26_assign_proc : process(ap_sig_529)
    begin
        if (ap_sig_529) then 
            ap_sig_cseq_ST_st27_fsm_26 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st27_fsm_26 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st2_fsm_1_assign_proc : process(ap_sig_80)
    begin
        if (ap_sig_80) then 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st31_fsm_30_assign_proc : process(ap_sig_287)
    begin
        if (ap_sig_287) then 
            ap_sig_cseq_ST_st31_fsm_30 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st31_fsm_30 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st32_fsm_31_assign_proc : process(ap_sig_296)
    begin
        if (ap_sig_296) then 
            ap_sig_cseq_ST_st32_fsm_31 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st32_fsm_31 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st33_fsm_32_assign_proc : process(ap_sig_482)
    begin
        if (ap_sig_482) then 
            ap_sig_cseq_ST_st33_fsm_32 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st33_fsm_32 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st34_fsm_33_assign_proc : process(ap_sig_305)
    begin
        if (ap_sig_305) then 
            ap_sig_cseq_ST_st34_fsm_33 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st34_fsm_33 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st35_fsm_34_assign_proc : process(ap_sig_314)
    begin
        if (ap_sig_314) then 
            ap_sig_cseq_ST_st35_fsm_34 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st35_fsm_34 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st36_fsm_35_assign_proc : process(ap_sig_471)
    begin
        if (ap_sig_471) then 
            ap_sig_cseq_ST_st36_fsm_35 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st36_fsm_35 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st37_fsm_36_assign_proc : process(ap_sig_325)
    begin
        if (ap_sig_325) then 
            ap_sig_cseq_ST_st37_fsm_36 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st37_fsm_36 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st3_fsm_2_assign_proc : process(ap_sig_101)
    begin
        if (ap_sig_101) then 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st4_fsm_3_assign_proc : process(ap_sig_120)
    begin
        if (ap_sig_120) then 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st5_fsm_4_assign_proc : process(ap_sig_137)
    begin
        if (ap_sig_137) then 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st6_fsm_5_assign_proc : process(ap_sig_146)
    begin
        if (ap_sig_146) then 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_0;
        end if; 
    end process;


    distance_ce0_assign_proc : process(ap_sig_cseq_ST_st25_fsm_24, ap_sig_cseq_ST_st32_fsm_31, ap_sig_cseq_ST_st33_fsm_32)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st25_fsm_24) or (ap_const_logic_1 = ap_sig_cseq_ST_st32_fsm_31) or (ap_const_logic_1 = ap_sig_cseq_ST_st33_fsm_32))) then 
            distance_ce0 <= ap_const_logic_1;
        else 
            distance_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    distance_d0 <= std_logic_vector(unsigned(distance_q0) + unsigned(ap_const_lv32_1));

    distance_we0_assign_proc : process(tmp_6_reg_1372, ap_sig_cseq_ST_st33_fsm_32)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st33_fsm_32) and not((ap_const_lv1_0 = tmp_6_reg_1372))))) then 
            distance_we0 <= ap_const_logic_1;
        else 
            distance_we0 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond10_fu_533_p2 <= "1" when (j_reg_226 = ap_const_lv4_E) else "0";
    exitcond3_fu_800_p2 <= "1" when (j5_reg_456 = ap_const_lv4_E) else "0";
    exitcond4_fu_760_p2 <= "1" when (i4_reg_421 = ap_const_lv5_14) else "0";
    exitcond5_fu_697_p2 <= "1" when (k3_reg_364 = ap_const_lv6_31) else "0";
    exitcond6_fu_685_p2 <= "1" when (j2_reg_341 = ap_const_lv4_E) else "0";
    exitcond7_fu_663_p2 <= "1" when (i1_reg_318 = ap_const_lv5_14) else "0";
    exitcond8_fu_597_p2 <= "1" when (k_reg_296 = ap_const_lv6_31) else "0";
    exitcond9_fu_566_p2 <= "1" when (i_reg_273 = ap_const_lv5_14) else "0";
    exitcond_fu_828_p2 <= "1" when (k6_reg_478 = ap_const_lv6_31) else "0";

    group_ce0_assign_proc : process(ap_sig_cseq_ST_st24_fsm_23, ap_sig_cseq_ST_st36_fsm_35)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st24_fsm_23) or (ap_const_logic_1 = ap_sig_cseq_ST_st36_fsm_35))) then 
            group_ce0 <= ap_const_logic_1;
        else 
            group_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    group_d0 <= 
        p_Val2_i_i_fu_1074_p2 when (p_Result_20_reg_1380(0) = '1') else 
        p_Val2_28_reg_1385;
    group_one_1_fu_1112_p3 <= 
        group_one_s_reg_409 when (tmp_48_fu_1086_p2(0) = '1') else 
        group_one_fu_1098_p2;
    group_one_fu_1098_p2 <= std_logic_vector(unsigned(group_one_s_reg_409) + unsigned(ap_const_lv32_1));

    group_we0_assign_proc : process(tmp_54_reg_1376, ap_sig_cseq_ST_st36_fsm_35)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st36_fsm_35) and not((ap_const_lv1_0 = tmp_54_reg_1376))))) then 
            group_we0 <= ap_const_logic_1;
        else 
            group_we0 <= ap_const_logic_0;
        end if; 
    end process;

    group_zero_1_fu_1104_p3 <= 
        group_zero_fu_1092_p2 when (tmp_48_fu_1086_p2(0) = '1') else 
        group_zero_s_reg_397;
    group_zero_fu_1092_p2 <= std_logic_vector(unsigned(group_zero_s_reg_397) + unsigned(ap_const_lv32_1));
    grp_fu_504_p0 <= std_logic_vector(resize(unsigned(training_data_V_load_reg_1194),32));
    grp_fu_507_p0 <= std_logic_vector(resize(unsigned(tmp_fu_578_p4),32));
    i1_cast_cast_fu_659_p1 <= std_logic_vector(resize(unsigned(i1_reg_318),10));
    i_5_fu_669_p2 <= std_logic_vector(unsigned(i1_reg_318) + unsigned(ap_const_lv5_1));
    i_6_fu_572_p2 <= std_logic_vector(unsigned(i_reg_273) + unsigned(ap_const_lv5_1));
    i_7_fu_766_p2 <= std_logic_vector(unsigned(i4_reg_421) + unsigned(ap_const_lv5_1));
    i_cast_cast_fu_562_p1 <= std_logic_vector(resize(unsigned(i_reg_273),10));
    input_r_address0 <= tmp_71_cast_fu_850_p1(10 - 1 downto 0);

    input_r_ce0_assign_proc : process(ap_sig_cseq_ST_st25_fsm_24)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st25_fsm_24)) then 
            input_r_ce0 <= ap_const_logic_1;
        else 
            input_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    isNeg_fu_994_p3 <= sh_assign_fu_988_p2(8 downto 8);
    j2_cast_fu_681_p1 <= std_logic_vector(resize(unsigned(j2_reg_341),10));
    j5_cast6_fu_796_p1 <= std_logic_vector(resize(unsigned(j5_reg_456),10));
    j_6_fu_539_p2 <= std_logic_vector(unsigned(j_reg_226) + unsigned(ap_const_lv4_1));
    j_7_fu_691_p2 <= std_logic_vector(unsigned(j2_reg_341) + unsigned(ap_const_lv4_1));
    j_8_fu_806_p2 <= std_logic_vector(unsigned(j5_reg_456) + unsigned(ap_const_lv4_1));
    k_2_fu_603_p2 <= std_logic_vector(unsigned(k_reg_296) + unsigned(ap_const_lv6_1));
    k_3_fu_703_p2 <= std_logic_vector(unsigned(k3_reg_364) + unsigned(ap_const_lv6_1));
    k_4_fu_834_p2 <= std_logic_vector(unsigned(k6_reg_478) + unsigned(ap_const_lv6_1));
    k_cast1_fu_593_p1 <= std_logic_vector(resize(unsigned(k_reg_296),10));
    loc_V_2_fu_968_p1 <= p_Val2_25_fu_946_p1(23 - 1 downto 0);
    loc_V_fu_958_p4 <= p_Val2_25_fu_946_p1(30 downto 23);

    min_distance_ce0_assign_proc : process(ap_sig_cseq_ST_st25_fsm_24, ap_sig_cseq_ST_st34_fsm_33)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st25_fsm_24) or (ap_const_logic_1 = ap_sig_cseq_ST_st34_fsm_33))) then 
            min_distance_ce0 <= ap_const_logic_1;
        else 
            min_distance_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    min_distance_we0_assign_proc : process(tmp_54_fu_940_p2, ap_sig_cseq_ST_st34_fsm_33)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st34_fsm_33) and not((ap_const_lv1_0 = tmp_54_fu_940_p2))))) then 
            min_distance_we0 <= ap_const_logic_1;
        else 
            min_distance_we0 <= ap_const_logic_0;
        end if; 
    end process;

    next_mul10_fu_709_p2 <= std_logic_vector(unsigned(i1_cast_cast_reg_1219) + unsigned(phi_mul9_reg_375));
    next_mul11_fu_790_p2 <= std_logic_vector(unsigned(phi_mul12_reg_467) + unsigned(ap_const_lv14_3D5));
    next_mul12_fu_729_p2 <= std_logic_vector(unsigned(j2_cast_reg_1237) + unsigned(phi_mul11_reg_386));
    next_mul13_fu_855_p2 <= std_logic_vector(unsigned(phi_mul13_reg_489) + unsigned(j5_cast6_reg_1311));
    next_mul2_fu_556_p2 <= std_logic_vector(unsigned(phi_mul1_reg_284) + unsigned(ap_const_lv10_32));
    next_mul3_fu_653_p2 <= std_logic_vector(unsigned(phi_mul4_reg_329) + unsigned(ap_const_lv14_2AE));
    next_mul4_fu_527_p2 <= std_logic_vector(unsigned(phi_mul3_reg_237) + unsigned(ap_const_lv9_13));
    next_mul5_fu_748_p2 <= std_logic_vector(unsigned(phi_mul8_reg_444) + unsigned(ap_const_lv14_2AE));
    next_mul6_fu_521_p2 <= std_logic_vector(unsigned(phi_mul5_reg_249) + unsigned(ap_const_lv14_3E8));
    next_mul7_fu_754_p2 <= std_logic_vector(unsigned(phi_mul6_reg_432) + unsigned(ap_const_lv10_31));
    next_mul8_fu_515_p2 <= std_logic_vector(unsigned(phi_mul7_reg_261) + unsigned(ap_const_lv14_3D5));
    next_mul9_fu_675_p2 <= std_logic_vector(unsigned(phi_mul10_reg_352) + unsigned(ap_const_lv14_3D5));
    next_mul_fu_630_p2 <= std_logic_vector(unsigned(i_cast_cast_reg_1153) + unsigned(phi_mul_reg_307));
    notlhs_fu_909_p2 <= "0" when (tmp_3_fu_899_p4 = ap_const_lv8_FF) else "1";
    notrhs_fu_915_p2 <= "1" when (tmp_33_fu_882_p1 = ap_const_lv23_0) else "0";
    p_Result_21_fu_972_p3 <= (ap_const_lv1_1 & loc_V_2_fu_968_p1);
    p_Result_s_fu_886_p3 <= (ap_const_lv1_0 & tmp_32_fu_878_p1);
    p_Val2_25_fu_946_p1 <= training_data2_q0;
    p_Val2_28_fu_1066_p3 <= 
        tmp_57_fu_1052_p1 when (isNeg_fu_994_p3(0) = '1') else 
        tmp_58_fu_1056_p4;
    p_Val2_i_i_fu_1074_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(p_Val2_28_reg_1385));
    p_Val2_s_fu_875_p1 <= p_x_assign_reg_1367;
    rev_fu_784_p2 <= (slt_fu_778_p2 xor ap_const_lv1_1);
        sh_assign_1_cast_cast_fu_1024_p1 <= std_logic_vector(resize(signed(sh_assign_1_fu_1012_p3),24));

        sh_assign_1_cast_fu_1020_p1 <= std_logic_vector(resize(signed(sh_assign_1_fu_1012_p3),32));

    sh_assign_1_fu_1012_p3 <= 
        tmp_115_i_i_cast_fu_1008_p1 when (isNeg_fu_994_p3(0) = '1') else 
        sh_assign_fu_988_p2;
    sh_assign_fu_988_p2 <= std_logic_vector(signed(ap_const_lv9_181) + signed(tmp_i_i_i_cast2_fu_984_p1));
    slt_fu_778_p2 <= "1" when (signed(group_one_s_reg_409) < signed(group_zero_s_reg_397)) else "0";
    tmp1_cast_fu_615_p1 <= std_logic_vector(resize(unsigned(tmp1_fu_609_p2),14));
    tmp1_fu_609_p2 <= std_logic_vector(unsigned(k_cast1_fu_593_p1) + unsigned(phi_mul1_reg_284));
        tmp_115_i_i_cast_fu_1008_p1 <= std_logic_vector(resize(signed(tmp_115_i_i_fu_1002_p2),9));

    tmp_115_i_i_fu_1002_p2 <= std_logic_vector(unsigned(ap_const_lv8_7F) - unsigned(loc_V_fu_958_p4));
    tmp_116_i_i_fu_1028_p1 <= std_logic_vector(resize(unsigned(sh_assign_1_cast_fu_1020_p1),78));
    tmp_117_i_i_fu_1032_p2 <= std_logic_vector(shift_right(unsigned(p_Result_21_fu_972_p3),to_integer(unsigned('0' & sh_assign_1_cast_cast_fu_1024_p1(24-1 downto 0)))));
    tmp_119_i_i_fu_1038_p2 <= std_logic_vector(shift_left(unsigned(tmp_i_i_fu_980_p1),to_integer(unsigned('0' & tmp_116_i_i_fu_1028_p1(31-1 downto 0)))));
    tmp_32_fu_878_p1 <= p_Val2_s_fu_875_p1(31 - 1 downto 0);
    tmp_33_fu_882_p1 <= p_Val2_s_fu_875_p1(23 - 1 downto 0);
    tmp_37_fu_1044_p3 <= tmp_117_i_i_fu_1032_p2(23 downto 23);
    tmp_3_fu_899_p4 <= p_Val2_s_fu_875_p1(30 downto 23);
    tmp_42_fu_772_p1 <= std_logic_vector(resize(unsigned(i4_reg_421),64));
    tmp_44_fu_619_p2 <= std_logic_vector(unsigned(phi_mul5_reg_249) + unsigned(tmp1_cast_fu_615_p1));
    tmp_45_fu_625_p1 <= std_logic_vector(resize(unsigned(tmp_44_fu_619_p2),64));
    tmp_47_fu_718_p2 <= std_logic_vector(unsigned(phi_mul10_reg_352) + unsigned(tmp_52_cast_fu_714_p1));
    tmp_48_fu_1086_p2 <= "1" when (group_q0 = ap_const_lv32_0) else "0";
    tmp_49_fu_812_p1 <= std_logic_vector(resize(unsigned(j5_reg_456),64));
    tmp_4_fu_921_p2 <= (notrhs_fu_915_p2 or notlhs_fu_909_p2);
    tmp_50_cast_fu_635_p1 <= std_logic_vector(resize(unsigned(phi_mul_reg_307),14));
    tmp_50_fu_738_p2 <= std_logic_vector(unsigned(phi_mul4_reg_329) + unsigned(tmp_54_cast_fu_734_p1));
    tmp_52_cast_fu_714_p1 <= std_logic_vector(resize(unsigned(phi_mul9_reg_375),14));
    tmp_52_fu_639_p2 <= std_logic_vector(unsigned(phi_mul7_reg_261) + unsigned(tmp_50_cast_fu_635_p1));
    tmp_53_fu_817_p2 <= std_logic_vector(unsigned(phi_mul12_reg_467) + unsigned(ap_const_lv14_3D4));
    tmp_54_cast_fu_734_p1 <= std_logic_vector(resize(unsigned(phi_mul11_reg_386),14));
    tmp_54_fu_940_p2 <= "1" when (signed(distance_q0) < signed(min_distance_q0)) else "0";
    tmp_55_fu_844_p2 <= std_logic_vector(unsigned(tmp_56_cast_fu_840_p1) + unsigned(phi_mul6_reg_432));
    tmp_56_cast_fu_840_p1 <= std_logic_vector(resize(unsigned(k6_reg_478),10));
    tmp_56_fu_864_p2 <= std_logic_vector(unsigned(tmp_58_cast_fu_860_p1) + unsigned(phi_mul8_reg_444));
    tmp_57_fu_1052_p1 <= std_logic_vector(resize(unsigned(tmp_37_fu_1044_p3),32));
    tmp_58_cast_fu_860_p1 <= std_logic_vector(resize(unsigned(phi_mul13_reg_489),14));
    tmp_58_fu_1056_p4 <= tmp_119_i_i_fu_1038_p2(54 downto 23);
    tmp_5_fu_510_p0 <= p_Result_s_fu_886_p3;
    tmp_61_cast_fu_551_p1 <= std_logic_vector(resize(unsigned(tmp_s_fu_545_p2),64));
    tmp_66_cast_fu_649_p1 <= std_logic_vector(resize(unsigned(tmp_52_reg_1189),64));
    tmp_68_cast_fu_823_p1 <= std_logic_vector(resize(unsigned(tmp_53_fu_817_p2),64));
    tmp_69_cast_fu_724_p1 <= std_logic_vector(resize(unsigned(tmp_47_fu_718_p2),64));
    tmp_6_fu_927_p2 <= (tmp_4_fu_921_p2 and tmp_5_fu_510_p2);
    tmp_70_cast_fu_744_p1 <= std_logic_vector(resize(unsigned(tmp_50_reg_1273),64));
    tmp_71_cast_fu_850_p1 <= std_logic_vector(resize(unsigned(tmp_55_fu_844_p2),64));
    tmp_72_cast_fu_870_p1 <= std_logic_vector(resize(unsigned(tmp_56_fu_864_p2),64));
    tmp_fu_578_p4 <= phi_mul3_reg_237(8 downto 7);
    tmp_i_i_fu_980_p1 <= std_logic_vector(resize(unsigned(p_Result_21_fu_972_p3),78));
    tmp_i_i_i_cast2_fu_984_p1 <= std_logic_vector(resize(unsigned(loc_V_fu_958_p4),9));
    tmp_s_fu_545_p2 <= std_logic_vector(unsigned(phi_mul7_reg_261) + unsigned(ap_const_lv14_3D4));

    training_data2_address0_assign_proc : process(training_data2_addr_reg_1143, ap_sig_cseq_ST_st21_fsm_20, training_data2_addr_3_reg_1324, ap_sig_cseq_ST_st34_fsm_33, ap_sig_cseq_ST_st18_fsm_17, ap_sig_cseq_ST_st12_fsm_11, tmp_66_cast_fu_649_p1, tmp_69_cast_fu_724_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st18_fsm_17)) then 
            training_data2_address0 <= training_data2_addr_reg_1143;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_11)) then 
            training_data2_address0 <= tmp_66_cast_fu_649_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st34_fsm_33)) then 
            training_data2_address0 <= training_data2_addr_3_reg_1324;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st21_fsm_20)) then 
            training_data2_address0 <= tmp_69_cast_fu_724_p1(14 - 1 downto 0);
        else 
            training_data2_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    training_data2_ce0_assign_proc : process(ap_sig_cseq_ST_st21_fsm_20, ap_sig_cseq_ST_st34_fsm_33, ap_sig_cseq_ST_st18_fsm_17, ap_sig_cseq_ST_st12_fsm_11)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st21_fsm_20) or (ap_const_logic_1 = ap_sig_cseq_ST_st34_fsm_33) or (ap_const_logic_1 = ap_sig_cseq_ST_st18_fsm_17) or (ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_11))) then 
            training_data2_ce0 <= ap_const_logic_1;
        else 
            training_data2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    training_data2_d0_assign_proc : process(tmp_46_reg_1204, tmp_40_reg_1209, ap_sig_cseq_ST_st18_fsm_17, ap_sig_cseq_ST_st12_fsm_11)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st18_fsm_17)) then 
            training_data2_d0 <= tmp_40_reg_1209;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_11)) then 
            training_data2_d0 <= tmp_46_reg_1204;
        else 
            training_data2_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    training_data2_we0_assign_proc : process(ap_sig_cseq_ST_st18_fsm_17, ap_sig_cseq_ST_st12_fsm_11)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st18_fsm_17) or (ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_11))) then 
            training_data2_we0 <= ap_const_logic_1;
        else 
            training_data2_we0 <= ap_const_logic_0;
        end if; 
    end process;

    training_data_V_address0 <= tmp_45_fu_625_p1(14 - 1 downto 0);

    training_data_V_ce0_assign_proc : process(ap_sig_cseq_ST_st4_fsm_3)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            training_data_V_ce0 <= ap_const_logic_1;
        else 
            training_data_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    training_instance_address0_assign_proc : process(ap_sig_cseq_ST_st25_fsm_24, ap_sig_cseq_ST_st22_fsm_21, tmp_70_cast_fu_744_p1, tmp_72_cast_fu_870_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st22_fsm_21)) then 
            training_instance_address0 <= tmp_70_cast_fu_744_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st25_fsm_24)) then 
            training_instance_address0 <= tmp_72_cast_fu_870_p1(14 - 1 downto 0);
        else 
            training_instance_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    training_instance_ce0_assign_proc : process(ap_sig_cseq_ST_st25_fsm_24, ap_sig_cseq_ST_st22_fsm_21)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st25_fsm_24) or (ap_const_logic_1 = ap_sig_cseq_ST_st22_fsm_21))) then 
            training_instance_ce0 <= ap_const_logic_1;
        else 
            training_instance_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    training_instance_we0_assign_proc : process(ap_sig_cseq_ST_st22_fsm_21)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st22_fsm_21))) then 
            training_instance_we0 <= ap_const_logic_1;
        else 
            training_instance_we0 <= ap_const_logic_0;
        end if; 
    end process;

end behav;
