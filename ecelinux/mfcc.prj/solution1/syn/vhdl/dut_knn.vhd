-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.2
-- Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity dut_knn is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_r_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    input_r_ce0 : OUT STD_LOGIC;
    input_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of dut_knn is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000000000000001";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000000000000010";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000000000000100";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000000000001000";
    constant ap_ST_st5_fsm_4 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000000000010000";
    constant ap_ST_st6_fsm_5 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000000000100000";
    constant ap_ST_st7_fsm_6 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000000001000000";
    constant ap_ST_st8_fsm_7 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000000010000000";
    constant ap_ST_st9_fsm_8 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000000100000000";
    constant ap_ST_st10_fsm_9 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000001000000000";
    constant ap_ST_st11_fsm_10 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000010000000000";
    constant ap_ST_st12_fsm_11 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000100000000000";
    constant ap_ST_st13_fsm_12 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000001000000000000";
    constant ap_ST_st14_fsm_13 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000010000000000000";
    constant ap_ST_st15_fsm_14 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000100000000000000";
    constant ap_ST_st16_fsm_15 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000001000000000000000";
    constant ap_ST_st17_fsm_16 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000010000000000000000";
    constant ap_ST_st18_fsm_17 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000100000000000000000";
    constant ap_ST_st19_fsm_18 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000001000000000000000000";
    constant ap_ST_st20_fsm_19 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000010000000000000000000";
    constant ap_ST_st21_fsm_20 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000100000000000000000000";
    constant ap_ST_st22_fsm_21 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000001000000000000000000000";
    constant ap_ST_st23_fsm_22 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000010000000000000000000000";
    constant ap_ST_st24_fsm_23 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000100000000000000000000000";
    constant ap_ST_st25_fsm_24 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000001000000000000000000000000";
    constant ap_ST_st26_fsm_25 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000010000000000000000000000000";
    constant ap_ST_st27_fsm_26 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000100000000000000000000000000";
    constant ap_ST_st28_fsm_27 : STD_LOGIC_VECTOR (38 downto 0) := "000000000001000000000000000000000000000";
    constant ap_ST_st29_fsm_28 : STD_LOGIC_VECTOR (38 downto 0) := "000000000010000000000000000000000000000";
    constant ap_ST_st30_fsm_29 : STD_LOGIC_VECTOR (38 downto 0) := "000000000100000000000000000000000000000";
    constant ap_ST_st31_fsm_30 : STD_LOGIC_VECTOR (38 downto 0) := "000000001000000000000000000000000000000";
    constant ap_ST_st32_fsm_31 : STD_LOGIC_VECTOR (38 downto 0) := "000000010000000000000000000000000000000";
    constant ap_ST_st33_fsm_32 : STD_LOGIC_VECTOR (38 downto 0) := "000000100000000000000000000000000000000";
    constant ap_ST_st34_fsm_33 : STD_LOGIC_VECTOR (38 downto 0) := "000001000000000000000000000000000000000";
    constant ap_ST_st35_fsm_34 : STD_LOGIC_VECTOR (38 downto 0) := "000010000000000000000000000000000000000";
    constant ap_ST_st36_fsm_35 : STD_LOGIC_VECTOR (38 downto 0) := "000100000000000000000000000000000000000";
    constant ap_ST_st37_fsm_36 : STD_LOGIC_VECTOR (38 downto 0) := "001000000000000000000000000000000000000";
    constant ap_ST_st38_fsm_37 : STD_LOGIC_VECTOR (38 downto 0) := "010000000000000000000000000000000000000";
    constant ap_ST_st39_fsm_38 : STD_LOGIC_VECTOR (38 downto 0) := "100000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv14_0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_31 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110001";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_3F666666 : STD_LOGIC_VECTOR (31 downto 0) := "00111111011001100110011001100110";
    constant ap_const_lv5_14 : STD_LOGIC_VECTOR (4 downto 0) := "10100";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv4_E : STD_LOGIC_VECTOR (3 downto 0) := "1110";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv14_3D5 : STD_LOGIC_VECTOR (13 downto 0) := "00001111010101";
    constant ap_const_lv14_3E8 : STD_LOGIC_VECTOR (13 downto 0) := "00001111101000";
    constant ap_const_lv9_13 : STD_LOGIC_VECTOR (8 downto 0) := "000010011";
    constant ap_const_lv14_3D4 : STD_LOGIC_VECTOR (13 downto 0) := "00001111010100";
    constant ap_const_lv10_32 : STD_LOGIC_VECTOR (9 downto 0) := "0000110010";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv6_31 : STD_LOGIC_VECTOR (5 downto 0) := "110001";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv14_2AE : STD_LOGIC_VECTOR (13 downto 0) := "00001010101110";
    constant ap_const_lv10_31 : STD_LOGIC_VECTOR (9 downto 0) := "0000110001";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv9_181 : STD_LOGIC_VECTOR (8 downto 0) := "110000001";
    constant ap_const_lv8_7F : STD_LOGIC_VECTOR (7 downto 0) := "01111111";
    constant ap_const_lv32_36 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110110";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_56 : BOOLEAN;
    signal training_data_V_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal training_data_V_ce0 : STD_LOGIC;
    signal training_data_V_q0 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_1_fu_567_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_sig_cseq_ST_st2_fsm_1 : STD_LOGIC;
    signal ap_sig_82 : BOOLEAN;
    signal i_2_fu_585_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_sig_cseq_ST_st3_fsm_2 : STD_LOGIC;
    signal ap_sig_91 : BOOLEAN;
    signal next_mul8_fu_596_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal next_mul8_reg_1217 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_sig_cseq_ST_st4_fsm_3 : STD_LOGIC;
    signal ap_sig_100 : BOOLEAN;
    signal next_mul6_fu_602_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal next_mul6_reg_1222 : STD_LOGIC_VECTOR (13 downto 0);
    signal next_mul4_fu_608_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal next_mul4_reg_1227 : STD_LOGIC_VECTOR (8 downto 0);
    signal j_2_fu_620_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_2_reg_1235 : STD_LOGIC_VECTOR (3 downto 0);
    signal training_data2_addr_reg_1240 : STD_LOGIC_VECTOR (13 downto 0);
    signal exitcond8_fu_614_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal next_mul2_fu_637_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal next_mul2_reg_1245 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_sig_cseq_ST_st5_fsm_4 : STD_LOGIC;
    signal ap_sig_121 : BOOLEAN;
    signal i2_cast_cast_fu_643_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal i2_cast_cast_reg_1250 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_4_fu_653_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_4_reg_1258 : STD_LOGIC_VECTOR (4 downto 0);
    signal exitcond7_fu_647_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal k_2_fu_684_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal k_2_reg_1271 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_sig_cseq_ST_st6_fsm_5 : STD_LOGIC;
    signal ap_sig_140 : BOOLEAN;
    signal exitcond6_fu_678_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal next_mul_fu_711_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal next_mul_reg_1281 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_24_fu_720_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_24_reg_1286 : STD_LOGIC_VECTOR (13 downto 0);
    signal training_data_V_load_reg_1291 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_sig_cseq_ST_st7_fsm_6 : STD_LOGIC;
    signal ap_sig_157 : BOOLEAN;
    signal ap_sig_cseq_ST_st8_fsm_7 : STD_LOGIC;
    signal ap_sig_166 : BOOLEAN;
    signal grp_fu_550_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_23_reg_1301 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st13_fsm_12 : STD_LOGIC;
    signal ap_sig_175 : BOOLEAN;
    signal grp_fu_553_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_17_reg_1306 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st19_fsm_18 : STD_LOGIC;
    signal ap_sig_184 : BOOLEAN;
    signal next_mul1_fu_734_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal next_mul1_reg_1311 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_sig_cseq_ST_st21_fsm_20 : STD_LOGIC;
    signal ap_sig_193 : BOOLEAN;
    signal i3_cast_cast_fu_740_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal i3_cast_cast_reg_1316 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_3_fu_750_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_3_reg_1324 : STD_LOGIC_VECTOR (4 downto 0);
    signal next_mul7_fu_756_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal next_mul7_reg_1329 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_sig_cseq_ST_st22_fsm_21 : STD_LOGIC;
    signal ap_sig_206 : BOOLEAN;
    signal j4_cast_fu_762_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal j4_cast_reg_1334 : STD_LOGIC_VECTOR (9 downto 0);
    signal j_3_fu_772_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_3_reg_1342 : STD_LOGIC_VECTOR (3 downto 0);
    signal k_3_fu_784_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal k_3_reg_1350 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_sig_cseq_ST_st23_fsm_22 : STD_LOGIC;
    signal ap_sig_219 : BOOLEAN;
    signal next_mul10_fu_790_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal next_mul10_reg_1355 : STD_LOGIC_VECTOR (9 downto 0);
    signal exitcond3_fu_778_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal next_mul11_fu_810_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal next_mul11_reg_1365 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_19_fu_819_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_19_reg_1370 : STD_LOGIC_VECTOR (13 downto 0);
    signal next_mul3_fu_829_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal next_mul3_reg_1375 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_sig_cseq_ST_st25_fsm_24 : STD_LOGIC;
    signal ap_sig_239 : BOOLEAN;
    signal next_mul5_fu_835_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal next_mul5_reg_1380 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_5_fu_847_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_5_reg_1388 : STD_LOGIC_VECTOR (4 downto 0);
    signal min_distance_addr_1_reg_1393 : STD_LOGIC_VECTOR (4 downto 0);
    signal exitcond2_fu_841_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal group_addr_1_reg_1398 : STD_LOGIC_VECTOR (4 downto 0);
    signal next_mul9_fu_871_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal next_mul9_reg_1403 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_sig_cseq_ST_st26_fsm_25 : STD_LOGIC;
    signal ap_sig_259 : BOOLEAN;
    signal j7_cast6_fu_877_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal j7_cast6_reg_1408 : STD_LOGIC_VECTOR (9 downto 0);
    signal j_4_fu_887_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_4_reg_1416 : STD_LOGIC_VECTOR (3 downto 0);
    signal training_data2_addr_3_reg_1421 : STD_LOGIC_VECTOR (13 downto 0);
    signal exitcond1_fu_881_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal distance_addr_1_reg_1426 : STD_LOGIC_VECTOR (3 downto 0);
    signal k_4_fu_915_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal k_4_reg_1434 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_sig_cseq_ST_st27_fsm_26 : STD_LOGIC;
    signal ap_sig_279 : BOOLEAN;
    signal exitcond_fu_909_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal next_mul12_fu_936_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal next_mul12_reg_1444 : STD_LOGIC_VECTOR (9 downto 0);
    signal input_load_reg_1454 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st28_fsm_27 : STD_LOGIC;
    signal ap_sig_296 : BOOLEAN;
    signal training_instance_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal training_instance_load_reg_1459 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_546_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_assign_reg_1464 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st33_fsm_32 : STD_LOGIC;
    signal ap_sig_307 : BOOLEAN;
    signal tmp_6_fu_1008_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_reg_1469 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_st34_fsm_33 : STD_LOGIC;
    signal ap_sig_316 : BOOLEAN;
    signal tmp_28_fu_1021_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_28_reg_1473 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_st36_fsm_35 : STD_LOGIC;
    signal ap_sig_325 : BOOLEAN;
    signal p_Result_1_reg_1477 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_st37_fsm_36 : STD_LOGIC;
    signal ap_sig_334 : BOOLEAN;
    signal p_Val2_4_fu_1147_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_4_reg_1482 : STD_LOGIC_VECTOR (31 downto 0);
    signal group_zero_1_fu_1185_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st39_fsm_38 : STD_LOGIC;
    signal ap_sig_345 : BOOLEAN;
    signal group_one_1_fu_1193_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal training_data2_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal training_data2_ce0 : STD_LOGIC;
    signal training_data2_we0 : STD_LOGIC;
    signal training_data2_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal training_data2_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal training_instance_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal training_instance_ce0 : STD_LOGIC;
    signal training_instance_we0 : STD_LOGIC;
    signal min_distance_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal min_distance_ce0 : STD_LOGIC;
    signal min_distance_we0 : STD_LOGIC;
    signal min_distance_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal min_distance_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal group_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal group_ce0 : STD_LOGIC;
    signal group_we0 : STD_LOGIC;
    signal group_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal group_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal distance_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal distance_ce0 : STD_LOGIC;
    signal distance_we0 : STD_LOGIC;
    signal distance_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal distance_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_reg_250 : STD_LOGIC_VECTOR (4 downto 0);
    signal exitcond10_fu_561_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i1_reg_261 : STD_LOGIC_VECTOR (3 downto 0);
    signal exitcond9_fu_579_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_reg_272 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_sig_cseq_ST_st20_fsm_19 : STD_LOGIC;
    signal ap_sig_421 : BOOLEAN;
    signal phi_mul3_reg_283 : STD_LOGIC_VECTOR (8 downto 0);
    signal phi_mul5_reg_295 : STD_LOGIC_VECTOR (13 downto 0);
    signal phi_mul7_reg_307 : STD_LOGIC_VECTOR (13 downto 0);
    signal i2_reg_319 : STD_LOGIC_VECTOR (4 downto 0);
    signal phi_mul1_reg_330 : STD_LOGIC_VECTOR (9 downto 0);
    signal k_reg_342 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_sig_cseq_ST_st14_fsm_13 : STD_LOGIC;
    signal ap_sig_447 : BOOLEAN;
    signal phi_mul_reg_353 : STD_LOGIC_VECTOR (9 downto 0);
    signal i3_reg_364 : STD_LOGIC_VECTOR (4 downto 0);
    signal exitcond4_fu_766_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal phi_mul2_reg_375 : STD_LOGIC_VECTOR (13 downto 0);
    signal j4_reg_387 : STD_LOGIC_VECTOR (3 downto 0);
    signal exitcond5_fu_744_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal phi_mul8_reg_398 : STD_LOGIC_VECTOR (13 downto 0);
    signal k5_reg_410 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_sig_cseq_ST_st24_fsm_23 : STD_LOGIC;
    signal ap_sig_479 : BOOLEAN;
    signal phi_mul9_reg_421 : STD_LOGIC_VECTOR (9 downto 0);
    signal phi_mul10_reg_432 : STD_LOGIC_VECTOR (9 downto 0);
    signal group_zero_reg_443 : STD_LOGIC_VECTOR (31 downto 0);
    signal group_one_reg_455 : STD_LOGIC_VECTOR (31 downto 0);
    signal i6_reg_467 : STD_LOGIC_VECTOR (4 downto 0);
    signal phi_mul4_reg_478 : STD_LOGIC_VECTOR (9 downto 0);
    signal phi_mul6_reg_490 : STD_LOGIC_VECTOR (13 downto 0);
    signal j7_reg_502 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_sig_cseq_ST_st38_fsm_37 : STD_LOGIC;
    signal ap_sig_505 : BOOLEAN;
    signal phi_mul11_reg_513 : STD_LOGIC_VECTOR (13 downto 0);
    signal k8_reg_524 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_sig_cseq_ST_st35_fsm_34 : STD_LOGIC;
    signal ap_sig_516 : BOOLEAN;
    signal phi_mul12_reg_535 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_fu_573_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_fu_591_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_38_cast_fu_632_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_21_fu_706_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_43_cast_fu_730_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_46_cast_fu_805_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_47_cast_fu_825_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_15_fu_853_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_45_cast_fu_904_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_26_fu_893_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_48_cast_fu_931_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_49_cast_fu_951_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Val2_6_fu_1160_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_33_fu_1014_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st29_fsm_28 : STD_LOGIC;
    signal ap_sig_575 : BOOLEAN;
    signal grp_fu_550_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_553_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_fu_556_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_fu_626_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_1_fu_659_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal k_cast1_fu_674_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp1_fu_690_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp1_cast_fu_696_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_20_fu_700_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_25_cast_fu_716_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_29_cast_fu_795_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_18_fu_799_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_31_cast_fu_815_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal slt_fu_859_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_27_fu_898_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_33_cast_fu_921_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_29_fu_925_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_35_cast_fu_941_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_30_fu_945_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_Val2_s_fu_956_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_fu_959_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal p_Result_s_fu_967_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_fu_980_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_7_fu_963_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs_fu_996_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs_fu_990_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_fu_1002_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_fu_556_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_1_fu_1027_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal loc_V_1_fu_1049_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal p_Result_2_fu_1053_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal loc_V_fu_1039_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_i_i_i_cast2_fu_1065_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sh_assign_fu_1069_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_45_i_i_fu_1083_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal isNeg_fu_1075_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_45_i_i_cast_fu_1089_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sh_assign_1_fu_1093_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal sh_assign_1_cast_fu_1101_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sh_assign_1_cast_cast_fu_1105_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_i_i_fu_1061_p1 : STD_LOGIC_VECTOR (77 downto 0);
    signal tmp_46_i_i_fu_1109_p1 : STD_LOGIC_VECTOR (77 downto 0);
    signal tmp_47_i_i_fu_1113_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_11_fu_1125_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_49_i_i_fu_1119_p2 : STD_LOGIC_VECTOR (77 downto 0);
    signal tmp_31_fu_1133_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_32_fu_1137_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_7_i_i_fu_1155_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_25_fu_1167_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal group_zero_2_fu_1173_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal group_one_2_fu_1179_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal rev_fu_865_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_return_preg : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (38 downto 0);

    component dut_fsub_32ns_32ns_32_5_full_dsp IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component dut_uitofp_32ns_32_6 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component dut_sitofp_32ns_32_6 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component dut_fcmp_32ns_32ns_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component dut_knn_training_data_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (13 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (5 downto 0) );
    end component;


    component dut_knn_training_data2 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (13 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component dut_knn_training_instance IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (13 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component dut_knn_min_distance IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component dut_knn_distance IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    training_data_V_U : component dut_knn_training_data_V
    generic map (
        DataWidth => 6,
        AddressRange => 14000,
        AddressWidth => 14)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => training_data_V_address0,
        ce0 => training_data_V_ce0,
        q0 => training_data_V_q0);

    training_data2_U : component dut_knn_training_data2
    generic map (
        DataWidth => 32,
        AddressRange => 13734,
        AddressWidth => 14)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => training_data2_address0,
        ce0 => training_data2_ce0,
        we0 => training_data2_we0,
        d0 => training_data2_d0,
        q0 => training_data2_q0);

    training_instance_U : component dut_knn_training_instance
    generic map (
        DataWidth => 32,
        AddressRange => 13720,
        AddressWidth => 14)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => training_instance_address0,
        ce0 => training_instance_ce0,
        we0 => training_instance_we0,
        d0 => training_data2_q0,
        q0 => training_instance_q0);

    min_distance_U : component dut_knn_min_distance
    generic map (
        DataWidth => 32,
        AddressRange => 20,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => min_distance_address0,
        ce0 => min_distance_ce0,
        we0 => min_distance_we0,
        d0 => min_distance_d0,
        q0 => min_distance_q0);

    group_U : component dut_knn_min_distance
    generic map (
        DataWidth => 32,
        AddressRange => 20,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => group_address0,
        ce0 => group_ce0,
        we0 => group_we0,
        d0 => group_d0,
        q0 => group_q0);

    distance_U : component dut_knn_distance
    generic map (
        DataWidth => 32,
        AddressRange => 14,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => distance_address0,
        ce0 => distance_ce0,
        we0 => distance_we0,
        d0 => distance_d0,
        q0 => distance_q0);

    dut_fsub_32ns_32ns_32_5_full_dsp_U1 : component dut_fsub_32ns_32ns_32_5_full_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => input_load_reg_1454,
        din1 => training_instance_load_reg_1459,
        ce => ap_const_logic_1,
        dout => grp_fu_546_p2);

    dut_uitofp_32ns_32_6_U2 : component dut_uitofp_32ns_32_6
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_550_p0,
        ce => ap_const_logic_1,
        dout => grp_fu_550_p1);

    dut_sitofp_32ns_32_6_U3 : component dut_sitofp_32ns_32_6
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_553_p0,
        ce => ap_const_logic_1,
        dout => grp_fu_553_p1);

    dut_fcmp_32ns_32ns_1_1_U4 : component dut_fcmp_32ns_32ns_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        din0 => tmp_5_fu_556_p0,
        din1 => ap_const_lv32_3F666666,
        opcode => ap_const_lv5_4,
        dout => tmp_5_fu_556_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_return_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_preg <= ap_const_lv1_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_st25_fsm_24) and not((ap_const_lv1_0 = exitcond2_fu_841_p2)))) then 
                    ap_return_preg <= rev_fu_865_p2;
                end if; 
            end if;
        end if;
    end process;


    group_one_reg_455_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st21_fsm_20) and not((ap_const_lv1_0 = exitcond5_fu_744_p2)))) then 
                group_one_reg_455 <= ap_const_lv32_0;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st39_fsm_38)) then 
                group_one_reg_455 <= group_one_1_fu_1193_p3;
            end if; 
        end if;
    end process;

    group_zero_reg_443_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st21_fsm_20) and not((ap_const_lv1_0 = exitcond5_fu_744_p2)))) then 
                group_zero_reg_443 <= ap_const_lv32_0;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st39_fsm_38)) then 
                group_zero_reg_443 <= group_zero_1_fu_1185_p3;
            end if; 
        end if;
    end process;

    i1_reg_261_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((ap_const_lv1_0 = exitcond10_fu_561_p2)))) then 
                i1_reg_261 <= ap_const_lv4_0;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and (ap_const_lv1_0 = exitcond9_fu_579_p2))) then 
                i1_reg_261 <= i_2_fu_585_p2;
            end if; 
        end if;
    end process;

    i2_reg_319_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5) and not((ap_const_lv1_0 = exitcond6_fu_678_p2)))) then 
                i2_reg_319 <= i_4_reg_1258;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and (exitcond8_fu_614_p2 = ap_const_lv1_0))) then 
                i2_reg_319 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    i3_reg_364_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st22_fsm_21) and not((ap_const_lv1_0 = exitcond4_fu_766_p2)))) then 
                i3_reg_364 <= i_3_reg_1324;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and not((exitcond8_fu_614_p2 = ap_const_lv1_0)))) then 
                i3_reg_364 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    i6_reg_467_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st21_fsm_20) and not((ap_const_lv1_0 = exitcond5_fu_744_p2)))) then 
                i6_reg_467 <= ap_const_lv5_0;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st39_fsm_38)) then 
                i6_reg_467 <= i_5_reg_1388;
            end if; 
        end if;
    end process;

    i_reg_250_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (ap_const_lv1_0 = exitcond10_fu_561_p2))) then 
                i_reg_250 <= i_1_fu_567_p2;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                i_reg_250 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    j4_reg_387_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st23_fsm_22) and not((ap_const_lv1_0 = exitcond3_fu_778_p2)))) then 
                j4_reg_387 <= j_3_reg_1342;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st21_fsm_20) and (ap_const_lv1_0 = exitcond5_fu_744_p2))) then 
                j4_reg_387 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    j7_reg_502_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st25_fsm_24) and (ap_const_lv1_0 = exitcond2_fu_841_p2))) then 
                j7_reg_502 <= ap_const_lv4_0;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st38_fsm_37)) then 
                j7_reg_502 <= j_4_reg_1416;
            end if; 
        end if;
    end process;

    j_reg_272_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and not((ap_const_lv1_0 = exitcond9_fu_579_p2)))) then 
                j_reg_272 <= ap_const_lv4_0;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st20_fsm_19)) then 
                j_reg_272 <= j_2_reg_1235;
            end if; 
        end if;
    end process;

    k5_reg_410_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st22_fsm_21) and (ap_const_lv1_0 = exitcond4_fu_766_p2))) then 
                k5_reg_410 <= ap_const_lv6_0;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st24_fsm_23)) then 
                k5_reg_410 <= k_3_reg_1350;
            end if; 
        end if;
    end process;

    k8_reg_524_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st26_fsm_25) and (ap_const_lv1_0 = exitcond1_fu_881_p2))) then 
                k8_reg_524 <= ap_const_lv6_0;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st35_fsm_34)) then 
                k8_reg_524 <= k_4_reg_1434;
            end if; 
        end if;
    end process;

    k_reg_342_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) and (ap_const_lv1_0 = exitcond7_fu_647_p2))) then 
                k_reg_342 <= ap_const_lv6_0;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st14_fsm_13)) then 
                k_reg_342 <= k_2_reg_1271;
            end if; 
        end if;
    end process;

    phi_mul10_reg_432_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st22_fsm_21) and (ap_const_lv1_0 = exitcond4_fu_766_p2))) then 
                phi_mul10_reg_432 <= ap_const_lv10_0;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st24_fsm_23)) then 
                phi_mul10_reg_432 <= next_mul11_reg_1365;
            end if; 
        end if;
    end process;

    phi_mul11_reg_513_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st25_fsm_24) and (ap_const_lv1_0 = exitcond2_fu_841_p2))) then 
                phi_mul11_reg_513 <= ap_const_lv14_0;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st38_fsm_37)) then 
                phi_mul11_reg_513 <= next_mul9_reg_1403;
            end if; 
        end if;
    end process;

    phi_mul12_reg_535_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st26_fsm_25) and (ap_const_lv1_0 = exitcond1_fu_881_p2))) then 
                phi_mul12_reg_535 <= ap_const_lv10_0;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st35_fsm_34)) then 
                phi_mul12_reg_535 <= next_mul12_reg_1444;
            end if; 
        end if;
    end process;

    phi_mul1_reg_330_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5) and not((ap_const_lv1_0 = exitcond6_fu_678_p2)))) then 
                phi_mul1_reg_330 <= next_mul2_reg_1245;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and (exitcond8_fu_614_p2 = ap_const_lv1_0))) then 
                phi_mul1_reg_330 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    phi_mul2_reg_375_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st22_fsm_21) and not((ap_const_lv1_0 = exitcond4_fu_766_p2)))) then 
                phi_mul2_reg_375 <= next_mul1_reg_1311;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and not((exitcond8_fu_614_p2 = ap_const_lv1_0)))) then 
                phi_mul2_reg_375 <= ap_const_lv14_0;
            end if; 
        end if;
    end process;

    phi_mul3_reg_283_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and not((ap_const_lv1_0 = exitcond9_fu_579_p2)))) then 
                phi_mul3_reg_283 <= ap_const_lv9_0;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st20_fsm_19)) then 
                phi_mul3_reg_283 <= next_mul4_reg_1227;
            end if; 
        end if;
    end process;

    phi_mul4_reg_478_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st21_fsm_20) and not((ap_const_lv1_0 = exitcond5_fu_744_p2)))) then 
                phi_mul4_reg_478 <= ap_const_lv10_0;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st39_fsm_38)) then 
                phi_mul4_reg_478 <= next_mul5_reg_1380;
            end if; 
        end if;
    end process;

    phi_mul5_reg_295_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and not((ap_const_lv1_0 = exitcond9_fu_579_p2)))) then 
                phi_mul5_reg_295 <= ap_const_lv14_0;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st20_fsm_19)) then 
                phi_mul5_reg_295 <= next_mul6_reg_1222;
            end if; 
        end if;
    end process;

    phi_mul6_reg_490_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st21_fsm_20) and not((ap_const_lv1_0 = exitcond5_fu_744_p2)))) then 
                phi_mul6_reg_490 <= ap_const_lv14_0;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st39_fsm_38)) then 
                phi_mul6_reg_490 <= next_mul3_reg_1375;
            end if; 
        end if;
    end process;

    phi_mul7_reg_307_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and not((ap_const_lv1_0 = exitcond9_fu_579_p2)))) then 
                phi_mul7_reg_307 <= ap_const_lv14_0;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st20_fsm_19)) then 
                phi_mul7_reg_307 <= next_mul8_reg_1217;
            end if; 
        end if;
    end process;

    phi_mul8_reg_398_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st23_fsm_22) and not((ap_const_lv1_0 = exitcond3_fu_778_p2)))) then 
                phi_mul8_reg_398 <= next_mul7_reg_1329;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st21_fsm_20) and (ap_const_lv1_0 = exitcond5_fu_744_p2))) then 
                phi_mul8_reg_398 <= ap_const_lv14_0;
            end if; 
        end if;
    end process;

    phi_mul9_reg_421_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st22_fsm_21) and (ap_const_lv1_0 = exitcond4_fu_766_p2))) then 
                phi_mul9_reg_421 <= ap_const_lv10_0;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st24_fsm_23)) then 
                phi_mul9_reg_421 <= next_mul10_reg_1355;
            end if; 
        end if;
    end process;

    phi_mul_reg_353_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) and (ap_const_lv1_0 = exitcond7_fu_647_p2))) then 
                phi_mul_reg_353 <= ap_const_lv10_0;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st14_fsm_13)) then 
                phi_mul_reg_353 <= next_mul_reg_1281;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st26_fsm_25) and (ap_const_lv1_0 = exitcond1_fu_881_p2))) then
                distance_addr_1_reg_1426 <= tmp_26_fu_893_p1(4 - 1 downto 0);
                training_data2_addr_3_reg_1421 <= tmp_45_cast_fu_904_p1(14 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st25_fsm_24) and (ap_const_lv1_0 = exitcond2_fu_841_p2))) then
                group_addr_1_reg_1398 <= tmp_15_fu_853_p1(5 - 1 downto 0);
                min_distance_addr_1_reg_1393 <= tmp_15_fu_853_p1(5 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then
                    i2_cast_cast_reg_1250(4 downto 0) <= i2_cast_cast_fu_643_p1(4 downto 0);
                i_4_reg_1258 <= i_4_fu_653_p2;
                next_mul2_reg_1245 <= next_mul2_fu_637_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st21_fsm_20)) then
                    i3_cast_cast_reg_1316(4 downto 0) <= i3_cast_cast_fu_740_p1(4 downto 0);
                i_3_reg_1324 <= i_3_fu_750_p2;
                next_mul1_reg_1311 <= next_mul1_fu_734_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st25_fsm_24)) then
                i_5_reg_1388 <= i_5_fu_847_p2;
                next_mul3_reg_1375 <= next_mul3_fu_829_p2;
                next_mul5_reg_1380 <= next_mul5_fu_835_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st28_fsm_27)) then
                input_load_reg_1454 <= input_r_q0;
                training_instance_load_reg_1459 <= training_instance_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st22_fsm_21)) then
                    j4_cast_reg_1334(3 downto 0) <= j4_cast_fu_762_p1(3 downto 0);
                j_3_reg_1342 <= j_3_fu_772_p2;
                next_mul7_reg_1329 <= next_mul7_fu_756_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st26_fsm_25)) then
                    j7_cast6_reg_1408(3 downto 0) <= j7_cast6_fu_877_p1(3 downto 0);
                j_4_reg_1416 <= j_4_fu_887_p2;
                next_mul9_reg_1403 <= next_mul9_fu_871_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then
                j_2_reg_1235 <= j_2_fu_620_p2;
                next_mul4_reg_1227 <= next_mul4_fu_608_p2;
                next_mul6_reg_1222 <= next_mul6_fu_602_p2;
                next_mul8_reg_1217 <= next_mul8_fu_596_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then
                k_2_reg_1271 <= k_2_fu_684_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st23_fsm_22)) then
                k_3_reg_1350 <= k_3_fu_784_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st27_fsm_26)) then
                k_4_reg_1434 <= k_4_fu_915_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st23_fsm_22) and (ap_const_lv1_0 = exitcond3_fu_778_p2))) then
                next_mul10_reg_1355 <= next_mul10_fu_790_p2;
                next_mul11_reg_1365 <= next_mul11_fu_810_p2;
                tmp_19_reg_1370 <= tmp_19_fu_819_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st27_fsm_26) and (ap_const_lv1_0 = exitcond_fu_909_p2))) then
                next_mul12_reg_1444 <= next_mul12_fu_936_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5) and (ap_const_lv1_0 = exitcond6_fu_678_p2))) then
                next_mul_reg_1281 <= next_mul_fu_711_p2;
                tmp_24_reg_1286 <= tmp_24_fu_720_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st37_fsm_36)) then
                p_Result_1_reg_1477 <= p_Val2_1_fu_1027_p1(31 downto 31);
                p_Val2_4_reg_1482 <= p_Val2_4_fu_1147_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st19_fsm_18)) then
                tmp_17_reg_1306 <= grp_fu_553_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st13_fsm_12)) then
                tmp_23_reg_1301 <= grp_fu_550_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st36_fsm_35)) then
                tmp_28_reg_1473 <= tmp_28_fu_1021_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st34_fsm_33)) then
                tmp_6_reg_1469 <= tmp_6_fu_1008_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and (exitcond8_fu_614_p2 = ap_const_lv1_0))) then
                training_data2_addr_reg_1240 <= tmp_38_cast_fu_632_p1(14 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6)) then
                training_data_V_load_reg_1291 <= training_data_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st33_fsm_32)) then
                x_assign_reg_1464 <= grp_fu_546_p2;
            end if;
        end if;
    end process;
    i2_cast_cast_reg_1250(9 downto 5) <= "00000";
    i3_cast_cast_reg_1316(9 downto 5) <= "00000";
    j4_cast_reg_1334(9 downto 4) <= "000000";
    j7_cast6_reg_1408(9 downto 4) <= "000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, exitcond8_fu_614_p2, exitcond7_fu_647_p2, exitcond6_fu_678_p2, exitcond3_fu_778_p2, exitcond2_fu_841_p2, exitcond1_fu_881_p2, exitcond_fu_909_p2, tmp_28_fu_1021_p2, exitcond10_fu_561_p2, exitcond9_fu_579_p2, exitcond4_fu_766_p2, exitcond5_fu_744_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                if ((ap_const_lv1_0 = exitcond10_fu_561_p2)) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                end if;
            when ap_ST_st3_fsm_2 => 
                if ((ap_const_lv1_0 = exitcond9_fu_579_p2)) then
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                else
                    ap_NS_fsm <= ap_ST_st4_fsm_3;
                end if;
            when ap_ST_st4_fsm_3 => 
                if ((exitcond8_fu_614_p2 = ap_const_lv1_0)) then
                    ap_NS_fsm <= ap_ST_st5_fsm_4;
                else
                    ap_NS_fsm <= ap_ST_st21_fsm_20;
                end if;
            when ap_ST_st5_fsm_4 => 
                if (not((ap_const_lv1_0 = exitcond7_fu_647_p2))) then
                    ap_NS_fsm <= ap_ST_st15_fsm_14;
                else
                    ap_NS_fsm <= ap_ST_st6_fsm_5;
                end if;
            when ap_ST_st6_fsm_5 => 
                if ((ap_const_lv1_0 = exitcond6_fu_678_p2)) then
                    ap_NS_fsm <= ap_ST_st7_fsm_6;
                else
                    ap_NS_fsm <= ap_ST_st5_fsm_4;
                end if;
            when ap_ST_st7_fsm_6 => 
                ap_NS_fsm <= ap_ST_st8_fsm_7;
            when ap_ST_st8_fsm_7 => 
                ap_NS_fsm <= ap_ST_st9_fsm_8;
            when ap_ST_st9_fsm_8 => 
                ap_NS_fsm <= ap_ST_st10_fsm_9;
            when ap_ST_st10_fsm_9 => 
                ap_NS_fsm <= ap_ST_st11_fsm_10;
            when ap_ST_st11_fsm_10 => 
                ap_NS_fsm <= ap_ST_st12_fsm_11;
            when ap_ST_st12_fsm_11 => 
                ap_NS_fsm <= ap_ST_st13_fsm_12;
            when ap_ST_st13_fsm_12 => 
                ap_NS_fsm <= ap_ST_st14_fsm_13;
            when ap_ST_st14_fsm_13 => 
                ap_NS_fsm <= ap_ST_st6_fsm_5;
            when ap_ST_st15_fsm_14 => 
                ap_NS_fsm <= ap_ST_st16_fsm_15;
            when ap_ST_st16_fsm_15 => 
                ap_NS_fsm <= ap_ST_st17_fsm_16;
            when ap_ST_st17_fsm_16 => 
                ap_NS_fsm <= ap_ST_st18_fsm_17;
            when ap_ST_st18_fsm_17 => 
                ap_NS_fsm <= ap_ST_st19_fsm_18;
            when ap_ST_st19_fsm_18 => 
                ap_NS_fsm <= ap_ST_st20_fsm_19;
            when ap_ST_st20_fsm_19 => 
                ap_NS_fsm <= ap_ST_st4_fsm_3;
            when ap_ST_st21_fsm_20 => 
                if (not((ap_const_lv1_0 = exitcond5_fu_744_p2))) then
                    ap_NS_fsm <= ap_ST_st25_fsm_24;
                else
                    ap_NS_fsm <= ap_ST_st22_fsm_21;
                end if;
            when ap_ST_st22_fsm_21 => 
                if ((ap_const_lv1_0 = exitcond4_fu_766_p2)) then
                    ap_NS_fsm <= ap_ST_st23_fsm_22;
                else
                    ap_NS_fsm <= ap_ST_st21_fsm_20;
                end if;
            when ap_ST_st23_fsm_22 => 
                if ((ap_const_lv1_0 = exitcond3_fu_778_p2)) then
                    ap_NS_fsm <= ap_ST_st24_fsm_23;
                else
                    ap_NS_fsm <= ap_ST_st22_fsm_21;
                end if;
            when ap_ST_st24_fsm_23 => 
                ap_NS_fsm <= ap_ST_st23_fsm_22;
            when ap_ST_st25_fsm_24 => 
                if (not((ap_const_lv1_0 = exitcond2_fu_841_p2))) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                else
                    ap_NS_fsm <= ap_ST_st26_fsm_25;
                end if;
            when ap_ST_st26_fsm_25 => 
                if ((ap_const_lv1_0 = exitcond1_fu_881_p2)) then
                    ap_NS_fsm <= ap_ST_st27_fsm_26;
                else
                    ap_NS_fsm <= ap_ST_st39_fsm_38;
                end if;
            when ap_ST_st27_fsm_26 => 
                if (not((ap_const_lv1_0 = exitcond_fu_909_p2))) then
                    ap_NS_fsm <= ap_ST_st36_fsm_35;
                else
                    ap_NS_fsm <= ap_ST_st28_fsm_27;
                end if;
            when ap_ST_st28_fsm_27 => 
                ap_NS_fsm <= ap_ST_st29_fsm_28;
            when ap_ST_st29_fsm_28 => 
                ap_NS_fsm <= ap_ST_st30_fsm_29;
            when ap_ST_st30_fsm_29 => 
                ap_NS_fsm <= ap_ST_st31_fsm_30;
            when ap_ST_st31_fsm_30 => 
                ap_NS_fsm <= ap_ST_st32_fsm_31;
            when ap_ST_st32_fsm_31 => 
                ap_NS_fsm <= ap_ST_st33_fsm_32;
            when ap_ST_st33_fsm_32 => 
                ap_NS_fsm <= ap_ST_st34_fsm_33;
            when ap_ST_st34_fsm_33 => 
                ap_NS_fsm <= ap_ST_st35_fsm_34;
            when ap_ST_st35_fsm_34 => 
                ap_NS_fsm <= ap_ST_st27_fsm_26;
            when ap_ST_st36_fsm_35 => 
                if ((ap_const_lv1_0 = tmp_28_fu_1021_p2)) then
                    ap_NS_fsm <= ap_ST_st38_fsm_37;
                else
                    ap_NS_fsm <= ap_ST_st37_fsm_36;
                end if;
            when ap_ST_st37_fsm_36 => 
                ap_NS_fsm <= ap_ST_st38_fsm_37;
            when ap_ST_st38_fsm_37 => 
                ap_NS_fsm <= ap_ST_st26_fsm_25;
            when ap_ST_st39_fsm_38 => 
                ap_NS_fsm <= ap_ST_st25_fsm_24;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;

    ap_done_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0, ap_sig_cseq_ST_st25_fsm_24, exitcond2_fu_841_p2)
    begin
        if ((((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st25_fsm_24) and not((ap_const_lv1_0 = exitcond2_fu_841_p2))))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_sig_cseq_ST_st25_fsm_24, exitcond2_fu_841_p2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st25_fsm_24) and not((ap_const_lv1_0 = exitcond2_fu_841_p2)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_assign_proc : process(ap_sig_cseq_ST_st25_fsm_24, exitcond2_fu_841_p2, rev_fu_865_p2, ap_return_preg)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st25_fsm_24) and not((ap_const_lv1_0 = exitcond2_fu_841_p2)))) then 
            ap_return <= rev_fu_865_p2;
        else 
            ap_return <= ap_return_preg;
        end if; 
    end process;


    ap_sig_100_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_100 <= (ap_const_lv1_1 = ap_CS_fsm(3 downto 3));
    end process;


    ap_sig_121_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_121 <= (ap_const_lv1_1 = ap_CS_fsm(4 downto 4));
    end process;


    ap_sig_140_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_140 <= (ap_const_lv1_1 = ap_CS_fsm(5 downto 5));
    end process;


    ap_sig_157_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_157 <= (ap_const_lv1_1 = ap_CS_fsm(6 downto 6));
    end process;


    ap_sig_166_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_166 <= (ap_const_lv1_1 = ap_CS_fsm(7 downto 7));
    end process;


    ap_sig_175_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_175 <= (ap_const_lv1_1 = ap_CS_fsm(12 downto 12));
    end process;


    ap_sig_184_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_184 <= (ap_const_lv1_1 = ap_CS_fsm(18 downto 18));
    end process;


    ap_sig_193_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_193 <= (ap_const_lv1_1 = ap_CS_fsm(20 downto 20));
    end process;


    ap_sig_206_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_206 <= (ap_const_lv1_1 = ap_CS_fsm(21 downto 21));
    end process;


    ap_sig_219_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_219 <= (ap_const_lv1_1 = ap_CS_fsm(22 downto 22));
    end process;


    ap_sig_239_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_239 <= (ap_const_lv1_1 = ap_CS_fsm(24 downto 24));
    end process;


    ap_sig_259_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_259 <= (ap_const_lv1_1 = ap_CS_fsm(25 downto 25));
    end process;


    ap_sig_279_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_279 <= (ap_const_lv1_1 = ap_CS_fsm(26 downto 26));
    end process;


    ap_sig_296_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_296 <= (ap_const_lv1_1 = ap_CS_fsm(27 downto 27));
    end process;


    ap_sig_307_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_307 <= (ap_const_lv1_1 = ap_CS_fsm(32 downto 32));
    end process;


    ap_sig_316_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_316 <= (ap_const_lv1_1 = ap_CS_fsm(33 downto 33));
    end process;


    ap_sig_325_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_325 <= (ap_const_lv1_1 = ap_CS_fsm(35 downto 35));
    end process;


    ap_sig_334_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_334 <= (ap_const_lv1_1 = ap_CS_fsm(36 downto 36));
    end process;


    ap_sig_345_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_345 <= (ap_const_lv1_1 = ap_CS_fsm(38 downto 38));
    end process;


    ap_sig_421_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_421 <= (ap_const_lv1_1 = ap_CS_fsm(19 downto 19));
    end process;


    ap_sig_447_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_447 <= (ap_const_lv1_1 = ap_CS_fsm(13 downto 13));
    end process;


    ap_sig_479_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_479 <= (ap_const_lv1_1 = ap_CS_fsm(23 downto 23));
    end process;


    ap_sig_505_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_505 <= (ap_const_lv1_1 = ap_CS_fsm(37 downto 37));
    end process;


    ap_sig_516_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_516 <= (ap_const_lv1_1 = ap_CS_fsm(34 downto 34));
    end process;


    ap_sig_56_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_56 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    ap_sig_575_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_575 <= (ap_const_lv1_1 = ap_CS_fsm(28 downto 28));
    end process;


    ap_sig_82_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_82 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    ap_sig_91_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_91 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    ap_sig_cseq_ST_st13_fsm_12_assign_proc : process(ap_sig_175)
    begin
        if (ap_sig_175) then 
            ap_sig_cseq_ST_st13_fsm_12 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st13_fsm_12 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st14_fsm_13_assign_proc : process(ap_sig_447)
    begin
        if (ap_sig_447) then 
            ap_sig_cseq_ST_st14_fsm_13 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st14_fsm_13 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st19_fsm_18_assign_proc : process(ap_sig_184)
    begin
        if (ap_sig_184) then 
            ap_sig_cseq_ST_st19_fsm_18 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st19_fsm_18 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_56)
    begin
        if (ap_sig_56) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st20_fsm_19_assign_proc : process(ap_sig_421)
    begin
        if (ap_sig_421) then 
            ap_sig_cseq_ST_st20_fsm_19 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st20_fsm_19 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st21_fsm_20_assign_proc : process(ap_sig_193)
    begin
        if (ap_sig_193) then 
            ap_sig_cseq_ST_st21_fsm_20 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st21_fsm_20 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st22_fsm_21_assign_proc : process(ap_sig_206)
    begin
        if (ap_sig_206) then 
            ap_sig_cseq_ST_st22_fsm_21 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st22_fsm_21 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st23_fsm_22_assign_proc : process(ap_sig_219)
    begin
        if (ap_sig_219) then 
            ap_sig_cseq_ST_st23_fsm_22 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st23_fsm_22 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st24_fsm_23_assign_proc : process(ap_sig_479)
    begin
        if (ap_sig_479) then 
            ap_sig_cseq_ST_st24_fsm_23 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st24_fsm_23 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st25_fsm_24_assign_proc : process(ap_sig_239)
    begin
        if (ap_sig_239) then 
            ap_sig_cseq_ST_st25_fsm_24 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st25_fsm_24 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st26_fsm_25_assign_proc : process(ap_sig_259)
    begin
        if (ap_sig_259) then 
            ap_sig_cseq_ST_st26_fsm_25 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st26_fsm_25 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st27_fsm_26_assign_proc : process(ap_sig_279)
    begin
        if (ap_sig_279) then 
            ap_sig_cseq_ST_st27_fsm_26 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st27_fsm_26 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st28_fsm_27_assign_proc : process(ap_sig_296)
    begin
        if (ap_sig_296) then 
            ap_sig_cseq_ST_st28_fsm_27 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st28_fsm_27 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st29_fsm_28_assign_proc : process(ap_sig_575)
    begin
        if (ap_sig_575) then 
            ap_sig_cseq_ST_st29_fsm_28 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st29_fsm_28 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st2_fsm_1_assign_proc : process(ap_sig_82)
    begin
        if (ap_sig_82) then 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st33_fsm_32_assign_proc : process(ap_sig_307)
    begin
        if (ap_sig_307) then 
            ap_sig_cseq_ST_st33_fsm_32 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st33_fsm_32 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st34_fsm_33_assign_proc : process(ap_sig_316)
    begin
        if (ap_sig_316) then 
            ap_sig_cseq_ST_st34_fsm_33 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st34_fsm_33 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st35_fsm_34_assign_proc : process(ap_sig_516)
    begin
        if (ap_sig_516) then 
            ap_sig_cseq_ST_st35_fsm_34 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st35_fsm_34 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st36_fsm_35_assign_proc : process(ap_sig_325)
    begin
        if (ap_sig_325) then 
            ap_sig_cseq_ST_st36_fsm_35 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st36_fsm_35 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st37_fsm_36_assign_proc : process(ap_sig_334)
    begin
        if (ap_sig_334) then 
            ap_sig_cseq_ST_st37_fsm_36 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st37_fsm_36 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st38_fsm_37_assign_proc : process(ap_sig_505)
    begin
        if (ap_sig_505) then 
            ap_sig_cseq_ST_st38_fsm_37 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st38_fsm_37 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st39_fsm_38_assign_proc : process(ap_sig_345)
    begin
        if (ap_sig_345) then 
            ap_sig_cseq_ST_st39_fsm_38 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st39_fsm_38 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st3_fsm_2_assign_proc : process(ap_sig_91)
    begin
        if (ap_sig_91) then 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st4_fsm_3_assign_proc : process(ap_sig_100)
    begin
        if (ap_sig_100) then 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st5_fsm_4_assign_proc : process(ap_sig_121)
    begin
        if (ap_sig_121) then 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st6_fsm_5_assign_proc : process(ap_sig_140)
    begin
        if (ap_sig_140) then 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st7_fsm_6_assign_proc : process(ap_sig_157)
    begin
        if (ap_sig_157) then 
            ap_sig_cseq_ST_st7_fsm_6 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st7_fsm_6 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st8_fsm_7_assign_proc : process(ap_sig_166)
    begin
        if (ap_sig_166) then 
            ap_sig_cseq_ST_st8_fsm_7 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st8_fsm_7 <= ap_const_logic_0;
        end if; 
    end process;


    distance_address0_assign_proc : process(ap_sig_cseq_ST_st3_fsm_2, distance_addr_1_reg_1426, ap_sig_cseq_ST_st27_fsm_26, ap_sig_cseq_ST_st34_fsm_33, ap_sig_cseq_ST_st35_fsm_34, tmp_s_fu_591_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
            distance_address0 <= tmp_s_fu_591_p1(4 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st27_fsm_26) or (ap_const_logic_1 = ap_sig_cseq_ST_st34_fsm_33) or (ap_const_logic_1 = ap_sig_cseq_ST_st35_fsm_34))) then 
            distance_address0 <= distance_addr_1_reg_1426;
        else 
            distance_address0 <= "XXXX";
        end if; 
    end process;


    distance_ce0_assign_proc : process(ap_sig_cseq_ST_st3_fsm_2, ap_sig_cseq_ST_st27_fsm_26, ap_sig_cseq_ST_st34_fsm_33, ap_sig_cseq_ST_st35_fsm_34)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) or (ap_const_logic_1 = ap_sig_cseq_ST_st27_fsm_26) or (ap_const_logic_1 = ap_sig_cseq_ST_st34_fsm_33) or (ap_const_logic_1 = ap_sig_cseq_ST_st35_fsm_34))) then 
            distance_ce0 <= ap_const_logic_1;
        else 
            distance_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    distance_d0_assign_proc : process(ap_sig_cseq_ST_st3_fsm_2, ap_sig_cseq_ST_st35_fsm_34, tmp_33_fu_1014_p2)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st35_fsm_34)) then 
            distance_d0 <= tmp_33_fu_1014_p2;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
            distance_d0 <= ap_const_lv32_0;
        else 
            distance_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    distance_we0_assign_proc : process(ap_sig_cseq_ST_st3_fsm_2, tmp_6_reg_1469, exitcond9_fu_579_p2, ap_sig_cseq_ST_st35_fsm_34)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and (ap_const_lv1_0 = exitcond9_fu_579_p2)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st35_fsm_34) and not((ap_const_lv1_0 = tmp_6_reg_1469))))) then 
            distance_we0 <= ap_const_logic_1;
        else 
            distance_we0 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond10_fu_561_p2 <= "1" when (i_reg_250 = ap_const_lv5_14) else "0";
    exitcond1_fu_881_p2 <= "1" when (j7_reg_502 = ap_const_lv4_E) else "0";
    exitcond2_fu_841_p2 <= "1" when (i6_reg_467 = ap_const_lv5_14) else "0";
    exitcond3_fu_778_p2 <= "1" when (k5_reg_410 = ap_const_lv6_31) else "0";
    exitcond4_fu_766_p2 <= "1" when (j4_reg_387 = ap_const_lv4_E) else "0";
    exitcond5_fu_744_p2 <= "1" when (i3_reg_364 = ap_const_lv5_14) else "0";
    exitcond6_fu_678_p2 <= "1" when (k_reg_342 = ap_const_lv6_31) else "0";
    exitcond7_fu_647_p2 <= "1" when (i2_reg_319 = ap_const_lv5_14) else "0";
    exitcond8_fu_614_p2 <= "1" when (j_reg_272 = ap_const_lv4_E) else "0";
    exitcond9_fu_579_p2 <= "1" when (i1_reg_261 = ap_const_lv4_E) else "0";
    exitcond_fu_909_p2 <= "1" when (k8_reg_524 = ap_const_lv6_31) else "0";

    group_address0_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, group_addr_1_reg_1398, ap_sig_cseq_ST_st26_fsm_25, ap_sig_cseq_ST_st38_fsm_37, tmp_fu_573_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            group_address0 <= tmp_fu_573_p1(5 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st26_fsm_25) or (ap_const_logic_1 = ap_sig_cseq_ST_st38_fsm_37))) then 
            group_address0 <= group_addr_1_reg_1398;
        else 
            group_address0 <= "XXXXX";
        end if; 
    end process;


    group_ce0_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, ap_sig_cseq_ST_st26_fsm_25, ap_sig_cseq_ST_st38_fsm_37)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) or (ap_const_logic_1 = ap_sig_cseq_ST_st26_fsm_25) or (ap_const_logic_1 = ap_sig_cseq_ST_st38_fsm_37))) then 
            group_ce0 <= ap_const_logic_1;
        else 
            group_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    group_d0_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, ap_sig_cseq_ST_st38_fsm_37, p_Val2_6_fu_1160_p3)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st38_fsm_37)) then 
            group_d0 <= p_Val2_6_fu_1160_p3;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            group_d0 <= ap_const_lv32_0;
        else 
            group_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    group_one_1_fu_1193_p3 <= 
        group_one_reg_455 when (tmp_25_fu_1167_p2(0) = '1') else 
        group_one_2_fu_1179_p2;
    group_one_2_fu_1179_p2 <= std_logic_vector(unsigned(group_one_reg_455) + unsigned(ap_const_lv32_1));

    group_we0_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, tmp_28_reg_1473, exitcond10_fu_561_p2, ap_sig_cseq_ST_st38_fsm_37)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (ap_const_lv1_0 = exitcond10_fu_561_p2)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st38_fsm_37) and not((ap_const_lv1_0 = tmp_28_reg_1473))))) then 
            group_we0 <= ap_const_logic_1;
        else 
            group_we0 <= ap_const_logic_0;
        end if; 
    end process;

    group_zero_1_fu_1185_p3 <= 
        group_zero_2_fu_1173_p2 when (tmp_25_fu_1167_p2(0) = '1') else 
        group_zero_reg_443;
    group_zero_2_fu_1173_p2 <= std_logic_vector(unsigned(group_zero_reg_443) + unsigned(ap_const_lv32_1));
    grp_fu_550_p0 <= std_logic_vector(resize(unsigned(training_data_V_load_reg_1291),32));
    grp_fu_553_p0 <= std_logic_vector(resize(unsigned(tmp_1_fu_659_p4),32));
    i2_cast_cast_fu_643_p1 <= std_logic_vector(resize(unsigned(i2_reg_319),10));
    i3_cast_cast_fu_740_p1 <= std_logic_vector(resize(unsigned(i3_reg_364),10));
    i_1_fu_567_p2 <= std_logic_vector(unsigned(i_reg_250) + unsigned(ap_const_lv5_1));
    i_2_fu_585_p2 <= std_logic_vector(unsigned(i1_reg_261) + unsigned(ap_const_lv4_1));
    i_3_fu_750_p2 <= std_logic_vector(unsigned(i3_reg_364) + unsigned(ap_const_lv5_1));
    i_4_fu_653_p2 <= std_logic_vector(unsigned(i2_reg_319) + unsigned(ap_const_lv5_1));
    i_5_fu_847_p2 <= std_logic_vector(unsigned(i6_reg_467) + unsigned(ap_const_lv5_1));
    input_r_address0 <= tmp_48_cast_fu_931_p1(10 - 1 downto 0);

    input_r_ce0_assign_proc : process(ap_sig_cseq_ST_st27_fsm_26)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st27_fsm_26)) then 
            input_r_ce0 <= ap_const_logic_1;
        else 
            input_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    isNeg_fu_1075_p3 <= sh_assign_fu_1069_p2(8 downto 8);
    j4_cast_fu_762_p1 <= std_logic_vector(resize(unsigned(j4_reg_387),10));
    j7_cast6_fu_877_p1 <= std_logic_vector(resize(unsigned(j7_reg_502),10));
    j_2_fu_620_p2 <= std_logic_vector(unsigned(j_reg_272) + unsigned(ap_const_lv4_1));
    j_3_fu_772_p2 <= std_logic_vector(unsigned(j4_reg_387) + unsigned(ap_const_lv4_1));
    j_4_fu_887_p2 <= std_logic_vector(unsigned(j7_reg_502) + unsigned(ap_const_lv4_1));
    k_2_fu_684_p2 <= std_logic_vector(unsigned(k_reg_342) + unsigned(ap_const_lv6_1));
    k_3_fu_784_p2 <= std_logic_vector(unsigned(k5_reg_410) + unsigned(ap_const_lv6_1));
    k_4_fu_915_p2 <= std_logic_vector(unsigned(k8_reg_524) + unsigned(ap_const_lv6_1));
    k_cast1_fu_674_p1 <= std_logic_vector(resize(unsigned(k_reg_342),10));
    loc_V_1_fu_1049_p1 <= p_Val2_1_fu_1027_p1(23 - 1 downto 0);
    loc_V_fu_1039_p4 <= p_Val2_1_fu_1027_p1(30 downto 23);

    min_distance_address0_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, min_distance_addr_1_reg_1393, ap_sig_cseq_ST_st27_fsm_26, ap_sig_cseq_ST_st36_fsm_35, tmp_fu_573_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            min_distance_address0 <= tmp_fu_573_p1(5 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st27_fsm_26) or (ap_const_logic_1 = ap_sig_cseq_ST_st36_fsm_35))) then 
            min_distance_address0 <= min_distance_addr_1_reg_1393;
        else 
            min_distance_address0 <= "XXXXX";
        end if; 
    end process;


    min_distance_ce0_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, ap_sig_cseq_ST_st27_fsm_26, ap_sig_cseq_ST_st36_fsm_35)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) or (ap_const_logic_1 = ap_sig_cseq_ST_st27_fsm_26) or (ap_const_logic_1 = ap_sig_cseq_ST_st36_fsm_35))) then 
            min_distance_ce0 <= ap_const_logic_1;
        else 
            min_distance_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    min_distance_d0_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, ap_sig_cseq_ST_st36_fsm_35, distance_q0)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st36_fsm_35)) then 
            min_distance_d0 <= distance_q0;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            min_distance_d0 <= ap_const_lv32_31;
        else 
            min_distance_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    min_distance_we0_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, tmp_28_fu_1021_p2, ap_sig_cseq_ST_st36_fsm_35, exitcond10_fu_561_p2)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (ap_const_lv1_0 = exitcond10_fu_561_p2)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st36_fsm_35) and not((ap_const_lv1_0 = tmp_28_fu_1021_p2))))) then 
            min_distance_we0 <= ap_const_logic_1;
        else 
            min_distance_we0 <= ap_const_logic_0;
        end if; 
    end process;

    next_mul10_fu_790_p2 <= std_logic_vector(unsigned(i3_cast_cast_reg_1316) + unsigned(phi_mul9_reg_421));
    next_mul11_fu_810_p2 <= std_logic_vector(unsigned(j4_cast_reg_1334) + unsigned(phi_mul10_reg_432));
    next_mul12_fu_936_p2 <= std_logic_vector(unsigned(phi_mul12_reg_535) + unsigned(j7_cast6_reg_1408));
    next_mul1_fu_734_p2 <= std_logic_vector(unsigned(phi_mul2_reg_375) + unsigned(ap_const_lv14_2AE));
    next_mul2_fu_637_p2 <= std_logic_vector(unsigned(phi_mul1_reg_330) + unsigned(ap_const_lv10_32));
    next_mul3_fu_829_p2 <= std_logic_vector(unsigned(phi_mul6_reg_490) + unsigned(ap_const_lv14_2AE));
    next_mul4_fu_608_p2 <= std_logic_vector(unsigned(phi_mul3_reg_283) + unsigned(ap_const_lv9_13));
    next_mul5_fu_835_p2 <= std_logic_vector(unsigned(phi_mul4_reg_478) + unsigned(ap_const_lv10_31));
    next_mul6_fu_602_p2 <= std_logic_vector(unsigned(phi_mul5_reg_295) + unsigned(ap_const_lv14_3E8));
    next_mul7_fu_756_p2 <= std_logic_vector(unsigned(phi_mul8_reg_398) + unsigned(ap_const_lv14_3D5));
    next_mul8_fu_596_p2 <= std_logic_vector(unsigned(phi_mul7_reg_307) + unsigned(ap_const_lv14_3D5));
    next_mul9_fu_871_p2 <= std_logic_vector(unsigned(phi_mul11_reg_513) + unsigned(ap_const_lv14_3D5));
    next_mul_fu_711_p2 <= std_logic_vector(unsigned(i2_cast_cast_reg_1250) + unsigned(phi_mul_reg_353));
    notlhs_fu_990_p2 <= "0" when (tmp_3_fu_980_p4 = ap_const_lv8_FF) else "1";
    notrhs_fu_996_p2 <= "1" when (tmp_7_fu_963_p1 = ap_const_lv23_0) else "0";
    p_Result_2_fu_1053_p3 <= (ap_const_lv1_1 & loc_V_1_fu_1049_p1);
    p_Result_s_fu_967_p3 <= (ap_const_lv1_0 & tmp_2_fu_959_p1);
    p_Val2_1_fu_1027_p1 <= training_data2_q0;
    p_Val2_4_fu_1147_p3 <= 
        tmp_31_fu_1133_p1 when (isNeg_fu_1075_p3(0) = '1') else 
        tmp_32_fu_1137_p4;
    p_Val2_6_fu_1160_p3 <= 
        p_Val2_7_i_i_fu_1155_p2 when (p_Result_1_reg_1477(0) = '1') else 
        p_Val2_4_reg_1482;
    p_Val2_7_i_i_fu_1155_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(p_Val2_4_reg_1482));
    p_Val2_s_fu_956_p1 <= x_assign_reg_1464;
    rev_fu_865_p2 <= (slt_fu_859_p2 xor ap_const_lv1_1);
        sh_assign_1_cast_cast_fu_1105_p1 <= std_logic_vector(resize(signed(sh_assign_1_fu_1093_p3),24));

        sh_assign_1_cast_fu_1101_p1 <= std_logic_vector(resize(signed(sh_assign_1_fu_1093_p3),32));

    sh_assign_1_fu_1093_p3 <= 
        tmp_45_i_i_cast_fu_1089_p1 when (isNeg_fu_1075_p3(0) = '1') else 
        sh_assign_fu_1069_p2;
    sh_assign_fu_1069_p2 <= std_logic_vector(signed(ap_const_lv9_181) + signed(tmp_i_i_i_cast2_fu_1065_p1));
    slt_fu_859_p2 <= "1" when (signed(group_one_reg_455) < signed(group_zero_reg_443)) else "0";
    tmp1_cast_fu_696_p1 <= std_logic_vector(resize(unsigned(tmp1_fu_690_p2),14));
    tmp1_fu_690_p2 <= std_logic_vector(unsigned(k_cast1_fu_674_p1) + unsigned(phi_mul1_reg_330));
    tmp_11_fu_1125_p3 <= tmp_47_i_i_fu_1113_p2(23 downto 23);
    tmp_14_fu_626_p2 <= std_logic_vector(unsigned(phi_mul7_reg_307) + unsigned(ap_const_lv14_3D4));
    tmp_15_fu_853_p1 <= std_logic_vector(resize(unsigned(i6_reg_467),64));
    tmp_18_fu_799_p2 <= std_logic_vector(unsigned(phi_mul8_reg_398) + unsigned(tmp_29_cast_fu_795_p1));
    tmp_19_fu_819_p2 <= std_logic_vector(unsigned(phi_mul2_reg_375) + unsigned(tmp_31_cast_fu_815_p1));
    tmp_1_fu_659_p4 <= phi_mul3_reg_283(8 downto 7);
    tmp_20_fu_700_p2 <= std_logic_vector(unsigned(phi_mul5_reg_295) + unsigned(tmp1_cast_fu_696_p1));
    tmp_21_fu_706_p1 <= std_logic_vector(resize(unsigned(tmp_20_fu_700_p2),64));
    tmp_24_fu_720_p2 <= std_logic_vector(unsigned(phi_mul7_reg_307) + unsigned(tmp_25_cast_fu_716_p1));
    tmp_25_cast_fu_716_p1 <= std_logic_vector(resize(unsigned(phi_mul_reg_353),14));
    tmp_25_fu_1167_p2 <= "1" when (group_q0 = ap_const_lv32_0) else "0";
    tmp_26_fu_893_p1 <= std_logic_vector(resize(unsigned(j7_reg_502),64));
    tmp_27_fu_898_p2 <= std_logic_vector(unsigned(phi_mul11_reg_513) + unsigned(ap_const_lv14_3D4));
    tmp_28_fu_1021_p2 <= "1" when (signed(distance_q0) < signed(min_distance_q0)) else "0";
    tmp_29_cast_fu_795_p1 <= std_logic_vector(resize(unsigned(phi_mul9_reg_421),14));
    tmp_29_fu_925_p2 <= std_logic_vector(unsigned(tmp_33_cast_fu_921_p1) + unsigned(phi_mul4_reg_478));
    tmp_2_fu_959_p1 <= p_Val2_s_fu_956_p1(31 - 1 downto 0);
    tmp_30_fu_945_p2 <= std_logic_vector(unsigned(tmp_35_cast_fu_941_p1) + unsigned(phi_mul6_reg_490));
    tmp_31_cast_fu_815_p1 <= std_logic_vector(resize(unsigned(phi_mul10_reg_432),14));
    tmp_31_fu_1133_p1 <= std_logic_vector(resize(unsigned(tmp_11_fu_1125_p3),32));
    tmp_32_fu_1137_p4 <= tmp_49_i_i_fu_1119_p2(54 downto 23);
    tmp_33_cast_fu_921_p1 <= std_logic_vector(resize(unsigned(k8_reg_524),10));
    tmp_33_fu_1014_p2 <= std_logic_vector(unsigned(distance_q0) + unsigned(ap_const_lv32_1));
    tmp_35_cast_fu_941_p1 <= std_logic_vector(resize(unsigned(phi_mul12_reg_535),14));
    tmp_38_cast_fu_632_p1 <= std_logic_vector(resize(unsigned(tmp_14_fu_626_p2),64));
    tmp_3_fu_980_p4 <= p_Val2_s_fu_956_p1(30 downto 23);
    tmp_43_cast_fu_730_p1 <= std_logic_vector(resize(unsigned(tmp_24_reg_1286),64));
    tmp_45_cast_fu_904_p1 <= std_logic_vector(resize(unsigned(tmp_27_fu_898_p2),64));
        tmp_45_i_i_cast_fu_1089_p1 <= std_logic_vector(resize(signed(tmp_45_i_i_fu_1083_p2),9));

    tmp_45_i_i_fu_1083_p2 <= std_logic_vector(unsigned(ap_const_lv8_7F) - unsigned(loc_V_fu_1039_p4));
    tmp_46_cast_fu_805_p1 <= std_logic_vector(resize(unsigned(tmp_18_fu_799_p2),64));
    tmp_46_i_i_fu_1109_p1 <= std_logic_vector(resize(unsigned(sh_assign_1_cast_fu_1101_p1),78));
    tmp_47_cast_fu_825_p1 <= std_logic_vector(resize(unsigned(tmp_19_reg_1370),64));
    tmp_47_i_i_fu_1113_p2 <= std_logic_vector(shift_right(unsigned(p_Result_2_fu_1053_p3),to_integer(unsigned('0' & sh_assign_1_cast_cast_fu_1105_p1(24-1 downto 0)))));
    tmp_48_cast_fu_931_p1 <= std_logic_vector(resize(unsigned(tmp_29_fu_925_p2),64));
    tmp_49_cast_fu_951_p1 <= std_logic_vector(resize(unsigned(tmp_30_fu_945_p2),64));
    tmp_49_i_i_fu_1119_p2 <= std_logic_vector(shift_left(unsigned(tmp_i_i_fu_1061_p1),to_integer(unsigned('0' & tmp_46_i_i_fu_1109_p1(31-1 downto 0)))));
    tmp_4_fu_1002_p2 <= (notrhs_fu_996_p2 or notlhs_fu_990_p2);
    tmp_5_fu_556_p0 <= p_Result_s_fu_967_p3;
    tmp_6_fu_1008_p2 <= (tmp_4_fu_1002_p2 and tmp_5_fu_556_p2);
    tmp_7_fu_963_p1 <= p_Val2_s_fu_956_p1(23 - 1 downto 0);
    tmp_fu_573_p1 <= std_logic_vector(resize(unsigned(i_reg_250),64));
    tmp_i_i_fu_1061_p1 <= std_logic_vector(resize(unsigned(p_Result_2_fu_1053_p3),78));
    tmp_i_i_i_cast2_fu_1065_p1 <= std_logic_vector(resize(unsigned(loc_V_fu_1039_p4),9));
    tmp_s_fu_591_p1 <= std_logic_vector(resize(unsigned(i1_reg_261),64));

    training_data2_address0_assign_proc : process(training_data2_addr_reg_1240, ap_sig_cseq_ST_st23_fsm_22, training_data2_addr_3_reg_1421, ap_sig_cseq_ST_st36_fsm_35, ap_sig_cseq_ST_st20_fsm_19, ap_sig_cseq_ST_st14_fsm_13, tmp_43_cast_fu_730_p1, tmp_46_cast_fu_805_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st20_fsm_19)) then 
            training_data2_address0 <= training_data2_addr_reg_1240;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st14_fsm_13)) then 
            training_data2_address0 <= tmp_43_cast_fu_730_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st36_fsm_35)) then 
            training_data2_address0 <= training_data2_addr_3_reg_1421;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st23_fsm_22)) then 
            training_data2_address0 <= tmp_46_cast_fu_805_p1(14 - 1 downto 0);
        else 
            training_data2_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    training_data2_ce0_assign_proc : process(ap_sig_cseq_ST_st23_fsm_22, ap_sig_cseq_ST_st36_fsm_35, ap_sig_cseq_ST_st20_fsm_19, ap_sig_cseq_ST_st14_fsm_13)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st23_fsm_22) or (ap_const_logic_1 = ap_sig_cseq_ST_st36_fsm_35) or (ap_const_logic_1 = ap_sig_cseq_ST_st20_fsm_19) or (ap_const_logic_1 = ap_sig_cseq_ST_st14_fsm_13))) then 
            training_data2_ce0 <= ap_const_logic_1;
        else 
            training_data2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    training_data2_d0_assign_proc : process(tmp_23_reg_1301, tmp_17_reg_1306, ap_sig_cseq_ST_st20_fsm_19, ap_sig_cseq_ST_st14_fsm_13)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st20_fsm_19)) then 
            training_data2_d0 <= tmp_17_reg_1306;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st14_fsm_13)) then 
            training_data2_d0 <= tmp_23_reg_1301;
        else 
            training_data2_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    training_data2_we0_assign_proc : process(ap_sig_cseq_ST_st20_fsm_19, ap_sig_cseq_ST_st14_fsm_13)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st20_fsm_19) or (ap_const_logic_1 = ap_sig_cseq_ST_st14_fsm_13))) then 
            training_data2_we0 <= ap_const_logic_1;
        else 
            training_data2_we0 <= ap_const_logic_0;
        end if; 
    end process;

    training_data_V_address0 <= tmp_21_fu_706_p1(14 - 1 downto 0);

    training_data_V_ce0_assign_proc : process(ap_sig_cseq_ST_st6_fsm_5)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then 
            training_data_V_ce0 <= ap_const_logic_1;
        else 
            training_data_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    training_instance_address0_assign_proc : process(ap_sig_cseq_ST_st27_fsm_26, ap_sig_cseq_ST_st24_fsm_23, tmp_47_cast_fu_825_p1, tmp_49_cast_fu_951_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st24_fsm_23)) then 
            training_instance_address0 <= tmp_47_cast_fu_825_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st27_fsm_26)) then 
            training_instance_address0 <= tmp_49_cast_fu_951_p1(14 - 1 downto 0);
        else 
            training_instance_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    training_instance_ce0_assign_proc : process(ap_sig_cseq_ST_st27_fsm_26, ap_sig_cseq_ST_st24_fsm_23)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st27_fsm_26) or (ap_const_logic_1 = ap_sig_cseq_ST_st24_fsm_23))) then 
            training_instance_ce0 <= ap_const_logic_1;
        else 
            training_instance_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    training_instance_we0_assign_proc : process(ap_sig_cseq_ST_st24_fsm_23)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st24_fsm_23))) then 
            training_instance_we0 <= ap_const_logic_1;
        else 
            training_instance_we0 <= ap_const_logic_0;
        end if; 
    end process;

end behav;
