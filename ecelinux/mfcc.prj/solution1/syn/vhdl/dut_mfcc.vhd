-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.2
-- Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity dut_mfcc is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    sound_file_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    sound_file_ce0 : OUT STD_LOGIC;
    sound_file_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of dut_mfcc is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_st5_fsm_4 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_st6_fsm_5 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_st7_fsm_6 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_st8_fsm_7 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_st9_fsm_8 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_st10_fsm_9 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_st11_fsm_10 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_st12_fsm_11 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_st13_fsm_12 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_st14_fsm_13 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_st15_fsm_14 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_st16_fsm_15 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_st17_fsm_16 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_st18_fsm_17 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_st19_fsm_18 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_st20_fsm_19 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_st21_fsm_20 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_st22_fsm_21 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_st23_fsm_22 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_st24_fsm_23 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_st25_fsm_24 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_st26_fsm_25 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_st27_fsm_26 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_st28_fsm_27 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_st29_fsm_28 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_st30_fsm_29 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_st31_fsm_30 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_st32_fsm_31 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_st33_fsm_32 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_st34_fsm_33 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_st35_fsm_34 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_st36_fsm_35 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_st37_fsm_36 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_st38_fsm_37 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_st39_fsm_38 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_st40_fsm_39 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_st41_fsm_40 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_st42_fsm_41 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_st43_fsm_42 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_st44_fsm_43 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_st45_fsm_44 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_st46_fsm_45 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_st47_fsm_46 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_st48_fsm_47 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_st49_fsm_48 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_st50_fsm_49 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_st51_fsm_50 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_st52_fsm_51 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_st53_fsm_52 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_st54_fsm_53 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_st55_fsm_54 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st56_fsm_55 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st57_fsm_56 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st58_fsm_57 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st59_fsm_58 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st60_fsm_59 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st61_fsm_60 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st62_fsm_61 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st63_fsm_62 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st64_fsm_63 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st65_fsm_64 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st66_fsm_65 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st67_fsm_66 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st68_fsm_67 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st69_fsm_68 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st70_fsm_69 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st71_fsm_70 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st72_fsm_71 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st73_fsm_72 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st74_fsm_73 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st75_fsm_74 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st76_fsm_75 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st77_fsm_76 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st78_fsm_77 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st79_fsm_78 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st80_fsm_79 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st81_fsm_80 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st82_fsm_81 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st83_fsm_82 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st84_fsm_83 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st85_fsm_84 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st86_fsm_85 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st87_fsm_86 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st88_fsm_87 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st89_fsm_88 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st90_fsm_89 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st91_fsm_90 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st92_fsm_91 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st93_fsm_92 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st94_fsm_93 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st95_fsm_94 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st96_fsm_95 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st97_fsm_96 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st98_fsm_97 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st99_fsm_98 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st100_fsm_99 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st101_fsm_100 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st102_fsm_101 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st103_fsm_102 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st104_fsm_103 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st105_fsm_104 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st106_fsm_105 : STD_LOGIC_VECTOR (114 downto 0) := "0000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st107_fsm_106 : STD_LOGIC_VECTOR (114 downto 0) := "0000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st108_fsm_107 : STD_LOGIC_VECTOR (114 downto 0) := "0000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st109_fsm_108 : STD_LOGIC_VECTOR (114 downto 0) := "0000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st110_fsm_109 : STD_LOGIC_VECTOR (114 downto 0) := "0000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st111_fsm_110 : STD_LOGIC_VECTOR (114 downto 0) := "0000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st112_fsm_111 : STD_LOGIC_VECTOR (114 downto 0) := "0001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st113_fsm_112 : STD_LOGIC_VECTOR (114 downto 0) := "0010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st114_fsm_113 : STD_LOGIC_VECTOR (114 downto 0) := "0100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st115_fsm_114 : STD_LOGIC_VECTOR (114 downto 0) := "1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_46 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000110";
    constant ap_const_lv32_4F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001111";
    constant ap_const_lv32_53 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010011";
    constant ap_const_lv32_69 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101001";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_4B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001011";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_35 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110101";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv32_3C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111100";
    constant ap_const_lv32_3D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111101";
    constant ap_const_lv32_42 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000010";
    constant ap_const_lv32_63 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100011";
    constant ap_const_lv32_65 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100101";
    constant ap_const_lv32_66 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100110";
    constant ap_const_lv32_6E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101110";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv14_0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_36 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110110";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv32_71 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110001";
    constant ap_const_lv32_72 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110010";
    constant ap_const_lv32_64 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100100";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_3F800000 : STD_LOGIC_VECTOR (31 downto 0) := "00111111100000000000000000000000";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_47 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000111";
    constant ap_const_lv32_6A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101010";
    constant ap_const_lv32_40000000 : STD_LOGIC_VECTOR (31 downto 0) := "01000000000000000000000000000000";
    constant ap_const_lv32_40490FD8 : STD_LOGIC_VECTOR (31 downto 0) := "01000000010010010000111111011000";
    constant ap_const_lv32_43 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000011";
    constant ap_const_lv32_4C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001100";
    constant ap_const_lv32_50 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010000";
    constant ap_const_lv32_42200000 : STD_LOGIC_VECTOR (31 downto 0) := "01000010001000000000000000000000";
    constant ap_const_lv32_54 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010100";
    constant ap_const_lv14_31 : STD_LOGIC_VECTOR (13 downto 0) := "00000000110001";
    constant ap_const_lv9_100 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv6_31 : STD_LOGIC_VECTOR (5 downto 0) := "110001";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv13_64 : STD_LOGIC_VECTOR (12 downto 0) := "0000001100100";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv8_81 : STD_LOGIC_VECTOR (7 downto 0) := "10000001";
    constant ap_const_lv10_31 : STD_LOGIC_VECTOR (9 downto 0) := "0000110001";
    constant ap_const_lv5_14 : STD_LOGIC_VECTOR (4 downto 0) := "10100";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_3E64F92E : STD_LOGIC_VECTOR (31 downto 0) := "00111110011001001111100100101110";
    constant ap_const_lv32_3EA1E89B : STD_LOGIC_VECTOR (31 downto 0) := "00111110101000011110100010011011";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_132 : BOOLEAN;
    signal hamming_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal hamming_ce0 : STD_LOGIC;
    signal hamming_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal xn_input_M_real_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal xn_input_M_real_ce0 : STD_LOGIC;
    signal xn_input_M_real_we0 : STD_LOGIC;
    signal xn_input_M_real_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal xk_output_M_real_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal xk_output_M_real_ce0 : STD_LOGIC;
    signal xk_output_M_real_we0 : STD_LOGIC;
    signal xk_output_M_real_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal xk_output_M_real_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal xk_output_M_imag_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal xk_output_M_imag_ce0 : STD_LOGIC;
    signal xk_output_M_imag_we0 : STD_LOGIC;
    signal xk_output_M_imag_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal xk_output_M_imag_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal melfb_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal melfb_ce0 : STD_LOGIC;
    signal melfb_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_682_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_717 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st25_fsm_24 : STD_LOGIC;
    signal ap_sig_193 : BOOLEAN;
    signal ap_sig_cseq_ST_st37_fsm_36 : STD_LOGIC;
    signal ap_sig_200 : BOOLEAN;
    signal ap_sig_cseq_ST_st71_fsm_70 : STD_LOGIC;
    signal ap_sig_208 : BOOLEAN;
    signal ap_sig_cseq_ST_st80_fsm_79 : STD_LOGIC;
    signal ap_sig_216 : BOOLEAN;
    signal ap_sig_cseq_ST_st84_fsm_83 : STD_LOGIC;
    signal ap_sig_224 : BOOLEAN;
    signal ap_sig_cseq_ST_st106_fsm_105 : STD_LOGIC;
    signal ap_sig_232 : BOOLEAN;
    signal grp_fu_675_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_725 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st30_fsm_29 : STD_LOGIC;
    signal ap_sig_242 : BOOLEAN;
    signal ap_sig_cseq_ST_st76_fsm_75 : STD_LOGIC;
    signal ap_sig_249 : BOOLEAN;
    signal next_mul3_fu_731_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal next_mul3_reg_1251 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_sig_cseq_ST_st2_fsm_1 : STD_LOGIC;
    signal ap_sig_259 : BOOLEAN;
    signal i_cast_fu_737_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal i_cast_reg_1256 : STD_LOGIC_VECTOR (12 downto 0);
    signal i_1_fu_747_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_1_reg_1264 : STD_LOGIC_VECTOR (8 downto 0);
    signal exitcond_fu_741_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal hamming_load_reg_1274 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st3_fsm_2 : STD_LOGIC;
    signal ap_sig_277 : BOOLEAN;
    signal j_1_fu_764_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal j_1_reg_1282 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_sig_cseq_ST_st4_fsm_3 : STD_LOGIC;
    signal ap_sig_286 : BOOLEAN;
    signal next_mul_fu_770_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal next_mul_reg_1287 : STD_LOGIC_VECTOR (12 downto 0);
    signal exitcond2_fu_758_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_26_fu_790_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_26_reg_1297 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_sig_cseq_ST_st5_fsm_4 : STD_LOGIC;
    signal ap_sig_303 : BOOLEAN;
    signal next_mul5_fu_800_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal next_mul5_reg_1307 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_sig_cseq_ST_st9_fsm_8 : STD_LOGIC;
    signal ap_sig_312 : BOOLEAN;
    signal i_2_fu_812_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_2_reg_1315 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_5_cast_fu_818_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_5_cast_reg_1320 : STD_LOGIC_VECTOR (14 downto 0);
    signal exitcond1_fu_806_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_2_fu_828_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal j_2_reg_1328 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_sig_cseq_ST_st10_fsm_9 : STD_LOGIC;
    signal ap_sig_328 : BOOLEAN;
    signal tmp_33_fu_850_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_33_reg_1333 : STD_LOGIC_VECTOR (14 downto 0);
    signal exitcond3_fu_822_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_fu_870_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_cseq_ST_st12_fsm_11 : STD_LOGIC;
    signal ap_sig_344 : BOOLEAN;
    signal tmp_12_fu_887_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_cseq_ST_st13_fsm_12 : STD_LOGIC;
    signal ap_sig_353 : BOOLEAN;
    signal i_4_fu_910_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_4_reg_1362 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_sig_cseq_ST_st14_fsm_13 : STD_LOGIC;
    signal ap_sig_362 : BOOLEAN;
    signal fft_config_data_V_empty_n : STD_LOGIC;
    signal exitcond4_fu_904_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal fft_config_data_V_full_n : STD_LOGIC;
    signal ap_sig_379 : BOOLEAN;
    signal tmp_47_cast_fu_937_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_47_cast_reg_1367 : STD_LOGIC_VECTOR (14 downto 0);
    signal j_3_fu_947_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal j_3_reg_1376 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_sig_cseq_ST_st15_fsm_14 : STD_LOGIC;
    signal ap_sig_392 : BOOLEAN;
    signal exitcond6_fu_941_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_4_fu_991_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal j_4_reg_1389 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_sig_cseq_ST_st18_fsm_17 : STD_LOGIC;
    signal ap_sig_406 : BOOLEAN;
    signal tmp_45_fu_1006_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_45_reg_1394 : STD_LOGIC_VECTOR (14 downto 0);
    signal exitcond8_fu_985_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal frame_1_fu_1046_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal frame_1_reg_1407 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_sig_cseq_ST_st20_fsm_19 : STD_LOGIC;
    signal ap_sig_422 : BOOLEAN;
    signal tmp_17_cast_fu_1052_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_17_cast_reg_1412 : STD_LOGIC_VECTOR (9 downto 0);
    signal exitcond5_fu_1040_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_3_fu_1062_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_3_reg_1422 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_cseq_ST_st21_fsm_20 : STD_LOGIC;
    signal ap_sig_436 : BOOLEAN;
    signal exitcond7_fu_1056_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_st22_fsm_21 : STD_LOGIC;
    signal ap_sig_451 : BOOLEAN;
    signal grp_fu_690_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_21_reg_1449 : STD_LOGIC_VECTOR (31 downto 0);
    signal next_mul7_fu_1087_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal next_mul7_reg_1454 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_sig_cseq_ST_st32_fsm_31 : STD_LOGIC;
    signal ap_sig_463 : BOOLEAN;
    signal j8_cast7_fu_1093_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal j8_cast7_reg_1459 : STD_LOGIC_VECTOR (7 downto 0);
    signal j_5_fu_1103_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal j_5_reg_1467 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_shl_fu_1109_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_shl_reg_1472 : STD_LOGIC_VECTOR (11 downto 0);
    signal exitcond9_fu_1097_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal x_1_fu_1123_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal x_1_reg_1480 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_cseq_ST_st33_fsm_32 : STD_LOGIC;
    signal ap_sig_481 : BOOLEAN;
    signal exitcond11_fu_1117_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_st34_fsm_33 : STD_LOGIC;
    signal ap_sig_496 : BOOLEAN;
    signal z2_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st42_fsm_41 : STD_LOGIC;
    signal ap_sig_506 : BOOLEAN;
    signal tmp_47_fu_1153_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_47_reg_1510 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_sig_cseq_ST_st48_fsm_47 : STD_LOGIC;
    signal ap_sig_515 : BOOLEAN;
    signal grp_fu_711_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i_reg_1515 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st54_fsm_53 : STD_LOGIC;
    signal ap_sig_524 : BOOLEAN;
    signal next_mul1_fu_1162_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal next_mul1_reg_1520 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_sig_cseq_ST_st56_fsm_55 : STD_LOGIC;
    signal ap_sig_533 : BOOLEAN;
    signal k_cast3_fu_1168_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal k_1_fu_1179_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal k_1_reg_1533 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_24_fu_1185_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_24_reg_1538 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond10_fu_1173_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_s_fu_1191_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_s_reg_1543 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st61_fsm_60 : STD_LOGIC;
    signal ap_sig_551 : BOOLEAN;
    signal grp_fu_708_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_25_reg_1548 : STD_LOGIC_VECTOR (31 downto 0);
    signal n1_cast2_fu_1198_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st62_fsm_61 : STD_LOGIC;
    signal ap_sig_562 : BOOLEAN;
    signal n_fu_1209_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal n_reg_1561 : STD_LOGIC_VECTOR (4 downto 0);
    signal next_mul9_fu_1215_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal next_mul9_reg_1566 : STD_LOGIC_VECTOR (9 downto 0);
    signal exitcond12_fu_1203_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_49_fu_1221_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_49_reg_1571 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_48_fu_1226_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_48_reg_1576 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_34_reg_1581 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st67_fsm_66 : STD_LOGIC;
    signal ap_sig_583 : BOOLEAN;
    signal grp_fu_703_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_x_assign_2_reg_1586 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st100_fsm_99 : STD_LOGIC;
    signal ap_sig_592 : BOOLEAN;
    signal ap_sig_cseq_ST_st102_fsm_101 : STD_LOGIC;
    signal ap_sig_601 : BOOLEAN;
    signal grp_dut_sinf_or_cosf_fu_654_ap_done : STD_LOGIC;
    signal grp_dut_sinf_or_cosf_fu_654_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i_i_i_i_reg_1596 : STD_LOGIC_VECTOR (31 downto 0);
    signal z_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st103_fsm_102 : STD_LOGIC;
    signal ap_sig_616 : BOOLEAN;
    signal ap_sig_cseq_ST_st111_fsm_110 : STD_LOGIC;
    signal ap_sig_624 : BOOLEAN;
    signal xn_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal xn_ce0 : STD_LOGIC;
    signal xn_we0 : STD_LOGIC;
    signal xn_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal xk_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal xk_ce0 : STD_LOGIC;
    signal xk_we0 : STD_LOGIC;
    signal xk_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal M_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal M_ce0 : STD_LOGIC;
    signal M_we0 : STD_LOGIC;
    signal M_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal z_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal z_ce0 : STD_LOGIC;
    signal z_we0 : STD_LOGIC;
    signal z2_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal z2_ce0 : STD_LOGIC;
    signal z2_we0 : STD_LOGIC;
    signal X_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal X_ce0 : STD_LOGIC;
    signal X_we0 : STD_LOGIC;
    signal X_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_dut_knn_fu_647_ap_start : STD_LOGIC;
    signal grp_dut_knn_fu_647_ap_done : STD_LOGIC;
    signal grp_dut_knn_fu_647_ap_idle : STD_LOGIC;
    signal grp_dut_knn_fu_647_ap_ready : STD_LOGIC;
    signal grp_dut_knn_fu_647_input_r_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_dut_knn_fu_647_input_r_ce0 : STD_LOGIC;
    signal grp_dut_knn_fu_647_ap_return : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_dut_sinf_or_cosf_fu_654_ap_start : STD_LOGIC;
    signal grp_dut_sinf_or_cosf_fu_654_ap_idle : STD_LOGIC;
    signal grp_dut_sinf_or_cosf_fu_654_ap_ready : STD_LOGIC;
    signal grp_fft_config1_s_fu_667_ap_start : STD_LOGIC;
    signal grp_fft_config1_s_fu_667_ap_ce : STD_LOGIC;
    signal grp_fft_config1_s_fu_667_ap_done : STD_LOGIC;
    signal grp_fft_config1_s_fu_667_ap_idle : STD_LOGIC;
    signal grp_fft_config1_s_fu_667_ap_ready : STD_LOGIC;
    signal grp_fft_config1_s_fu_667_xn_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fft_config1_s_fu_667_xn_ce0 : STD_LOGIC;
    signal grp_fft_config1_s_fu_667_xn_we0 : STD_LOGIC;
    signal grp_fft_config1_s_fu_667_xn_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fft_config1_s_fu_667_xn_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fft_config1_s_fu_667_xn_ce1 : STD_LOGIC;
    signal grp_fft_config1_s_fu_667_xn_we1 : STD_LOGIC;
    signal grp_fft_config1_s_fu_667_xn_d1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fft_config1_s_fu_667_xk_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fft_config1_s_fu_667_xk_ce0 : STD_LOGIC;
    signal grp_fft_config1_s_fu_667_xk_we0 : STD_LOGIC;
    signal grp_fft_config1_s_fu_667_xk_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fft_config1_s_fu_667_xk_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fft_config1_s_fu_667_xk_ce1 : STD_LOGIC;
    signal grp_fft_config1_s_fu_667_xk_we1 : STD_LOGIC;
    signal grp_fft_config1_s_fu_667_xk_d1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fft_config1_s_fu_667_status_data_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fft_config1_s_fu_667_status_data_V_write : STD_LOGIC;
    signal grp_fft_config1_s_fu_667_config_ch_data_V_read : STD_LOGIC;
    signal ap_sig_cseq_ST_st17_fsm_16 : STD_LOGIC;
    signal ap_sig_739 : BOOLEAN;
    signal i_reg_385 : STD_LOGIC_VECTOR (8 downto 0);
    signal phi_mul2_reg_396 : STD_LOGIC_VECTOR (13 downto 0);
    signal j_reg_408 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_sig_cseq_ST_st8_fsm_7 : STD_LOGIC;
    signal ap_sig_760 : BOOLEAN;
    signal phi_mul_reg_419 : STD_LOGIC_VECTOR (12 downto 0);
    signal i1_reg_430 : STD_LOGIC_VECTOR (8 downto 0);
    signal phi_mul4_reg_441 : STD_LOGIC_VECTOR (13 downto 0);
    signal j2_reg_453 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_sig_cseq_ST_st11_fsm_10 : STD_LOGIC;
    signal ap_sig_781 : BOOLEAN;
    signal tmp_1_reg_464 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_10_fu_881_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_11_reg_475 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_15_fu_898_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i4_reg_486 : STD_LOGIC_VECTOR (5 downto 0);
    signal j5_reg_497 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_sig_cseq_ST_st16_fsm_15 : STD_LOGIC;
    signal ap_sig_811 : BOOLEAN;
    signal j6_reg_509 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_sig_cseq_ST_st19_fsm_18 : STD_LOGIC;
    signal ap_sig_822 : BOOLEAN;
    signal frame_reg_520 : STD_LOGIC_VECTOR (5 downto 0);
    signal i7_reg_532 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_cseq_ST_st31_fsm_30 : STD_LOGIC;
    signal ap_sig_837 : BOOLEAN;
    signal j8_reg_544 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_sig_cseq_ST_st55_fsm_54 : STD_LOGIC;
    signal ap_sig_846 : BOOLEAN;
    signal phi_mul6_reg_555 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_x_assign_reg_567 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_reg_579 : STD_LOGIC_VECTOR (7 downto 0);
    signal k_reg_590 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_sig_cseq_ST_st114_fsm_113 : STD_LOGIC;
    signal ap_sig_865 : BOOLEAN;
    signal phi_mul1_reg_601 : STD_LOGIC_VECTOR (9 downto 0);
    signal sum9_reg_613 : STD_LOGIC_VECTOR (31 downto 0);
    signal n1_reg_625 : STD_LOGIC_VECTOR (4 downto 0);
    signal phi_mul8_reg_636 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_reg_grp_dut_knn_fu_647_ap_start : STD_LOGIC := '0';
    signal ap_sig_cseq_ST_st115_fsm_114 : STD_LOGIC;
    signal ap_sig_886 : BOOLEAN;
    signal ap_reg_grp_dut_sinf_or_cosf_fu_654_ap_start : STD_LOGIC := '0';
    signal ap_sig_cseq_ST_st101_fsm_100 : STD_LOGIC;
    signal ap_sig_903 : BOOLEAN;
    signal ap_reg_grp_fft_config1_s_fu_667_ap_start : STD_LOGIC := '0';
    signal tmp_4_fu_753_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_9_fu_781_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_41_cast_fu_796_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_45_cast_fu_861_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_44_cast_fu_866_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_3_fu_876_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_13_fu_893_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_48_cast_fu_962_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_18_fu_967_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_23_fu_997_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_51_cast_fu_1011_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_44_fu_1076_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_19_fu_1082_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_28_fu_1143_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_29_fu_1148_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_53_cast_fu_1158_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_57_cast_fu_1231_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_55_cast_fu_1235_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal xn_M_imag_addr_23941_part_set_fu_976_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_675_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_675_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st26_fsm_25 : STD_LOGIC;
    signal ap_sig_1005 : BOOLEAN;
    signal ap_sig_cseq_ST_st38_fsm_37 : STD_LOGIC;
    signal ap_sig_1012 : BOOLEAN;
    signal ap_sig_cseq_ST_st72_fsm_71 : STD_LOGIC;
    signal ap_sig_1019 : BOOLEAN;
    signal ap_sig_cseq_ST_st107_fsm_106 : STD_LOGIC;
    signal ap_sig_1027 : BOOLEAN;
    signal grp_fu_682_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_682_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st68_fsm_67 : STD_LOGIC;
    signal ap_sig_1039 : BOOLEAN;
    signal ap_sig_cseq_ST_st77_fsm_76 : STD_LOGIC;
    signal ap_sig_1046 : BOOLEAN;
    signal ap_sig_cseq_ST_st81_fsm_80 : STD_LOGIC;
    signal ap_sig_1053 : BOOLEAN;
    signal ap_sig_cseq_ST_st85_fsm_84 : STD_LOGIC;
    signal ap_sig_1065 : BOOLEAN;
    signal grp_fu_708_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_fu_776_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_6_cast_fu_786_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_32_fu_838_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_43_cast_fu_846_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_14_cast_fu_834_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_40_fu_855_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_41_fu_929_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_18_cast_fu_953_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_42_fu_957_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal xn_input_M_real_load_toint_fu_972_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_23_cast_fu_1002_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_46_fu_1016_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal xk_M_imag_load_new_fu_1025_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_43_fu_1068_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp1_fu_1129_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp1_cast_fu_1134_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_27_fu_1138_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_return_preg : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (114 downto 0);

    component dut_knn IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        input_r_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        input_r_ce0 : OUT STD_LOGIC;
        input_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component dut_sinf_or_cosf IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        t_in : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component fft_config1_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ce : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        xn_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        xn_ce0 : OUT STD_LOGIC;
        xn_we0 : OUT STD_LOGIC;
        xn_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        xn_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        xn_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        xn_ce1 : OUT STD_LOGIC;
        xn_we1 : OUT STD_LOGIC;
        xn_d1 : OUT STD_LOGIC_VECTOR (63 downto 0);
        xn_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
        xk_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        xk_ce0 : OUT STD_LOGIC;
        xk_we0 : OUT STD_LOGIC;
        xk_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        xk_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        xk_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        xk_ce1 : OUT STD_LOGIC;
        xk_we1 : OUT STD_LOGIC;
        xk_d1 : OUT STD_LOGIC_VECTOR (63 downto 0);
        xk_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
        status_data_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        status_data_V_full_n : IN STD_LOGIC;
        status_data_V_write : OUT STD_LOGIC;
        config_ch_data_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        config_ch_data_V_empty_n : IN STD_LOGIC;
        config_ch_data_V_read : OUT STD_LOGIC );
    end component;


    component dut_fadd_32ns_32ns_32_5_full_dsp IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component dut_fmul_32ns_32ns_32_4_max_dsp IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component dut_fdiv_32ns_32ns_32_16 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component dut_sitofp_32ns_32_6 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component dut_flog_32ns_32ns_32_13_full_dsp IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component dut_mfcc_hamming IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component dut_mfcc_xn_input_M_real IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (13 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component dut_mfcc_melfb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component dut_mfcc_xn IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component dut_mfcc_xk IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (63 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component dut_mfcc_M IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (13 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component dut_mfcc_z IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component dut_mfcc_z2 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    hamming_U : component dut_mfcc_hamming
    generic map (
        DataWidth => 32,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => hamming_address0,
        ce0 => hamming_ce0,
        q0 => hamming_q0);

    xn_input_M_real_U : component dut_mfcc_xn_input_M_real
    generic map (
        DataWidth => 32,
        AddressRange => 12544,
        AddressWidth => 14)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => xn_input_M_real_address0,
        ce0 => xn_input_M_real_ce0,
        we0 => xn_input_M_real_we0,
        d0 => M_q0,
        q0 => xn_input_M_real_q0);

    xk_output_M_real_U : component dut_mfcc_xn_input_M_real
    generic map (
        DataWidth => 32,
        AddressRange => 12544,
        AddressWidth => 14)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => xk_output_M_real_address0,
        ce0 => xk_output_M_real_ce0,
        we0 => xk_output_M_real_we0,
        d0 => xk_output_M_real_d0,
        q0 => xk_output_M_real_q0);

    xk_output_M_imag_U : component dut_mfcc_xn_input_M_real
    generic map (
        DataWidth => 32,
        AddressRange => 12544,
        AddressWidth => 14)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => xk_output_M_imag_address0,
        ce0 => xk_output_M_imag_ce0,
        we0 => xk_output_M_imag_we0,
        d0 => xk_output_M_imag_d0,
        q0 => xk_output_M_imag_q0);

    melfb_U : component dut_mfcc_melfb
    generic map (
        DataWidth => 32,
        AddressRange => 2580,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => melfb_address0,
        ce0 => melfb_ce0,
        q0 => melfb_q0);

    xn_U : component dut_mfcc_xn
    generic map (
        DataWidth => 64,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => xn_address0,
        ce0 => xn_ce0,
        we0 => xn_we0,
        d0 => xn_d0);

    xk_U : component dut_mfcc_xk
    generic map (
        DataWidth => 64,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => xk_address0,
        ce0 => xk_ce0,
        we0 => xk_we0,
        d0 => ap_const_lv64_0,
        q0 => xk_q0);

    M_U : component dut_mfcc_M
    generic map (
        DataWidth => 32,
        AddressRange => 12544,
        AddressWidth => 14)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => M_address0,
        ce0 => M_ce0,
        we0 => M_we0,
        d0 => grp_fu_682_p2,
        q0 => M_q0);

    z_U : component dut_mfcc_z
    generic map (
        DataWidth => 32,
        AddressRange => 980,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => z_address0,
        ce0 => z_ce0,
        we0 => z_we0,
        d0 => tmp_i_reg_1515,
        q0 => z_q0);

    z2_U : component dut_mfcc_z2
    generic map (
        DataWidth => 32,
        AddressRange => 129,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => z2_address0,
        ce0 => z2_ce0,
        we0 => z2_we0,
        d0 => reg_725,
        q0 => z2_q0);

    X_U : component dut_mfcc_z
    generic map (
        DataWidth => 32,
        AddressRange => 980,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => X_address0,
        ce0 => X_ce0,
        we0 => X_we0,
        d0 => grp_fu_682_p2,
        q0 => X_q0);

    grp_dut_knn_fu_647 : component dut_knn
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_dut_knn_fu_647_ap_start,
        ap_done => grp_dut_knn_fu_647_ap_done,
        ap_idle => grp_dut_knn_fu_647_ap_idle,
        ap_ready => grp_dut_knn_fu_647_ap_ready,
        input_r_address0 => grp_dut_knn_fu_647_input_r_address0,
        input_r_ce0 => grp_dut_knn_fu_647_input_r_ce0,
        input_r_q0 => X_q0,
        ap_return => grp_dut_knn_fu_647_ap_return);

    grp_dut_sinf_or_cosf_fu_654 : component dut_sinf_or_cosf
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_dut_sinf_or_cosf_fu_654_ap_start,
        ap_done => grp_dut_sinf_or_cosf_fu_654_ap_done,
        ap_idle => grp_dut_sinf_or_cosf_fu_654_ap_idle,
        ap_ready => grp_dut_sinf_or_cosf_fu_654_ap_ready,
        t_in => p_x_assign_2_reg_1586,
        ap_return => grp_dut_sinf_or_cosf_fu_654_ap_return);

    grp_fft_config1_s_fu_667 : component fft_config1_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_fft_config1_s_fu_667_ap_start,
        ap_ce => grp_fft_config1_s_fu_667_ap_ce,
        ap_done => grp_fft_config1_s_fu_667_ap_done,
        ap_idle => grp_fft_config1_s_fu_667_ap_idle,
        ap_ready => grp_fft_config1_s_fu_667_ap_ready,
        xn_address0 => grp_fft_config1_s_fu_667_xn_address0,
        xn_ce0 => grp_fft_config1_s_fu_667_xn_ce0,
        xn_we0 => grp_fft_config1_s_fu_667_xn_we0,
        xn_d0 => grp_fft_config1_s_fu_667_xn_d0,
        xn_q0 => ap_const_lv64_0,
        xn_address1 => grp_fft_config1_s_fu_667_xn_address1,
        xn_ce1 => grp_fft_config1_s_fu_667_xn_ce1,
        xn_we1 => grp_fft_config1_s_fu_667_xn_we1,
        xn_d1 => grp_fft_config1_s_fu_667_xn_d1,
        xn_q1 => ap_const_lv64_0,
        xk_address0 => grp_fft_config1_s_fu_667_xk_address0,
        xk_ce0 => grp_fft_config1_s_fu_667_xk_ce0,
        xk_we0 => grp_fft_config1_s_fu_667_xk_we0,
        xk_d0 => grp_fft_config1_s_fu_667_xk_d0,
        xk_q0 => ap_const_lv64_0,
        xk_address1 => grp_fft_config1_s_fu_667_xk_address1,
        xk_ce1 => grp_fft_config1_s_fu_667_xk_ce1,
        xk_we1 => grp_fft_config1_s_fu_667_xk_we1,
        xk_d1 => grp_fft_config1_s_fu_667_xk_d1,
        xk_q1 => ap_const_lv64_0,
        status_data_V_din => grp_fft_config1_s_fu_667_status_data_V_din,
        status_data_V_full_n => ap_const_logic_1,
        status_data_V_write => grp_fft_config1_s_fu_667_status_data_V_write,
        config_ch_data_V_dout => ap_const_lv16_0,
        config_ch_data_V_empty_n => ap_const_logic_1,
        config_ch_data_V_read => grp_fft_config1_s_fu_667_config_ch_data_V_read);

    dut_fadd_32ns_32ns_32_5_full_dsp_U23 : component dut_fadd_32ns_32ns_32_5_full_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_675_p0,
        din1 => grp_fu_675_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_675_p2);

    dut_fmul_32ns_32ns_32_4_max_dsp_U24 : component dut_fmul_32ns_32ns_32_4_max_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_682_p0,
        din1 => grp_fu_682_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_682_p2);

    dut_fmul_32ns_32ns_32_4_max_dsp_U25 : component dut_fmul_32ns_32ns_32_4_max_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => xk_output_M_imag_q0,
        din1 => xk_output_M_imag_q0,
        ce => ap_const_logic_1,
        dout => grp_fu_690_p2);

    dut_fdiv_32ns_32ns_32_16_U26 : component dut_fdiv_32ns_32ns_32_16
    generic map (
        ID => 1,
        NUM_STAGE => 16,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_717,
        din1 => ap_const_lv32_42200000,
        ce => ap_const_logic_1,
        dout => grp_fu_703_p2);

    dut_sitofp_32ns_32_6_U27 : component dut_sitofp_32ns_32_6
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_708_p0,
        ce => ap_const_logic_1,
        dout => grp_fu_708_p1);

    dut_flog_32ns_32ns_32_13_full_dsp_U28 : component dut_flog_32ns_32ns_32_13_full_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 13,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => ap_const_lv32_0,
        din1 => p_x_assign_reg_567,
        ce => ap_const_logic_1,
        dout => grp_fu_711_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_reg_grp_dut_knn_fu_647_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_grp_dut_knn_fu_647_ap_start <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_st20_fsm_19) and not((ap_const_lv1_0 = exitcond5_fu_1040_p2)))) then 
                    ap_reg_grp_dut_knn_fu_647_ap_start <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_dut_knn_fu_647_ap_ready)) then 
                    ap_reg_grp_dut_knn_fu_647_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_grp_dut_sinf_or_cosf_fu_654_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_grp_dut_sinf_or_cosf_fu_654_ap_start <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_cseq_ST_st101_fsm_100)) then 
                    ap_reg_grp_dut_sinf_or_cosf_fu_654_ap_start <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_dut_sinf_or_cosf_fu_654_ap_ready)) then 
                    ap_reg_grp_dut_sinf_or_cosf_fu_654_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_grp_fft_config1_s_fu_667_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_grp_fft_config1_s_fu_667_ap_start <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_st15_fsm_14) and not((ap_const_lv1_0 = exitcond6_fu_941_p2)))) then 
                    ap_reg_grp_fft_config1_s_fu_667_ap_start <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_fft_config1_s_fu_667_ap_ready)) then 
                    ap_reg_grp_fft_config1_s_fu_667_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_return_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_preg <= ap_const_lv1_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_st115_fsm_114) and not((ap_const_logic_0 = grp_dut_knn_fu_647_ap_done)))) then 
                    ap_return_preg <= grp_dut_knn_fu_647_ap_return;
                end if; 
            end if;
        end if;
    end process;


    frame_reg_520_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st56_fsm_55) and not((ap_const_lv1_0 = exitcond10_fu_1173_p2)))) then 
                frame_reg_520 <= frame_1_reg_1407;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st14_fsm_13) and not(ap_sig_379) and not((ap_const_lv1_0 = exitcond4_fu_904_p2)))) then 
                frame_reg_520 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    i1_reg_430_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9) and not((ap_const_lv1_0 = exitcond3_fu_822_p2)))) then 
                i1_reg_430 <= i_2_reg_1315;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((exitcond_fu_741_p2 = ap_const_lv1_0)))) then 
                i1_reg_430 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    i4_reg_486_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st13_fsm_12) and not((ap_const_lv1_0 = tmp_15_fu_898_p2)))) then 
                i4_reg_486 <= ap_const_lv6_0;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st18_fsm_17) and not((ap_const_lv1_0 = exitcond8_fu_985_p2)))) then 
                i4_reg_486 <= i_4_reg_1362;
            end if; 
        end if;
    end process;

    i7_reg_532_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st20_fsm_19) and (ap_const_lv1_0 = exitcond5_fu_1040_p2))) then 
                i7_reg_532 <= ap_const_lv8_0;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st31_fsm_30)) then 
                i7_reg_532 <= i_3_reg_1422;
            end if; 
        end if;
    end process;

    i_reg_385_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and not((ap_const_lv1_0 = exitcond2_fu_758_p2)))) then 
                i_reg_385 <= i_1_reg_1264;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                i_reg_385 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    j2_reg_453_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8) and (ap_const_lv1_0 = exitcond1_fu_806_p2))) then 
                j2_reg_453 <= ap_const_lv6_0;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_10)) then 
                j2_reg_453 <= j_2_reg_1328;
            end if; 
        end if;
    end process;

    j5_reg_497_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st16_fsm_15)) then 
                j5_reg_497 <= j_3_reg_1376;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st14_fsm_13) and (ap_const_lv1_0 = exitcond4_fu_904_p2) and not(ap_sig_379))) then 
                j5_reg_497 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    j6_reg_509_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st19_fsm_18)) then 
                j6_reg_509 <= j_4_reg_1389;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st17_fsm_16) and not((ap_const_logic_0 = grp_fft_config1_s_fu_667_ap_done)))) then 
                j6_reg_509 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    j8_reg_544_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st21_fsm_20) and not((ap_const_lv1_0 = exitcond7_fu_1056_p2)))) then 
                j8_reg_544 <= ap_const_lv5_0;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st55_fsm_54)) then 
                j8_reg_544 <= j_5_reg_1467;
            end if; 
        end if;
    end process;

    j_reg_408_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
                j_reg_408 <= ap_const_lv6_0;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7)) then 
                j_reg_408 <= j_1_reg_1282;
            end if; 
        end if;
    end process;

    k_reg_590_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st32_fsm_31) and not((ap_const_lv1_0 = exitcond9_fu_1097_p2)))) then 
                k_reg_590 <= ap_const_lv5_0;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st114_fsm_113)) then 
                k_reg_590 <= k_1_reg_1533;
            end if; 
        end if;
    end process;

    n1_reg_625_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st111_fsm_110)) then 
                n1_reg_625 <= n_reg_1561;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st61_fsm_60)) then 
                n1_reg_625 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    p_x_assign_reg_567_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st32_fsm_31) and (ap_const_lv1_0 = exitcond9_fu_1097_p2))) then 
                p_x_assign_reg_567 <= ap_const_lv32_0;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st42_fsm_41)) then 
                p_x_assign_reg_567 <= grp_fu_675_p2;
            end if; 
        end if;
    end process;

    phi_mul1_reg_601_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st32_fsm_31) and not((ap_const_lv1_0 = exitcond9_fu_1097_p2)))) then 
                phi_mul1_reg_601 <= ap_const_lv10_0;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st114_fsm_113)) then 
                phi_mul1_reg_601 <= next_mul1_reg_1520;
            end if; 
        end if;
    end process;

    phi_mul2_reg_396_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and not((ap_const_lv1_0 = exitcond2_fu_758_p2)))) then 
                phi_mul2_reg_396 <= next_mul3_reg_1251;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                phi_mul2_reg_396 <= ap_const_lv14_0;
            end if; 
        end if;
    end process;

    phi_mul4_reg_441_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9) and not((ap_const_lv1_0 = exitcond3_fu_822_p2)))) then 
                phi_mul4_reg_441 <= next_mul5_reg_1307;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((exitcond_fu_741_p2 = ap_const_lv1_0)))) then 
                phi_mul4_reg_441 <= ap_const_lv14_0;
            end if; 
        end if;
    end process;

    phi_mul6_reg_555_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st21_fsm_20) and not((ap_const_lv1_0 = exitcond7_fu_1056_p2)))) then 
                phi_mul6_reg_555 <= ap_const_lv10_0;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st55_fsm_54)) then 
                phi_mul6_reg_555 <= next_mul7_reg_1454;
            end if; 
        end if;
    end process;

    phi_mul8_reg_636_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st111_fsm_110)) then 
                phi_mul8_reg_636 <= next_mul9_reg_1566;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st61_fsm_60)) then 
                phi_mul8_reg_636 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    phi_mul_reg_419_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
                phi_mul_reg_419 <= ap_const_lv13_0;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7)) then 
                phi_mul_reg_419 <= next_mul_reg_1287;
            end if; 
        end if;
    end process;

    sum9_reg_613_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st111_fsm_110)) then 
                sum9_reg_613 <= grp_fu_675_p2;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st61_fsm_60)) then 
                sum9_reg_613 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    tmp_11_reg_475_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_11) and not((ap_const_lv1_0 = tmp_10_fu_881_p2)))) then 
                tmp_11_reg_475 <= ap_const_lv8_0;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st13_fsm_12) and (ap_const_lv1_0 = tmp_15_fu_898_p2))) then 
                tmp_11_reg_475 <= tmp_12_fu_887_p2;
            end if; 
        end if;
    end process;

    tmp_1_reg_464_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8) and not((ap_const_lv1_0 = exitcond1_fu_806_p2)))) then 
                tmp_1_reg_464 <= ap_const_lv8_0;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_11) and (ap_const_lv1_0 = tmp_10_fu_881_p2))) then 
                tmp_1_reg_464 <= tmp_2_fu_870_p2;
            end if; 
        end if;
    end process;

    x_reg_579_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st32_fsm_31) and (ap_const_lv1_0 = exitcond9_fu_1097_p2))) then 
                x_reg_579 <= ap_const_lv8_0;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st42_fsm_41)) then 
                x_reg_579 <= x_1_reg_1480;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st20_fsm_19)) then
                frame_1_reg_1407 <= frame_1_fu_1046_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then
                hamming_load_reg_1274 <= hamming_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then
                i_1_reg_1264 <= i_1_fu_747_p2;
                    i_cast_reg_1256(8 downto 0) <= i_cast_fu_737_p1(8 downto 0);
                next_mul3_reg_1251 <= next_mul3_fu_731_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8)) then
                i_2_reg_1315 <= i_2_fu_812_p2;
                next_mul5_reg_1307 <= next_mul5_fu_800_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st21_fsm_20)) then
                i_3_reg_1422 <= i_3_fu_1062_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st14_fsm_13) and not(ap_sig_379))) then
                i_4_reg_1362 <= i_4_fu_910_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st32_fsm_31)) then
                    j8_cast7_reg_1459(4 downto 0) <= j8_cast7_fu_1093_p1(4 downto 0);
                j_5_reg_1467 <= j_5_fu_1103_p2;
                next_mul7_reg_1454 <= next_mul7_fu_1087_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then
                j_1_reg_1282 <= j_1_fu_764_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9)) then
                j_2_reg_1328 <= j_2_fu_828_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st15_fsm_14)) then
                j_3_reg_1376 <= j_3_fu_947_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st18_fsm_17)) then
                j_4_reg_1389 <= j_4_fu_991_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st56_fsm_55)) then
                k_1_reg_1533 <= k_1_fu_1179_p2;
                next_mul1_reg_1520 <= next_mul1_fu_1162_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st62_fsm_61)) then
                n_reg_1561 <= n_fu_1209_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st62_fsm_61) and (ap_const_lv1_0 = exitcond12_fu_1203_p2))) then
                next_mul9_reg_1566 <= next_mul9_fu_1215_p2;
                tmp_49_reg_1571 <= tmp_49_fu_1221_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and (ap_const_lv1_0 = exitcond2_fu_758_p2))) then
                next_mul_reg_1287 <= next_mul_fu_770_p2;
                tmp_26_reg_1297 <= tmp_26_fu_790_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st61_fsm_60)) then
                    p_s_reg_1543(0) <= p_s_fu_1191_p3(0);    p_s_reg_1543(2) <= p_s_fu_1191_p3(2);    p_s_reg_1543(5 downto 4) <= p_s_fu_1191_p3(5 downto 4);    p_s_reg_1543(8 downto 7) <= p_s_fu_1191_p3(8 downto 7);    p_s_reg_1543(12) <= p_s_fu_1191_p3(12);    p_s_reg_1543(16) <= p_s_fu_1191_p3(16);    p_s_reg_1543(18) <= p_s_fu_1191_p3(18);    p_s_reg_1543(23 downto 22) <= p_s_fu_1191_p3(23 downto 22);
                tmp_25_reg_1548 <= grp_fu_708_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st32_fsm_31) and (ap_const_lv1_0 = exitcond9_fu_1097_p2))) then
                    p_shl_reg_1472(11 downto 7) <= p_shl_fu_1109_p3(11 downto 7);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st100_fsm_99)) then
                p_x_assign_2_reg_1586 <= grp_fu_703_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st25_fsm_24) or (ap_const_logic_1 = ap_sig_cseq_ST_st37_fsm_36) or (ap_const_logic_1 = ap_sig_cseq_ST_st71_fsm_70) or (ap_const_logic_1 = ap_sig_cseq_ST_st80_fsm_79) or (ap_const_logic_1 = ap_sig_cseq_ST_st84_fsm_83) or (ap_const_logic_1 = ap_sig_cseq_ST_st106_fsm_105))) then
                reg_717 <= grp_fu_682_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st30_fsm_29) or (ap_const_logic_1 = ap_sig_cseq_ST_st76_fsm_75))) then
                reg_725 <= grp_fu_675_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st20_fsm_19) and (ap_const_lv1_0 = exitcond5_fu_1040_p2))) then
                    tmp_17_cast_reg_1412(5 downto 0) <= tmp_17_cast_fu_1052_p1(5 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st25_fsm_24)) then
                tmp_21_reg_1449 <= grp_fu_690_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st56_fsm_55) and (ap_const_lv1_0 = exitcond10_fu_1173_p2))) then
                tmp_24_reg_1538 <= tmp_24_fu_1185_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9) and (ap_const_lv1_0 = exitcond3_fu_822_p2))) then
                tmp_33_reg_1333 <= tmp_33_fu_850_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st67_fsm_66)) then
                tmp_34_reg_1581 <= grp_fu_708_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st18_fsm_17) and (ap_const_lv1_0 = exitcond8_fu_985_p2))) then
                tmp_45_reg_1394 <= tmp_45_fu_1006_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st14_fsm_13) and (ap_const_lv1_0 = exitcond4_fu_904_p2) and not(ap_sig_379))) then
                    tmp_47_cast_reg_1367(13 downto 8) <= tmp_47_cast_fu_937_p1(13 downto 8);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st48_fsm_47)) then
                tmp_47_reg_1510 <= tmp_47_fu_1153_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st62_fsm_61) and not((ap_const_lv1_0 = exitcond12_fu_1203_p2)))) then
                tmp_48_reg_1576 <= tmp_48_fu_1226_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8) and (ap_const_lv1_0 = exitcond1_fu_806_p2))) then
                    tmp_5_cast_reg_1320(8 downto 0) <= tmp_5_cast_fu_818_p1(8 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st102_fsm_101) and not((ap_const_logic_0 = grp_dut_sinf_or_cosf_fu_654_ap_done)))) then
                tmp_i_i_i_i_reg_1596 <= grp_dut_sinf_or_cosf_fu_654_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st54_fsm_53)) then
                tmp_i_reg_1515 <= grp_fu_711_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st33_fsm_32)) then
                x_1_reg_1480 <= x_1_fu_1123_p2;
            end if;
        end if;
    end process;
    i_cast_reg_1256(12 downto 9) <= "0000";
    tmp_5_cast_reg_1320(14 downto 9) <= "000000";
    tmp_47_cast_reg_1367(7 downto 0) <= "00000000";
    tmp_47_cast_reg_1367(14) <= '0';
    tmp_17_cast_reg_1412(9 downto 6) <= "0000";
    j8_cast7_reg_1459(7 downto 5) <= "000";
    p_shl_reg_1472(6 downto 0) <= "0000000";
    p_s_reg_1543(1) <= '1';
    p_s_reg_1543(3 downto 3) <= "1";
    p_s_reg_1543(6 downto 6) <= "0";
    p_s_reg_1543(11 downto 9) <= "100";
    p_s_reg_1543(15 downto 13) <= "111";
    p_s_reg_1543(17 downto 17) <= "0";
    p_s_reg_1543(21 downto 19) <= "100";
    p_s_reg_1543(31 downto 24) <= "00111110";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, exitcond_fu_741_p2, exitcond2_fu_758_p2, exitcond1_fu_806_p2, exitcond3_fu_822_p2, exitcond4_fu_904_p2, ap_sig_379, exitcond6_fu_941_p2, exitcond8_fu_985_p2, exitcond5_fu_1040_p2, exitcond7_fu_1056_p2, exitcond9_fu_1097_p2, exitcond11_fu_1117_p2, exitcond10_fu_1173_p2, exitcond12_fu_1203_p2, grp_dut_sinf_or_cosf_fu_654_ap_done, grp_dut_knn_fu_647_ap_done, grp_fft_config1_s_fu_667_ap_done, tmp_10_fu_881_p2, tmp_15_fu_898_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                if (not((exitcond_fu_741_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_st9_fsm_8;
                else
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                end if;
            when ap_ST_st3_fsm_2 => 
                ap_NS_fsm <= ap_ST_st4_fsm_3;
            when ap_ST_st4_fsm_3 => 
                if ((ap_const_lv1_0 = exitcond2_fu_758_p2)) then
                    ap_NS_fsm <= ap_ST_st5_fsm_4;
                else
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                end if;
            when ap_ST_st5_fsm_4 => 
                ap_NS_fsm <= ap_ST_st6_fsm_5;
            when ap_ST_st6_fsm_5 => 
                ap_NS_fsm <= ap_ST_st7_fsm_6;
            when ap_ST_st7_fsm_6 => 
                ap_NS_fsm <= ap_ST_st8_fsm_7;
            when ap_ST_st8_fsm_7 => 
                ap_NS_fsm <= ap_ST_st4_fsm_3;
            when ap_ST_st9_fsm_8 => 
                if ((ap_const_lv1_0 = exitcond1_fu_806_p2)) then
                    ap_NS_fsm <= ap_ST_st10_fsm_9;
                else
                    ap_NS_fsm <= ap_ST_st12_fsm_11;
                end if;
            when ap_ST_st10_fsm_9 => 
                if ((ap_const_lv1_0 = exitcond3_fu_822_p2)) then
                    ap_NS_fsm <= ap_ST_st11_fsm_10;
                else
                    ap_NS_fsm <= ap_ST_st9_fsm_8;
                end if;
            when ap_ST_st11_fsm_10 => 
                ap_NS_fsm <= ap_ST_st10_fsm_9;
            when ap_ST_st12_fsm_11 => 
                if (not((ap_const_lv1_0 = tmp_10_fu_881_p2))) then
                    ap_NS_fsm <= ap_ST_st13_fsm_12;
                else
                    ap_NS_fsm <= ap_ST_st12_fsm_11;
                end if;
            when ap_ST_st13_fsm_12 => 
                if (not((ap_const_lv1_0 = tmp_15_fu_898_p2))) then
                    ap_NS_fsm <= ap_ST_st14_fsm_13;
                else
                    ap_NS_fsm <= ap_ST_st13_fsm_12;
                end if;
            when ap_ST_st14_fsm_13 => 
                if (((ap_const_lv1_0 = exitcond4_fu_904_p2) and not(ap_sig_379))) then
                    ap_NS_fsm <= ap_ST_st15_fsm_14;
                elsif ((not(ap_sig_379) and not((ap_const_lv1_0 = exitcond4_fu_904_p2)))) then
                    ap_NS_fsm <= ap_ST_st20_fsm_19;
                else
                    ap_NS_fsm <= ap_ST_st14_fsm_13;
                end if;
            when ap_ST_st15_fsm_14 => 
                if (not((ap_const_lv1_0 = exitcond6_fu_941_p2))) then
                    ap_NS_fsm <= ap_ST_st17_fsm_16;
                else
                    ap_NS_fsm <= ap_ST_st16_fsm_15;
                end if;
            when ap_ST_st16_fsm_15 => 
                ap_NS_fsm <= ap_ST_st15_fsm_14;
            when ap_ST_st17_fsm_16 => 
                if (not((ap_const_logic_0 = grp_fft_config1_s_fu_667_ap_done))) then
                    ap_NS_fsm <= ap_ST_st18_fsm_17;
                else
                    ap_NS_fsm <= ap_ST_st17_fsm_16;
                end if;
            when ap_ST_st18_fsm_17 => 
                if (not((ap_const_lv1_0 = exitcond8_fu_985_p2))) then
                    ap_NS_fsm <= ap_ST_st14_fsm_13;
                else
                    ap_NS_fsm <= ap_ST_st19_fsm_18;
                end if;
            when ap_ST_st19_fsm_18 => 
                ap_NS_fsm <= ap_ST_st18_fsm_17;
            when ap_ST_st20_fsm_19 => 
                if ((ap_const_lv1_0 = exitcond5_fu_1040_p2)) then
                    ap_NS_fsm <= ap_ST_st21_fsm_20;
                else
                    ap_NS_fsm <= ap_ST_st115_fsm_114;
                end if;
            when ap_ST_st21_fsm_20 => 
                if (not((ap_const_lv1_0 = exitcond7_fu_1056_p2))) then
                    ap_NS_fsm <= ap_ST_st32_fsm_31;
                else
                    ap_NS_fsm <= ap_ST_st22_fsm_21;
                end if;
            when ap_ST_st22_fsm_21 => 
                ap_NS_fsm <= ap_ST_st23_fsm_22;
            when ap_ST_st23_fsm_22 => 
                ap_NS_fsm <= ap_ST_st24_fsm_23;
            when ap_ST_st24_fsm_23 => 
                ap_NS_fsm <= ap_ST_st25_fsm_24;
            when ap_ST_st25_fsm_24 => 
                ap_NS_fsm <= ap_ST_st26_fsm_25;
            when ap_ST_st26_fsm_25 => 
                ap_NS_fsm <= ap_ST_st27_fsm_26;
            when ap_ST_st27_fsm_26 => 
                ap_NS_fsm <= ap_ST_st28_fsm_27;
            when ap_ST_st28_fsm_27 => 
                ap_NS_fsm <= ap_ST_st29_fsm_28;
            when ap_ST_st29_fsm_28 => 
                ap_NS_fsm <= ap_ST_st30_fsm_29;
            when ap_ST_st30_fsm_29 => 
                ap_NS_fsm <= ap_ST_st31_fsm_30;
            when ap_ST_st31_fsm_30 => 
                ap_NS_fsm <= ap_ST_st21_fsm_20;
            when ap_ST_st32_fsm_31 => 
                if ((ap_const_lv1_0 = exitcond9_fu_1097_p2)) then
                    ap_NS_fsm <= ap_ST_st33_fsm_32;
                else
                    ap_NS_fsm <= ap_ST_st56_fsm_55;
                end if;
            when ap_ST_st33_fsm_32 => 
                if (not((ap_const_lv1_0 = exitcond11_fu_1117_p2))) then
                    ap_NS_fsm <= ap_ST_st43_fsm_42;
                else
                    ap_NS_fsm <= ap_ST_st34_fsm_33;
                end if;
            when ap_ST_st34_fsm_33 => 
                ap_NS_fsm <= ap_ST_st35_fsm_34;
            when ap_ST_st35_fsm_34 => 
                ap_NS_fsm <= ap_ST_st36_fsm_35;
            when ap_ST_st36_fsm_35 => 
                ap_NS_fsm <= ap_ST_st37_fsm_36;
            when ap_ST_st37_fsm_36 => 
                ap_NS_fsm <= ap_ST_st38_fsm_37;
            when ap_ST_st38_fsm_37 => 
                ap_NS_fsm <= ap_ST_st39_fsm_38;
            when ap_ST_st39_fsm_38 => 
                ap_NS_fsm <= ap_ST_st40_fsm_39;
            when ap_ST_st40_fsm_39 => 
                ap_NS_fsm <= ap_ST_st41_fsm_40;
            when ap_ST_st41_fsm_40 => 
                ap_NS_fsm <= ap_ST_st42_fsm_41;
            when ap_ST_st42_fsm_41 => 
                ap_NS_fsm <= ap_ST_st33_fsm_32;
            when ap_ST_st43_fsm_42 => 
                ap_NS_fsm <= ap_ST_st44_fsm_43;
            when ap_ST_st44_fsm_43 => 
                ap_NS_fsm <= ap_ST_st45_fsm_44;
            when ap_ST_st45_fsm_44 => 
                ap_NS_fsm <= ap_ST_st46_fsm_45;
            when ap_ST_st46_fsm_45 => 
                ap_NS_fsm <= ap_ST_st47_fsm_46;
            when ap_ST_st47_fsm_46 => 
                ap_NS_fsm <= ap_ST_st48_fsm_47;
            when ap_ST_st48_fsm_47 => 
                ap_NS_fsm <= ap_ST_st49_fsm_48;
            when ap_ST_st49_fsm_48 => 
                ap_NS_fsm <= ap_ST_st50_fsm_49;
            when ap_ST_st50_fsm_49 => 
                ap_NS_fsm <= ap_ST_st51_fsm_50;
            when ap_ST_st51_fsm_50 => 
                ap_NS_fsm <= ap_ST_st52_fsm_51;
            when ap_ST_st52_fsm_51 => 
                ap_NS_fsm <= ap_ST_st53_fsm_52;
            when ap_ST_st53_fsm_52 => 
                ap_NS_fsm <= ap_ST_st54_fsm_53;
            when ap_ST_st54_fsm_53 => 
                ap_NS_fsm <= ap_ST_st55_fsm_54;
            when ap_ST_st55_fsm_54 => 
                ap_NS_fsm <= ap_ST_st32_fsm_31;
            when ap_ST_st56_fsm_55 => 
                if ((ap_const_lv1_0 = exitcond10_fu_1173_p2)) then
                    ap_NS_fsm <= ap_ST_st57_fsm_56;
                else
                    ap_NS_fsm <= ap_ST_st20_fsm_19;
                end if;
            when ap_ST_st57_fsm_56 => 
                ap_NS_fsm <= ap_ST_st58_fsm_57;
            when ap_ST_st58_fsm_57 => 
                ap_NS_fsm <= ap_ST_st59_fsm_58;
            when ap_ST_st59_fsm_58 => 
                ap_NS_fsm <= ap_ST_st60_fsm_59;
            when ap_ST_st60_fsm_59 => 
                ap_NS_fsm <= ap_ST_st61_fsm_60;
            when ap_ST_st61_fsm_60 => 
                ap_NS_fsm <= ap_ST_st62_fsm_61;
            when ap_ST_st62_fsm_61 => 
                if (not((ap_const_lv1_0 = exitcond12_fu_1203_p2))) then
                    ap_NS_fsm <= ap_ST_st112_fsm_111;
                else
                    ap_NS_fsm <= ap_ST_st63_fsm_62;
                end if;
            when ap_ST_st63_fsm_62 => 
                ap_NS_fsm <= ap_ST_st64_fsm_63;
            when ap_ST_st64_fsm_63 => 
                ap_NS_fsm <= ap_ST_st65_fsm_64;
            when ap_ST_st65_fsm_64 => 
                ap_NS_fsm <= ap_ST_st66_fsm_65;
            when ap_ST_st66_fsm_65 => 
                ap_NS_fsm <= ap_ST_st67_fsm_66;
            when ap_ST_st67_fsm_66 => 
                ap_NS_fsm <= ap_ST_st68_fsm_67;
            when ap_ST_st68_fsm_67 => 
                ap_NS_fsm <= ap_ST_st69_fsm_68;
            when ap_ST_st69_fsm_68 => 
                ap_NS_fsm <= ap_ST_st70_fsm_69;
            when ap_ST_st70_fsm_69 => 
                ap_NS_fsm <= ap_ST_st71_fsm_70;
            when ap_ST_st71_fsm_70 => 
                ap_NS_fsm <= ap_ST_st72_fsm_71;
            when ap_ST_st72_fsm_71 => 
                ap_NS_fsm <= ap_ST_st73_fsm_72;
            when ap_ST_st73_fsm_72 => 
                ap_NS_fsm <= ap_ST_st74_fsm_73;
            when ap_ST_st74_fsm_73 => 
                ap_NS_fsm <= ap_ST_st75_fsm_74;
            when ap_ST_st75_fsm_74 => 
                ap_NS_fsm <= ap_ST_st76_fsm_75;
            when ap_ST_st76_fsm_75 => 
                ap_NS_fsm <= ap_ST_st77_fsm_76;
            when ap_ST_st77_fsm_76 => 
                ap_NS_fsm <= ap_ST_st78_fsm_77;
            when ap_ST_st78_fsm_77 => 
                ap_NS_fsm <= ap_ST_st79_fsm_78;
            when ap_ST_st79_fsm_78 => 
                ap_NS_fsm <= ap_ST_st80_fsm_79;
            when ap_ST_st80_fsm_79 => 
                ap_NS_fsm <= ap_ST_st81_fsm_80;
            when ap_ST_st81_fsm_80 => 
                ap_NS_fsm <= ap_ST_st82_fsm_81;
            when ap_ST_st82_fsm_81 => 
                ap_NS_fsm <= ap_ST_st83_fsm_82;
            when ap_ST_st83_fsm_82 => 
                ap_NS_fsm <= ap_ST_st84_fsm_83;
            when ap_ST_st84_fsm_83 => 
                ap_NS_fsm <= ap_ST_st85_fsm_84;
            when ap_ST_st85_fsm_84 => 
                ap_NS_fsm <= ap_ST_st86_fsm_85;
            when ap_ST_st86_fsm_85 => 
                ap_NS_fsm <= ap_ST_st87_fsm_86;
            when ap_ST_st87_fsm_86 => 
                ap_NS_fsm <= ap_ST_st88_fsm_87;
            when ap_ST_st88_fsm_87 => 
                ap_NS_fsm <= ap_ST_st89_fsm_88;
            when ap_ST_st89_fsm_88 => 
                ap_NS_fsm <= ap_ST_st90_fsm_89;
            when ap_ST_st90_fsm_89 => 
                ap_NS_fsm <= ap_ST_st91_fsm_90;
            when ap_ST_st91_fsm_90 => 
                ap_NS_fsm <= ap_ST_st92_fsm_91;
            when ap_ST_st92_fsm_91 => 
                ap_NS_fsm <= ap_ST_st93_fsm_92;
            when ap_ST_st93_fsm_92 => 
                ap_NS_fsm <= ap_ST_st94_fsm_93;
            when ap_ST_st94_fsm_93 => 
                ap_NS_fsm <= ap_ST_st95_fsm_94;
            when ap_ST_st95_fsm_94 => 
                ap_NS_fsm <= ap_ST_st96_fsm_95;
            when ap_ST_st96_fsm_95 => 
                ap_NS_fsm <= ap_ST_st97_fsm_96;
            when ap_ST_st97_fsm_96 => 
                ap_NS_fsm <= ap_ST_st98_fsm_97;
            when ap_ST_st98_fsm_97 => 
                ap_NS_fsm <= ap_ST_st99_fsm_98;
            when ap_ST_st99_fsm_98 => 
                ap_NS_fsm <= ap_ST_st100_fsm_99;
            when ap_ST_st100_fsm_99 => 
                ap_NS_fsm <= ap_ST_st101_fsm_100;
            when ap_ST_st101_fsm_100 => 
                ap_NS_fsm <= ap_ST_st102_fsm_101;
            when ap_ST_st102_fsm_101 => 
                if (not((ap_const_logic_0 = grp_dut_sinf_or_cosf_fu_654_ap_done))) then
                    ap_NS_fsm <= ap_ST_st103_fsm_102;
                else
                    ap_NS_fsm <= ap_ST_st102_fsm_101;
                end if;
            when ap_ST_st103_fsm_102 => 
                ap_NS_fsm <= ap_ST_st104_fsm_103;
            when ap_ST_st104_fsm_103 => 
                ap_NS_fsm <= ap_ST_st105_fsm_104;
            when ap_ST_st105_fsm_104 => 
                ap_NS_fsm <= ap_ST_st106_fsm_105;
            when ap_ST_st106_fsm_105 => 
                ap_NS_fsm <= ap_ST_st107_fsm_106;
            when ap_ST_st107_fsm_106 => 
                ap_NS_fsm <= ap_ST_st108_fsm_107;
            when ap_ST_st108_fsm_107 => 
                ap_NS_fsm <= ap_ST_st109_fsm_108;
            when ap_ST_st109_fsm_108 => 
                ap_NS_fsm <= ap_ST_st110_fsm_109;
            when ap_ST_st110_fsm_109 => 
                ap_NS_fsm <= ap_ST_st111_fsm_110;
            when ap_ST_st111_fsm_110 => 
                ap_NS_fsm <= ap_ST_st62_fsm_61;
            when ap_ST_st112_fsm_111 => 
                ap_NS_fsm <= ap_ST_st113_fsm_112;
            when ap_ST_st113_fsm_112 => 
                ap_NS_fsm <= ap_ST_st114_fsm_113;
            when ap_ST_st114_fsm_113 => 
                ap_NS_fsm <= ap_ST_st56_fsm_55;
            when ap_ST_st115_fsm_114 => 
                if (not((ap_const_logic_0 = grp_dut_knn_fu_647_ap_done))) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                else
                    ap_NS_fsm <= ap_ST_st115_fsm_114;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;

    M_address0_assign_proc : process(ap_sig_cseq_ST_st10_fsm_9, ap_sig_cseq_ST_st8_fsm_7, tmp_41_cast_fu_796_p1, tmp_45_cast_fu_861_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7)) then 
            M_address0 <= tmp_41_cast_fu_796_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9)) then 
            M_address0 <= tmp_45_cast_fu_861_p1(14 - 1 downto 0);
        else 
            M_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    M_ce0_assign_proc : process(ap_sig_cseq_ST_st10_fsm_9, ap_sig_cseq_ST_st8_fsm_7)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9) or (ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7))) then 
            M_ce0 <= ap_const_logic_1;
        else 
            M_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    M_we0_assign_proc : process(ap_sig_cseq_ST_st8_fsm_7)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7))) then 
            M_we0 <= ap_const_logic_1;
        else 
            M_we0 <= ap_const_logic_0;
        end if; 
    end process;


    X_address0_assign_proc : process(grp_dut_knn_fu_647_input_r_address0, ap_sig_cseq_ST_st114_fsm_113, ap_sig_cseq_ST_st115_fsm_114, tmp_55_cast_fu_1235_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st114_fsm_113)) then 
            X_address0 <= tmp_55_cast_fu_1235_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st115_fsm_114)) then 
            X_address0 <= grp_dut_knn_fu_647_input_r_address0;
        else 
            X_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    X_ce0_assign_proc : process(grp_dut_knn_fu_647_input_r_ce0, ap_sig_cseq_ST_st114_fsm_113, ap_sig_cseq_ST_st115_fsm_114)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st114_fsm_113)) then 
            X_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st115_fsm_114)) then 
            X_ce0 <= grp_dut_knn_fu_647_input_r_ce0;
        else 
            X_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    X_we0_assign_proc : process(ap_sig_cseq_ST_st114_fsm_113)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st114_fsm_113))) then 
            X_we0 <= ap_const_logic_1;
        else 
            X_we0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0, grp_dut_knn_fu_647_ap_done, ap_sig_cseq_ST_st115_fsm_114)
    begin
        if ((((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st115_fsm_114) and not((ap_const_logic_0 = grp_dut_knn_fu_647_ap_done))))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(grp_dut_knn_fu_647_ap_done, ap_sig_cseq_ST_st115_fsm_114)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st115_fsm_114) and not((ap_const_logic_0 = grp_dut_knn_fu_647_ap_done)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_assign_proc : process(grp_dut_knn_fu_647_ap_done, grp_dut_knn_fu_647_ap_return, ap_sig_cseq_ST_st115_fsm_114, ap_return_preg)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st115_fsm_114) and not((ap_const_logic_0 = grp_dut_knn_fu_647_ap_done)))) then 
            ap_return <= grp_dut_knn_fu_647_ap_return;
        else 
            ap_return <= ap_return_preg;
        end if; 
    end process;


    ap_sig_1005_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_1005 <= (ap_const_lv1_1 = ap_CS_fsm(25 downto 25));
    end process;


    ap_sig_1012_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_1012 <= (ap_const_lv1_1 = ap_CS_fsm(37 downto 37));
    end process;


    ap_sig_1019_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_1019 <= (ap_const_lv1_1 = ap_CS_fsm(71 downto 71));
    end process;


    ap_sig_1027_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_1027 <= (ap_const_lv1_1 = ap_CS_fsm(106 downto 106));
    end process;


    ap_sig_1039_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_1039 <= (ap_const_lv1_1 = ap_CS_fsm(67 downto 67));
    end process;


    ap_sig_1046_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_1046 <= (ap_const_lv1_1 = ap_CS_fsm(76 downto 76));
    end process;


    ap_sig_1053_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_1053 <= (ap_const_lv1_1 = ap_CS_fsm(80 downto 80));
    end process;


    ap_sig_1065_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_1065 <= (ap_const_lv1_1 = ap_CS_fsm(84 downto 84));
    end process;


    ap_sig_132_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_132 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    ap_sig_193_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_193 <= (ap_const_lv1_1 = ap_CS_fsm(24 downto 24));
    end process;


    ap_sig_200_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_200 <= (ap_const_lv1_1 = ap_CS_fsm(36 downto 36));
    end process;


    ap_sig_208_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_208 <= (ap_const_lv1_1 = ap_CS_fsm(70 downto 70));
    end process;


    ap_sig_216_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_216 <= (ap_const_lv1_1 = ap_CS_fsm(79 downto 79));
    end process;


    ap_sig_224_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_224 <= (ap_const_lv1_1 = ap_CS_fsm(83 downto 83));
    end process;


    ap_sig_232_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_232 <= (ap_const_lv1_1 = ap_CS_fsm(105 downto 105));
    end process;


    ap_sig_242_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_242 <= (ap_const_lv1_1 = ap_CS_fsm(29 downto 29));
    end process;


    ap_sig_249_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_249 <= (ap_const_lv1_1 = ap_CS_fsm(75 downto 75));
    end process;


    ap_sig_259_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_259 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    ap_sig_277_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_277 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    ap_sig_286_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_286 <= (ap_const_lv1_1 = ap_CS_fsm(3 downto 3));
    end process;


    ap_sig_303_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_303 <= (ap_const_lv1_1 = ap_CS_fsm(4 downto 4));
    end process;


    ap_sig_312_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_312 <= (ap_const_lv1_1 = ap_CS_fsm(8 downto 8));
    end process;


    ap_sig_328_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_328 <= (ap_const_lv1_1 = ap_CS_fsm(9 downto 9));
    end process;


    ap_sig_344_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_344 <= (ap_const_lv1_1 = ap_CS_fsm(11 downto 11));
    end process;


    ap_sig_353_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_353 <= (ap_const_lv1_1 = ap_CS_fsm(12 downto 12));
    end process;


    ap_sig_362_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_362 <= (ap_const_lv1_1 = ap_CS_fsm(13 downto 13));
    end process;


    ap_sig_379_assign_proc : process(fft_config_data_V_empty_n, exitcond4_fu_904_p2, fft_config_data_V_full_n)
    begin
                ap_sig_379 <= (((fft_config_data_V_empty_n = ap_const_logic_0) and (ap_const_lv1_0 = exitcond4_fu_904_p2)) or ((ap_const_lv1_0 = exitcond4_fu_904_p2) and (fft_config_data_V_full_n = ap_const_logic_0)));
    end process;


    ap_sig_392_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_392 <= (ap_const_lv1_1 = ap_CS_fsm(14 downto 14));
    end process;


    ap_sig_406_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_406 <= (ap_const_lv1_1 = ap_CS_fsm(17 downto 17));
    end process;


    ap_sig_422_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_422 <= (ap_const_lv1_1 = ap_CS_fsm(19 downto 19));
    end process;


    ap_sig_436_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_436 <= (ap_const_lv1_1 = ap_CS_fsm(20 downto 20));
    end process;


    ap_sig_451_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_451 <= (ap_const_lv1_1 = ap_CS_fsm(21 downto 21));
    end process;


    ap_sig_463_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_463 <= (ap_const_lv1_1 = ap_CS_fsm(31 downto 31));
    end process;


    ap_sig_481_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_481 <= (ap_const_lv1_1 = ap_CS_fsm(32 downto 32));
    end process;


    ap_sig_496_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_496 <= (ap_const_lv1_1 = ap_CS_fsm(33 downto 33));
    end process;


    ap_sig_506_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_506 <= (ap_const_lv1_1 = ap_CS_fsm(41 downto 41));
    end process;


    ap_sig_515_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_515 <= (ap_const_lv1_1 = ap_CS_fsm(47 downto 47));
    end process;


    ap_sig_524_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_524 <= (ap_const_lv1_1 = ap_CS_fsm(53 downto 53));
    end process;


    ap_sig_533_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_533 <= (ap_const_lv1_1 = ap_CS_fsm(55 downto 55));
    end process;


    ap_sig_551_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_551 <= (ap_const_lv1_1 = ap_CS_fsm(60 downto 60));
    end process;


    ap_sig_562_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_562 <= (ap_const_lv1_1 = ap_CS_fsm(61 downto 61));
    end process;


    ap_sig_583_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_583 <= (ap_const_lv1_1 = ap_CS_fsm(66 downto 66));
    end process;


    ap_sig_592_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_592 <= (ap_const_lv1_1 = ap_CS_fsm(99 downto 99));
    end process;


    ap_sig_601_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_601 <= (ap_const_lv1_1 = ap_CS_fsm(101 downto 101));
    end process;


    ap_sig_616_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_616 <= (ap_const_lv1_1 = ap_CS_fsm(102 downto 102));
    end process;


    ap_sig_624_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_624 <= (ap_const_lv1_1 = ap_CS_fsm(110 downto 110));
    end process;


    ap_sig_739_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_739 <= (ap_const_lv1_1 = ap_CS_fsm(16 downto 16));
    end process;


    ap_sig_760_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_760 <= (ap_const_lv1_1 = ap_CS_fsm(7 downto 7));
    end process;


    ap_sig_781_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_781 <= (ap_const_lv1_1 = ap_CS_fsm(10 downto 10));
    end process;


    ap_sig_811_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_811 <= (ap_const_lv1_1 = ap_CS_fsm(15 downto 15));
    end process;


    ap_sig_822_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_822 <= (ap_const_lv1_1 = ap_CS_fsm(18 downto 18));
    end process;


    ap_sig_837_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_837 <= (ap_const_lv1_1 = ap_CS_fsm(30 downto 30));
    end process;


    ap_sig_846_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_846 <= (ap_const_lv1_1 = ap_CS_fsm(54 downto 54));
    end process;


    ap_sig_865_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_865 <= (ap_const_lv1_1 = ap_CS_fsm(113 downto 113));
    end process;


    ap_sig_886_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_886 <= (ap_const_lv1_1 = ap_CS_fsm(114 downto 114));
    end process;


    ap_sig_903_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_903 <= (ap_const_lv1_1 = ap_CS_fsm(100 downto 100));
    end process;


    ap_sig_cseq_ST_st100_fsm_99_assign_proc : process(ap_sig_592)
    begin
        if (ap_sig_592) then 
            ap_sig_cseq_ST_st100_fsm_99 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st100_fsm_99 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st101_fsm_100_assign_proc : process(ap_sig_903)
    begin
        if (ap_sig_903) then 
            ap_sig_cseq_ST_st101_fsm_100 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st101_fsm_100 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st102_fsm_101_assign_proc : process(ap_sig_601)
    begin
        if (ap_sig_601) then 
            ap_sig_cseq_ST_st102_fsm_101 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st102_fsm_101 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st103_fsm_102_assign_proc : process(ap_sig_616)
    begin
        if (ap_sig_616) then 
            ap_sig_cseq_ST_st103_fsm_102 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st103_fsm_102 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st106_fsm_105_assign_proc : process(ap_sig_232)
    begin
        if (ap_sig_232) then 
            ap_sig_cseq_ST_st106_fsm_105 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st106_fsm_105 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st107_fsm_106_assign_proc : process(ap_sig_1027)
    begin
        if (ap_sig_1027) then 
            ap_sig_cseq_ST_st107_fsm_106 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st107_fsm_106 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st10_fsm_9_assign_proc : process(ap_sig_328)
    begin
        if (ap_sig_328) then 
            ap_sig_cseq_ST_st10_fsm_9 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st10_fsm_9 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st111_fsm_110_assign_proc : process(ap_sig_624)
    begin
        if (ap_sig_624) then 
            ap_sig_cseq_ST_st111_fsm_110 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st111_fsm_110 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st114_fsm_113_assign_proc : process(ap_sig_865)
    begin
        if (ap_sig_865) then 
            ap_sig_cseq_ST_st114_fsm_113 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st114_fsm_113 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st115_fsm_114_assign_proc : process(ap_sig_886)
    begin
        if (ap_sig_886) then 
            ap_sig_cseq_ST_st115_fsm_114 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st115_fsm_114 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st11_fsm_10_assign_proc : process(ap_sig_781)
    begin
        if (ap_sig_781) then 
            ap_sig_cseq_ST_st11_fsm_10 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st11_fsm_10 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st12_fsm_11_assign_proc : process(ap_sig_344)
    begin
        if (ap_sig_344) then 
            ap_sig_cseq_ST_st12_fsm_11 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st12_fsm_11 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st13_fsm_12_assign_proc : process(ap_sig_353)
    begin
        if (ap_sig_353) then 
            ap_sig_cseq_ST_st13_fsm_12 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st13_fsm_12 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st14_fsm_13_assign_proc : process(ap_sig_362)
    begin
        if (ap_sig_362) then 
            ap_sig_cseq_ST_st14_fsm_13 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st14_fsm_13 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st15_fsm_14_assign_proc : process(ap_sig_392)
    begin
        if (ap_sig_392) then 
            ap_sig_cseq_ST_st15_fsm_14 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st15_fsm_14 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st16_fsm_15_assign_proc : process(ap_sig_811)
    begin
        if (ap_sig_811) then 
            ap_sig_cseq_ST_st16_fsm_15 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st16_fsm_15 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st17_fsm_16_assign_proc : process(ap_sig_739)
    begin
        if (ap_sig_739) then 
            ap_sig_cseq_ST_st17_fsm_16 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st17_fsm_16 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st18_fsm_17_assign_proc : process(ap_sig_406)
    begin
        if (ap_sig_406) then 
            ap_sig_cseq_ST_st18_fsm_17 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st18_fsm_17 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st19_fsm_18_assign_proc : process(ap_sig_822)
    begin
        if (ap_sig_822) then 
            ap_sig_cseq_ST_st19_fsm_18 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st19_fsm_18 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_132)
    begin
        if (ap_sig_132) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st20_fsm_19_assign_proc : process(ap_sig_422)
    begin
        if (ap_sig_422) then 
            ap_sig_cseq_ST_st20_fsm_19 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st20_fsm_19 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st21_fsm_20_assign_proc : process(ap_sig_436)
    begin
        if (ap_sig_436) then 
            ap_sig_cseq_ST_st21_fsm_20 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st21_fsm_20 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st22_fsm_21_assign_proc : process(ap_sig_451)
    begin
        if (ap_sig_451) then 
            ap_sig_cseq_ST_st22_fsm_21 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st22_fsm_21 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st25_fsm_24_assign_proc : process(ap_sig_193)
    begin
        if (ap_sig_193) then 
            ap_sig_cseq_ST_st25_fsm_24 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st25_fsm_24 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st26_fsm_25_assign_proc : process(ap_sig_1005)
    begin
        if (ap_sig_1005) then 
            ap_sig_cseq_ST_st26_fsm_25 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st26_fsm_25 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st2_fsm_1_assign_proc : process(ap_sig_259)
    begin
        if (ap_sig_259) then 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st30_fsm_29_assign_proc : process(ap_sig_242)
    begin
        if (ap_sig_242) then 
            ap_sig_cseq_ST_st30_fsm_29 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st30_fsm_29 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st31_fsm_30_assign_proc : process(ap_sig_837)
    begin
        if (ap_sig_837) then 
            ap_sig_cseq_ST_st31_fsm_30 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st31_fsm_30 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st32_fsm_31_assign_proc : process(ap_sig_463)
    begin
        if (ap_sig_463) then 
            ap_sig_cseq_ST_st32_fsm_31 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st32_fsm_31 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st33_fsm_32_assign_proc : process(ap_sig_481)
    begin
        if (ap_sig_481) then 
            ap_sig_cseq_ST_st33_fsm_32 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st33_fsm_32 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st34_fsm_33_assign_proc : process(ap_sig_496)
    begin
        if (ap_sig_496) then 
            ap_sig_cseq_ST_st34_fsm_33 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st34_fsm_33 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st37_fsm_36_assign_proc : process(ap_sig_200)
    begin
        if (ap_sig_200) then 
            ap_sig_cseq_ST_st37_fsm_36 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st37_fsm_36 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st38_fsm_37_assign_proc : process(ap_sig_1012)
    begin
        if (ap_sig_1012) then 
            ap_sig_cseq_ST_st38_fsm_37 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st38_fsm_37 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st3_fsm_2_assign_proc : process(ap_sig_277)
    begin
        if (ap_sig_277) then 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st42_fsm_41_assign_proc : process(ap_sig_506)
    begin
        if (ap_sig_506) then 
            ap_sig_cseq_ST_st42_fsm_41 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st42_fsm_41 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st48_fsm_47_assign_proc : process(ap_sig_515)
    begin
        if (ap_sig_515) then 
            ap_sig_cseq_ST_st48_fsm_47 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st48_fsm_47 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st4_fsm_3_assign_proc : process(ap_sig_286)
    begin
        if (ap_sig_286) then 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st54_fsm_53_assign_proc : process(ap_sig_524)
    begin
        if (ap_sig_524) then 
            ap_sig_cseq_ST_st54_fsm_53 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st54_fsm_53 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st55_fsm_54_assign_proc : process(ap_sig_846)
    begin
        if (ap_sig_846) then 
            ap_sig_cseq_ST_st55_fsm_54 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st55_fsm_54 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st56_fsm_55_assign_proc : process(ap_sig_533)
    begin
        if (ap_sig_533) then 
            ap_sig_cseq_ST_st56_fsm_55 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st56_fsm_55 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st5_fsm_4_assign_proc : process(ap_sig_303)
    begin
        if (ap_sig_303) then 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st61_fsm_60_assign_proc : process(ap_sig_551)
    begin
        if (ap_sig_551) then 
            ap_sig_cseq_ST_st61_fsm_60 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st61_fsm_60 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st62_fsm_61_assign_proc : process(ap_sig_562)
    begin
        if (ap_sig_562) then 
            ap_sig_cseq_ST_st62_fsm_61 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st62_fsm_61 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st67_fsm_66_assign_proc : process(ap_sig_583)
    begin
        if (ap_sig_583) then 
            ap_sig_cseq_ST_st67_fsm_66 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st67_fsm_66 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st68_fsm_67_assign_proc : process(ap_sig_1039)
    begin
        if (ap_sig_1039) then 
            ap_sig_cseq_ST_st68_fsm_67 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st68_fsm_67 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st71_fsm_70_assign_proc : process(ap_sig_208)
    begin
        if (ap_sig_208) then 
            ap_sig_cseq_ST_st71_fsm_70 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st71_fsm_70 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st72_fsm_71_assign_proc : process(ap_sig_1019)
    begin
        if (ap_sig_1019) then 
            ap_sig_cseq_ST_st72_fsm_71 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st72_fsm_71 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st76_fsm_75_assign_proc : process(ap_sig_249)
    begin
        if (ap_sig_249) then 
            ap_sig_cseq_ST_st76_fsm_75 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st76_fsm_75 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st77_fsm_76_assign_proc : process(ap_sig_1046)
    begin
        if (ap_sig_1046) then 
            ap_sig_cseq_ST_st77_fsm_76 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st77_fsm_76 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st80_fsm_79_assign_proc : process(ap_sig_216)
    begin
        if (ap_sig_216) then 
            ap_sig_cseq_ST_st80_fsm_79 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st80_fsm_79 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st81_fsm_80_assign_proc : process(ap_sig_1053)
    begin
        if (ap_sig_1053) then 
            ap_sig_cseq_ST_st81_fsm_80 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st81_fsm_80 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st84_fsm_83_assign_proc : process(ap_sig_224)
    begin
        if (ap_sig_224) then 
            ap_sig_cseq_ST_st84_fsm_83 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st84_fsm_83 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st85_fsm_84_assign_proc : process(ap_sig_1065)
    begin
        if (ap_sig_1065) then 
            ap_sig_cseq_ST_st85_fsm_84 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st85_fsm_84 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st8_fsm_7_assign_proc : process(ap_sig_760)
    begin
        if (ap_sig_760) then 
            ap_sig_cseq_ST_st8_fsm_7 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st8_fsm_7 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st9_fsm_8_assign_proc : process(ap_sig_312)
    begin
        if (ap_sig_312) then 
            ap_sig_cseq_ST_st9_fsm_8 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st9_fsm_8 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond10_fu_1173_p2 <= "1" when (k_reg_590 = ap_const_lv5_14) else "0";
    exitcond11_fu_1117_p2 <= "1" when (x_reg_579 = ap_const_lv8_81) else "0";
    exitcond12_fu_1203_p2 <= "1" when (n1_reg_625 = ap_const_lv5_14) else "0";
    exitcond1_fu_806_p2 <= "1" when (i1_reg_430 = ap_const_lv9_100) else "0";
    exitcond2_fu_758_p2 <= "1" when (j_reg_408 = ap_const_lv6_31) else "0";
    exitcond3_fu_822_p2 <= "1" when (j2_reg_453 = ap_const_lv6_31) else "0";
    exitcond4_fu_904_p2 <= "1" when (i4_reg_486 = ap_const_lv6_31) else "0";
    exitcond5_fu_1040_p2 <= "1" when (frame_reg_520 = ap_const_lv6_31) else "0";
    exitcond6_fu_941_p2 <= "1" when (j5_reg_497 = ap_const_lv9_100) else "0";
    exitcond7_fu_1056_p2 <= "1" when (i7_reg_532 = ap_const_lv8_81) else "0";
    exitcond8_fu_985_p2 <= "1" when (j6_reg_509 = ap_const_lv9_100) else "0";
    exitcond9_fu_1097_p2 <= "1" when (j8_reg_544 = ap_const_lv5_14) else "0";
    exitcond_fu_741_p2 <= "1" when (i_reg_385 = ap_const_lv9_100) else "0";
    fft_config_data_V_empty_n <= ap_const_logic_1;
    fft_config_data_V_full_n <= ap_const_logic_1;
    frame_1_fu_1046_p2 <= std_logic_vector(unsigned(frame_reg_520) + unsigned(ap_const_lv6_1));
    grp_dut_knn_fu_647_ap_start <= ap_reg_grp_dut_knn_fu_647_ap_start;
    grp_dut_sinf_or_cosf_fu_654_ap_start <= ap_reg_grp_dut_sinf_or_cosf_fu_654_ap_start;

    grp_fft_config1_s_fu_667_ap_ce_assign_proc : process(ap_sig_cseq_ST_st15_fsm_14, exitcond6_fu_941_p2, ap_sig_cseq_ST_st17_fsm_16)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st15_fsm_14) and not((ap_const_lv1_0 = exitcond6_fu_941_p2))) or (ap_const_logic_1 = ap_sig_cseq_ST_st17_fsm_16))) then 
            grp_fft_config1_s_fu_667_ap_ce <= ap_const_logic_1;
        else 
            grp_fft_config1_s_fu_667_ap_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fft_config1_s_fu_667_ap_start <= ap_reg_grp_fft_config1_s_fu_667_ap_start;

    grp_fu_675_p0_assign_proc : process(reg_717, p_x_assign_reg_567, sum9_reg_613, ap_sig_cseq_ST_st26_fsm_25, ap_sig_cseq_ST_st38_fsm_37, ap_sig_cseq_ST_st72_fsm_71, ap_sig_cseq_ST_st107_fsm_106)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st107_fsm_106)) then 
            grp_fu_675_p0 <= sum9_reg_613;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st38_fsm_37)) then 
            grp_fu_675_p0 <= p_x_assign_reg_567;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st26_fsm_25) or (ap_const_logic_1 = ap_sig_cseq_ST_st72_fsm_71))) then 
            grp_fu_675_p0 <= reg_717;
        else 
            grp_fu_675_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_675_p1_assign_proc : process(reg_717, tmp_21_reg_1449, ap_sig_cseq_ST_st26_fsm_25, ap_sig_cseq_ST_st38_fsm_37, ap_sig_cseq_ST_st72_fsm_71, ap_sig_cseq_ST_st107_fsm_106)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st72_fsm_71)) then 
            grp_fu_675_p1 <= ap_const_lv32_3F800000;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st38_fsm_37) or (ap_const_logic_1 = ap_sig_cseq_ST_st107_fsm_106))) then 
            grp_fu_675_p1 <= reg_717;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st26_fsm_25)) then 
            grp_fu_675_p1 <= tmp_21_reg_1449;
        else 
            grp_fu_675_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_682_p0_assign_proc : process(sound_file_q0, xk_output_M_real_q0, melfb_q0, reg_717, reg_725, ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st22_fsm_21, ap_sig_cseq_ST_st34_fsm_33, p_s_reg_1543, ap_sig_cseq_ST_st62_fsm_61, tmp_34_reg_1581, z_q0, ap_sig_cseq_ST_st103_fsm_102, ap_sig_cseq_ST_st68_fsm_67, ap_sig_cseq_ST_st77_fsm_76, ap_sig_cseq_ST_st81_fsm_80)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st103_fsm_102)) then 
            grp_fu_682_p0 <= z_q0;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st81_fsm_80)) then 
            grp_fu_682_p0 <= reg_717;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st77_fsm_76)) then 
            grp_fu_682_p0 <= reg_725;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st68_fsm_67)) then 
            grp_fu_682_p0 <= tmp_34_reg_1581;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st62_fsm_61)) then 
            grp_fu_682_p0 <= p_s_reg_1543;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st34_fsm_33)) then 
            grp_fu_682_p0 <= melfb_q0;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st22_fsm_21)) then 
            grp_fu_682_p0 <= xk_output_M_real_q0;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then 
            grp_fu_682_p0 <= sound_file_q0;
        else 
            grp_fu_682_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_682_p1_assign_proc : process(xk_output_M_real_q0, hamming_load_reg_1274, ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st22_fsm_21, ap_sig_cseq_ST_st34_fsm_33, z2_q0, tmp_25_reg_1548, ap_sig_cseq_ST_st62_fsm_61, tmp_i_i_i_i_reg_1596, ap_sig_cseq_ST_st103_fsm_102, sum9_reg_613, ap_sig_cseq_ST_st68_fsm_67, ap_sig_cseq_ST_st77_fsm_76, ap_sig_cseq_ST_st81_fsm_80)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st103_fsm_102)) then 
            grp_fu_682_p1 <= tmp_i_i_i_i_reg_1596;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st81_fsm_80)) then 
            grp_fu_682_p1 <= tmp_25_reg_1548;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st77_fsm_76)) then 
            grp_fu_682_p1 <= ap_const_lv32_40490FD8;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st68_fsm_67)) then 
            grp_fu_682_p1 <= ap_const_lv32_40000000;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st62_fsm_61)) then 
            grp_fu_682_p1 <= sum9_reg_613;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st34_fsm_33)) then 
            grp_fu_682_p1 <= z2_q0;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st22_fsm_21)) then 
            grp_fu_682_p1 <= xk_output_M_real_q0;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then 
            grp_fu_682_p1 <= hamming_load_reg_1274;
        else 
            grp_fu_682_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_708_p0_assign_proc : process(ap_sig_cseq_ST_st56_fsm_55, k_cast3_fu_1168_p1, n1_cast2_fu_1198_p1, ap_sig_cseq_ST_st62_fsm_61)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st62_fsm_61)) then 
            grp_fu_708_p0 <= n1_cast2_fu_1198_p1;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st56_fsm_55)) then 
            grp_fu_708_p0 <= k_cast3_fu_1168_p1;
        else 
            grp_fu_708_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    hamming_address0 <= tmp_4_fu_753_p1(8 - 1 downto 0);

    hamming_ce0_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            hamming_ce0 <= ap_const_logic_1;
        else 
            hamming_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    i_1_fu_747_p2 <= std_logic_vector(unsigned(i_reg_385) + unsigned(ap_const_lv9_1));
    i_2_fu_812_p2 <= std_logic_vector(unsigned(i1_reg_430) + unsigned(ap_const_lv9_1));
    i_3_fu_1062_p2 <= std_logic_vector(unsigned(i7_reg_532) + unsigned(ap_const_lv8_1));
    i_4_fu_910_p2 <= std_logic_vector(unsigned(i4_reg_486) + unsigned(ap_const_lv6_1));
    i_cast_fu_737_p1 <= std_logic_vector(resize(unsigned(i_reg_385),13));
    j8_cast7_fu_1093_p1 <= std_logic_vector(resize(unsigned(j8_reg_544),8));
    j_1_fu_764_p2 <= std_logic_vector(unsigned(j_reg_408) + unsigned(ap_const_lv6_1));
    j_2_fu_828_p2 <= std_logic_vector(unsigned(j2_reg_453) + unsigned(ap_const_lv6_1));
    j_3_fu_947_p2 <= std_logic_vector(unsigned(j5_reg_497) + unsigned(ap_const_lv9_1));
    j_4_fu_991_p2 <= std_logic_vector(unsigned(j6_reg_509) + unsigned(ap_const_lv9_1));
    j_5_fu_1103_p2 <= std_logic_vector(unsigned(j8_reg_544) + unsigned(ap_const_lv5_1));
    k_1_fu_1179_p2 <= std_logic_vector(unsigned(k_reg_590) + unsigned(ap_const_lv5_1));
    k_cast3_fu_1168_p1 <= std_logic_vector(resize(unsigned(k_reg_590),32));
    melfb_address0 <= tmp_28_fu_1143_p1(12 - 1 downto 0);

    melfb_ce0_assign_proc : process(ap_sig_cseq_ST_st33_fsm_32)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st33_fsm_32)) then 
            melfb_ce0 <= ap_const_logic_1;
        else 
            melfb_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    n1_cast2_fu_1198_p1 <= std_logic_vector(resize(unsigned(n1_reg_625),32));
    n_fu_1209_p2 <= std_logic_vector(unsigned(n1_reg_625) + unsigned(ap_const_lv5_1));
    next_mul1_fu_1162_p2 <= std_logic_vector(unsigned(phi_mul1_reg_601) + unsigned(ap_const_lv10_31));
    next_mul3_fu_731_p2 <= std_logic_vector(unsigned(phi_mul2_reg_396) + unsigned(ap_const_lv14_31));
    next_mul5_fu_800_p2 <= std_logic_vector(unsigned(phi_mul4_reg_441) + unsigned(ap_const_lv14_31));
    next_mul7_fu_1087_p2 <= std_logic_vector(unsigned(phi_mul6_reg_555) + unsigned(ap_const_lv10_31));
    next_mul9_fu_1215_p2 <= std_logic_vector(unsigned(phi_mul8_reg_636) + unsigned(ap_const_lv10_31));
    next_mul_fu_770_p2 <= std_logic_vector(unsigned(phi_mul_reg_419) + unsigned(ap_const_lv13_64));
    p_s_fu_1191_p3 <= 
        ap_const_lv32_3E64F92E when (tmp_24_reg_1538(0) = '1') else 
        ap_const_lv32_3EA1E89B;
    p_shl_fu_1109_p3 <= (j8_reg_544 & ap_const_lv7_0);
    sound_file_address0 <= tmp_9_fu_781_p1(14 - 1 downto 0);

    sound_file_ce0_assign_proc : process(ap_sig_cseq_ST_st4_fsm_3)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            sound_file_ce0 <= ap_const_logic_1;
        else 
            sound_file_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp1_cast_fu_1134_p1 <= std_logic_vector(resize(unsigned(tmp1_fu_1129_p2),12));
    tmp1_fu_1129_p2 <= std_logic_vector(unsigned(j8_cast7_reg_1459) + unsigned(x_reg_579));
    tmp_10_fu_881_p2 <= "1" when (tmp_1_reg_464 = ap_const_lv8_FF) else "0";
    tmp_12_fu_887_p2 <= std_logic_vector(unsigned(tmp_11_reg_475) + unsigned(ap_const_lv8_1));
    tmp_13_fu_893_p1 <= std_logic_vector(resize(unsigned(tmp_11_reg_475),64));
    tmp_14_cast_fu_834_p1 <= std_logic_vector(resize(unsigned(j2_reg_453),14));
    tmp_15_fu_898_p2 <= "1" when (tmp_11_reg_475 = ap_const_lv8_FF) else "0";
    tmp_17_cast_fu_1052_p1 <= std_logic_vector(resize(unsigned(frame_reg_520),10));
    tmp_18_cast_fu_953_p1 <= std_logic_vector(resize(unsigned(j5_reg_497),15));
    tmp_18_fu_967_p1 <= std_logic_vector(resize(unsigned(j5_reg_497),64));
    tmp_19_fu_1082_p1 <= std_logic_vector(resize(unsigned(i7_reg_532),64));
    tmp_23_cast_fu_1002_p1 <= std_logic_vector(resize(unsigned(j6_reg_509),15));
    tmp_23_fu_997_p1 <= std_logic_vector(resize(unsigned(j6_reg_509),64));
    tmp_24_fu_1185_p2 <= "1" when (k_reg_590 = ap_const_lv5_0) else "0";
    tmp_26_fu_790_p2 <= std_logic_vector(unsigned(phi_mul2_reg_396) + unsigned(tmp_6_cast_fu_786_p1));
    tmp_27_fu_1138_p2 <= std_logic_vector(unsigned(tmp1_cast_fu_1134_p1) + unsigned(p_shl_reg_1472));
    tmp_28_fu_1143_p1 <= std_logic_vector(resize(unsigned(tmp_27_fu_1138_p2),64));
    tmp_29_fu_1148_p1 <= std_logic_vector(resize(unsigned(x_reg_579),64));
    tmp_2_fu_870_p2 <= std_logic_vector(unsigned(tmp_1_reg_464) + unsigned(ap_const_lv8_1));
    tmp_32_fu_838_p3 <= (j2_reg_453 & ap_const_lv8_0);
    tmp_33_fu_850_p2 <= std_logic_vector(unsigned(tmp_5_cast_reg_1320) + unsigned(tmp_43_cast_fu_846_p1));
    tmp_3_fu_876_p1 <= std_logic_vector(resize(unsigned(tmp_1_reg_464),64));
    tmp_40_fu_855_p2 <= std_logic_vector(unsigned(tmp_14_cast_fu_834_p1) + unsigned(phi_mul4_reg_441));
    tmp_41_cast_fu_796_p1 <= std_logic_vector(resize(unsigned(tmp_26_reg_1297),64));
    tmp_41_fu_929_p3 <= (i4_reg_486 & ap_const_lv8_0);
    tmp_42_fu_957_p2 <= std_logic_vector(unsigned(tmp_47_cast_reg_1367) + unsigned(tmp_18_cast_fu_953_p1));
    tmp_43_cast_fu_846_p1 <= std_logic_vector(resize(unsigned(tmp_32_fu_838_p3),15));
    tmp_43_fu_1068_p3 <= (frame_reg_520 & i7_reg_532);
    tmp_44_cast_fu_866_p1 <= std_logic_vector(resize(unsigned(tmp_33_reg_1333),64));
    tmp_44_fu_1076_p1 <= std_logic_vector(resize(unsigned(tmp_43_fu_1068_p3),64));
    tmp_45_cast_fu_861_p1 <= std_logic_vector(resize(unsigned(tmp_40_fu_855_p2),64));
    tmp_45_fu_1006_p2 <= std_logic_vector(unsigned(tmp_23_cast_fu_1002_p1) + unsigned(tmp_47_cast_reg_1367));
    tmp_46_fu_1016_p1 <= xk_q0(32 - 1 downto 0);
    tmp_47_cast_fu_937_p1 <= std_logic_vector(resize(unsigned(tmp_41_fu_929_p3),15));
    tmp_47_fu_1153_p2 <= std_logic_vector(unsigned(tmp_17_cast_reg_1412) + unsigned(phi_mul6_reg_555));
    tmp_48_cast_fu_962_p1 <= std_logic_vector(resize(unsigned(tmp_42_fu_957_p2),64));
    tmp_48_fu_1226_p2 <= std_logic_vector(unsigned(tmp_17_cast_reg_1412) + unsigned(phi_mul1_reg_601));
    tmp_49_fu_1221_p2 <= std_logic_vector(unsigned(tmp_17_cast_reg_1412) + unsigned(phi_mul8_reg_636));
    tmp_4_fu_753_p1 <= std_logic_vector(resize(unsigned(i_reg_385),64));
    tmp_51_cast_fu_1011_p1 <= std_logic_vector(resize(unsigned(tmp_45_reg_1394),64));
    tmp_53_cast_fu_1158_p1 <= std_logic_vector(resize(unsigned(tmp_47_reg_1510),64));
    tmp_55_cast_fu_1235_p1 <= std_logic_vector(resize(unsigned(tmp_48_reg_1576),64));
    tmp_57_cast_fu_1231_p1 <= std_logic_vector(resize(unsigned(tmp_49_reg_1571),64));
    tmp_5_cast_fu_818_p1 <= std_logic_vector(resize(unsigned(i1_reg_430),15));
    tmp_6_cast_fu_786_p1 <= std_logic_vector(resize(unsigned(j_reg_408),14));
    tmp_8_fu_776_p2 <= std_logic_vector(unsigned(phi_mul_reg_419) + unsigned(i_cast_reg_1256));
    tmp_9_fu_781_p1 <= std_logic_vector(resize(unsigned(tmp_8_fu_776_p2),64));
    x_1_fu_1123_p2 <= std_logic_vector(unsigned(x_reg_579) + unsigned(ap_const_lv8_1));
    xk_M_imag_load_new_fu_1025_p4 <= xk_q0(63 downto 32);

    xk_address0_assign_proc : process(ap_sig_cseq_ST_st13_fsm_12, ap_sig_cseq_ST_st18_fsm_17, tmp_13_fu_893_p1, tmp_23_fu_997_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st13_fsm_12)) then 
            xk_address0 <= tmp_13_fu_893_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st18_fsm_17)) then 
            xk_address0 <= tmp_23_fu_997_p1(8 - 1 downto 0);
        else 
            xk_address0 <= "XXXXXXXX";
        end if; 
    end process;


    xk_ce0_assign_proc : process(ap_sig_cseq_ST_st13_fsm_12, ap_sig_cseq_ST_st18_fsm_17)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st13_fsm_12) or (ap_const_logic_1 = ap_sig_cseq_ST_st18_fsm_17))) then 
            xk_ce0 <= ap_const_logic_1;
        else 
            xk_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    xk_output_M_imag_address0_assign_proc : process(ap_sig_cseq_ST_st21_fsm_20, ap_sig_cseq_ST_st19_fsm_18, tmp_51_cast_fu_1011_p1, tmp_44_fu_1076_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st19_fsm_18)) then 
            xk_output_M_imag_address0 <= tmp_51_cast_fu_1011_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st21_fsm_20)) then 
            xk_output_M_imag_address0 <= tmp_44_fu_1076_p1(14 - 1 downto 0);
        else 
            xk_output_M_imag_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    xk_output_M_imag_ce0_assign_proc : process(ap_sig_cseq_ST_st21_fsm_20, ap_sig_cseq_ST_st19_fsm_18)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st21_fsm_20) or (ap_const_logic_1 = ap_sig_cseq_ST_st19_fsm_18))) then 
            xk_output_M_imag_ce0 <= ap_const_logic_1;
        else 
            xk_output_M_imag_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    xk_output_M_imag_d0 <= xk_M_imag_load_new_fu_1025_p4;

    xk_output_M_imag_we0_assign_proc : process(ap_sig_cseq_ST_st19_fsm_18)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st19_fsm_18))) then 
            xk_output_M_imag_we0 <= ap_const_logic_1;
        else 
            xk_output_M_imag_we0 <= ap_const_logic_0;
        end if; 
    end process;


    xk_output_M_real_address0_assign_proc : process(ap_sig_cseq_ST_st21_fsm_20, ap_sig_cseq_ST_st19_fsm_18, tmp_51_cast_fu_1011_p1, tmp_44_fu_1076_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st19_fsm_18)) then 
            xk_output_M_real_address0 <= tmp_51_cast_fu_1011_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st21_fsm_20)) then 
            xk_output_M_real_address0 <= tmp_44_fu_1076_p1(14 - 1 downto 0);
        else 
            xk_output_M_real_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    xk_output_M_real_ce0_assign_proc : process(ap_sig_cseq_ST_st21_fsm_20, ap_sig_cseq_ST_st19_fsm_18)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st21_fsm_20) or (ap_const_logic_1 = ap_sig_cseq_ST_st19_fsm_18))) then 
            xk_output_M_real_ce0 <= ap_const_logic_1;
        else 
            xk_output_M_real_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    xk_output_M_real_d0 <= tmp_46_fu_1016_p1;

    xk_output_M_real_we0_assign_proc : process(ap_sig_cseq_ST_st19_fsm_18)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st19_fsm_18))) then 
            xk_output_M_real_we0 <= ap_const_logic_1;
        else 
            xk_output_M_real_we0 <= ap_const_logic_0;
        end if; 
    end process;


    xk_we0_assign_proc : process(ap_sig_cseq_ST_st13_fsm_12)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st13_fsm_12))) then 
            xk_we0 <= ap_const_logic_1;
        else 
            xk_we0 <= ap_const_logic_0;
        end if; 
    end process;

    xn_M_imag_addr_23941_part_set_fu_976_p3 <= (ap_const_lv32_0 & xn_input_M_real_load_toint_fu_972_p1);

    xn_address0_assign_proc : process(ap_sig_cseq_ST_st12_fsm_11, ap_sig_cseq_ST_st16_fsm_15, tmp_3_fu_876_p1, tmp_18_fu_967_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st16_fsm_15)) then 
            xn_address0 <= tmp_18_fu_967_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_11)) then 
            xn_address0 <= tmp_3_fu_876_p1(8 - 1 downto 0);
        else 
            xn_address0 <= "XXXXXXXX";
        end if; 
    end process;


    xn_ce0_assign_proc : process(ap_sig_cseq_ST_st12_fsm_11, ap_sig_cseq_ST_st16_fsm_15)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_11) or (ap_const_logic_1 = ap_sig_cseq_ST_st16_fsm_15))) then 
            xn_ce0 <= ap_const_logic_1;
        else 
            xn_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    xn_d0_assign_proc : process(ap_sig_cseq_ST_st12_fsm_11, ap_sig_cseq_ST_st16_fsm_15, xn_M_imag_addr_23941_part_set_fu_976_p3)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st16_fsm_15)) then 
            xn_d0 <= xn_M_imag_addr_23941_part_set_fu_976_p3;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_11)) then 
            xn_d0 <= ap_const_lv64_0;
        else 
            xn_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    xn_input_M_real_address0_assign_proc : process(ap_sig_cseq_ST_st15_fsm_14, ap_sig_cseq_ST_st11_fsm_10, tmp_44_cast_fu_866_p1, tmp_48_cast_fu_962_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_10)) then 
            xn_input_M_real_address0 <= tmp_44_cast_fu_866_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st15_fsm_14)) then 
            xn_input_M_real_address0 <= tmp_48_cast_fu_962_p1(14 - 1 downto 0);
        else 
            xn_input_M_real_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    xn_input_M_real_ce0_assign_proc : process(ap_sig_cseq_ST_st15_fsm_14, ap_sig_cseq_ST_st11_fsm_10)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st15_fsm_14) or (ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_10))) then 
            xn_input_M_real_ce0 <= ap_const_logic_1;
        else 
            xn_input_M_real_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    xn_input_M_real_load_toint_fu_972_p1 <= xn_input_M_real_q0;

    xn_input_M_real_we0_assign_proc : process(ap_sig_cseq_ST_st11_fsm_10)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_10))) then 
            xn_input_M_real_we0 <= ap_const_logic_1;
        else 
            xn_input_M_real_we0 <= ap_const_logic_0;
        end if; 
    end process;


    xn_we0_assign_proc : process(ap_sig_cseq_ST_st12_fsm_11, ap_sig_cseq_ST_st16_fsm_15)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_11) or (ap_const_logic_1 = ap_sig_cseq_ST_st16_fsm_15))) then 
            xn_we0 <= ap_const_logic_1;
        else 
            xn_we0 <= ap_const_logic_0;
        end if; 
    end process;


    z2_address0_assign_proc : process(ap_sig_cseq_ST_st33_fsm_32, ap_sig_cseq_ST_st31_fsm_30, tmp_19_fu_1082_p1, tmp_29_fu_1148_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st31_fsm_30)) then 
            z2_address0 <= tmp_19_fu_1082_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st33_fsm_32)) then 
            z2_address0 <= tmp_29_fu_1148_p1(8 - 1 downto 0);
        else 
            z2_address0 <= "XXXXXXXX";
        end if; 
    end process;


    z2_ce0_assign_proc : process(ap_sig_cseq_ST_st33_fsm_32, ap_sig_cseq_ST_st31_fsm_30)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st33_fsm_32) or (ap_const_logic_1 = ap_sig_cseq_ST_st31_fsm_30))) then 
            z2_ce0 <= ap_const_logic_1;
        else 
            z2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    z2_we0_assign_proc : process(ap_sig_cseq_ST_st31_fsm_30)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st31_fsm_30))) then 
            z2_we0 <= ap_const_logic_1;
        else 
            z2_we0 <= ap_const_logic_0;
        end if; 
    end process;


    z_address0_assign_proc : process(ap_sig_cseq_ST_st102_fsm_101, ap_sig_cseq_ST_st55_fsm_54, tmp_53_cast_fu_1158_p1, tmp_57_cast_fu_1231_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st55_fsm_54)) then 
            z_address0 <= tmp_53_cast_fu_1158_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st102_fsm_101)) then 
            z_address0 <= tmp_57_cast_fu_1231_p1(10 - 1 downto 0);
        else 
            z_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    z_ce0_assign_proc : process(ap_sig_cseq_ST_st102_fsm_101, grp_dut_sinf_or_cosf_fu_654_ap_done, ap_sig_cseq_ST_st55_fsm_54)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st102_fsm_101) and not((ap_const_logic_0 = grp_dut_sinf_or_cosf_fu_654_ap_done))) or (ap_const_logic_1 = ap_sig_cseq_ST_st55_fsm_54))) then 
            z_ce0 <= ap_const_logic_1;
        else 
            z_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    z_we0_assign_proc : process(ap_sig_cseq_ST_st55_fsm_54)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st55_fsm_54))) then 
            z_we0 <= ap_const_logic_1;
        else 
            z_we0 <= ap_const_logic_0;
        end if; 
    end process;

end behav;
