-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.2
-- Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity dut_mfcc is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    sound_file_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    sound_file_ce0 : OUT STD_LOGIC;
    sound_file_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of dut_mfcc is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_st5_fsm_4 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_st6_fsm_5 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_st7_fsm_6 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_st8_fsm_7 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_st9_fsm_8 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_st10_fsm_9 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_st11_fsm_10 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_st12_fsm_11 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_st13_fsm_12 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_st14_fsm_13 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_st15_fsm_14 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_st16_fsm_15 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_st17_fsm_16 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_st18_fsm_17 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_st19_fsm_18 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_st20_fsm_19 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_st21_fsm_20 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_st22_fsm_21 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_st23_fsm_22 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_st24_fsm_23 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_st25_fsm_24 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_st26_fsm_25 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_st27_fsm_26 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_st28_fsm_27 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_st29_fsm_28 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_st30_fsm_29 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_st31_fsm_30 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_st32_fsm_31 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_st33_fsm_32 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_st34_fsm_33 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_st35_fsm_34 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_st36_fsm_35 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_st37_fsm_36 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_st38_fsm_37 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_st39_fsm_38 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_st40_fsm_39 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_st41_fsm_40 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_st42_fsm_41 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_st43_fsm_42 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_st44_fsm_43 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_st45_fsm_44 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_st46_fsm_45 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_st47_fsm_46 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_st48_fsm_47 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_st49_fsm_48 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_st50_fsm_49 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_st51_fsm_50 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_st52_fsm_51 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_st53_fsm_52 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_st54_fsm_53 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_st55_fsm_54 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st56_fsm_55 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st57_fsm_56 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st58_fsm_57 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st59_fsm_58 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st60_fsm_59 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st61_fsm_60 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st62_fsm_61 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st63_fsm_62 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st64_fsm_63 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st65_fsm_64 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st66_fsm_65 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st67_fsm_66 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st68_fsm_67 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st69_fsm_68 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st70_fsm_69 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st71_fsm_70 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st72_fsm_71 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st73_fsm_72 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st74_fsm_73 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st75_fsm_74 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st76_fsm_75 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st77_fsm_76 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st78_fsm_77 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st79_fsm_78 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st80_fsm_79 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st81_fsm_80 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st82_fsm_81 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st83_fsm_82 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st84_fsm_83 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st85_fsm_84 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st86_fsm_85 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st87_fsm_86 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st88_fsm_87 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st89_fsm_88 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st90_fsm_89 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st91_fsm_90 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st92_fsm_91 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st93_fsm_92 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st94_fsm_93 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st95_fsm_94 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st96_fsm_95 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st97_fsm_96 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st98_fsm_97 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st99_fsm_98 : STD_LOGIC_VECTOR (108 downto 0) := "0000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st100_fsm_99 : STD_LOGIC_VECTOR (108 downto 0) := "0000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st101_fsm_100 : STD_LOGIC_VECTOR (108 downto 0) := "0000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st102_fsm_101 : STD_LOGIC_VECTOR (108 downto 0) := "0000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st103_fsm_102 : STD_LOGIC_VECTOR (108 downto 0) := "0000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st104_fsm_103 : STD_LOGIC_VECTOR (108 downto 0) := "0000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st105_fsm_104 : STD_LOGIC_VECTOR (108 downto 0) := "0000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st106_fsm_105 : STD_LOGIC_VECTOR (108 downto 0) := "0001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st107_fsm_106 : STD_LOGIC_VECTOR (108 downto 0) := "0010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st108_fsm_107 : STD_LOGIC_VECTOR (108 downto 0) := "0100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_st109_fsm_108 : STD_LOGIC_VECTOR (108 downto 0) := "1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_49 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001001";
    constant ap_const_lv32_4D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001101";
    constant ap_const_lv32_63 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100011";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_31 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110001";
    constant ap_const_lv32_36 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110110";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv32_3C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111100";
    constant ap_const_lv32_45 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000101";
    constant ap_const_lv32_5D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011101";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";
    constant ap_const_lv32_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100000";
    constant ap_const_lv32_68 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101000";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv14_0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv32_6B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101011";
    constant ap_const_lv32_6C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101100";
    constant ap_const_lv32_5E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011110";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_3F800000 : STD_LOGIC_VECTOR (31 downto 0) := "00111111100000000000000000000000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_41 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000001";
    constant ap_const_lv32_64 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100100";
    constant ap_const_lv32_40000000 : STD_LOGIC_VECTOR (31 downto 0) := "01000000000000000000000000000000";
    constant ap_const_lv32_40490FD8 : STD_LOGIC_VECTOR (31 downto 0) := "01000000010010010000111111011000";
    constant ap_const_lv32_3D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111101";
    constant ap_const_lv32_46 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000110";
    constant ap_const_lv32_4A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001010";
    constant ap_const_lv32_42200000 : STD_LOGIC_VECTOR (31 downto 0) := "01000010001000000000000000000000";
    constant ap_const_lv32_4E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001110";
    constant ap_const_lv14_31 : STD_LOGIC_VECTOR (13 downto 0) := "00000000110001";
    constant ap_const_lv9_100 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv6_31 : STD_LOGIC_VECTOR (5 downto 0) := "110001";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv13_64 : STD_LOGIC_VECTOR (12 downto 0) := "0000001100100";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv8_81 : STD_LOGIC_VECTOR (7 downto 0) := "10000001";
    constant ap_const_lv13_31 : STD_LOGIC_VECTOR (12 downto 0) := "0000000110001";
    constant ap_const_lv10_31 : STD_LOGIC_VECTOR (9 downto 0) := "0000110001";
    constant ap_const_lv5_14 : STD_LOGIC_VECTOR (4 downto 0) := "10100";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_3E64F92E : STD_LOGIC_VECTOR (31 downto 0) := "00111110011001001111100100101110";
    constant ap_const_lv32_3EA1E89B : STD_LOGIC_VECTOR (31 downto 0) := "00111110101000011110100010011011";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (108 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_126 : BOOLEAN;
    signal hamming_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal hamming_ce0 : STD_LOGIC;
    signal hamming_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal xn_input_M_real_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal xn_input_M_real_ce0 : STD_LOGIC;
    signal xn_input_M_real_we0 : STD_LOGIC;
    signal xn_input_M_real_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal melfb_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal melfb_ce0 : STD_LOGIC;
    signal melfb_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_651_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_681 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st31_fsm_30 : STD_LOGIC;
    signal ap_sig_169 : BOOLEAN;
    signal ap_sig_cseq_ST_st65_fsm_64 : STD_LOGIC;
    signal ap_sig_176 : BOOLEAN;
    signal ap_sig_cseq_ST_st74_fsm_73 : STD_LOGIC;
    signal ap_sig_184 : BOOLEAN;
    signal ap_sig_cseq_ST_st78_fsm_77 : STD_LOGIC;
    signal ap_sig_192 : BOOLEAN;
    signal ap_sig_cseq_ST_st100_fsm_99 : STD_LOGIC;
    signal ap_sig_200 : BOOLEAN;
    signal next_mul3_fu_689_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal next_mul3_reg_1177 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_sig_cseq_ST_st2_fsm_1 : STD_LOGIC;
    signal ap_sig_210 : BOOLEAN;
    signal i_cast_fu_695_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal i_cast_reg_1182 : STD_LOGIC_VECTOR (12 downto 0);
    signal i_1_fu_705_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_1_reg_1190 : STD_LOGIC_VECTOR (8 downto 0);
    signal exitcond_fu_699_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal hamming_load_reg_1200 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st3_fsm_2 : STD_LOGIC;
    signal ap_sig_228 : BOOLEAN;
    signal j_1_fu_722_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal j_1_reg_1208 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_sig_cseq_ST_st4_fsm_3 : STD_LOGIC;
    signal ap_sig_237 : BOOLEAN;
    signal next_mul_fu_728_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal next_mul_reg_1213 : STD_LOGIC_VECTOR (12 downto 0);
    signal exitcond2_fu_716_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_24_fu_748_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_24_reg_1223 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_sig_cseq_ST_st5_fsm_4 : STD_LOGIC;
    signal ap_sig_254 : BOOLEAN;
    signal next_mul5_fu_758_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal next_mul5_reg_1233 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_sig_cseq_ST_st9_fsm_8 : STD_LOGIC;
    signal ap_sig_263 : BOOLEAN;
    signal i_2_fu_770_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_2_reg_1241 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_5_cast_fu_776_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_5_cast_reg_1246 : STD_LOGIC_VECTOR (14 downto 0);
    signal exitcond1_fu_764_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_2_fu_786_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal j_2_reg_1254 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_sig_cseq_ST_st10_fsm_9 : STD_LOGIC;
    signal ap_sig_279 : BOOLEAN;
    signal tmp_31_fu_808_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_31_reg_1259 : STD_LOGIC_VECTOR (14 downto 0);
    signal exitcond3_fu_780_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_fu_828_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_cseq_ST_st12_fsm_11 : STD_LOGIC;
    signal ap_sig_295 : BOOLEAN;
    signal tmp_12_fu_845_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_cseq_ST_st13_fsm_12 : STD_LOGIC;
    signal ap_sig_304 : BOOLEAN;
    signal i_4_fu_868_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_4_reg_1288 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_sig_cseq_ST_st14_fsm_13 : STD_LOGIC;
    signal ap_sig_313 : BOOLEAN;
    signal fft_config_data_V_empty_n : STD_LOGIC;
    signal exitcond4_fu_862_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal fft_config_data_V_full_n : STD_LOGIC;
    signal ap_sig_330 : BOOLEAN;
    signal tmp_45_cast_fu_895_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_45_cast_reg_1293 : STD_LOGIC_VECTOR (14 downto 0);
    signal j_3_fu_905_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal j_3_reg_1301 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_sig_cseq_ST_st15_fsm_14 : STD_LOGIC;
    signal ap_sig_343 : BOOLEAN;
    signal exitcond6_fu_899_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_4_fu_949_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal j_4_reg_1314 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_sig_cseq_ST_st18_fsm_17 : STD_LOGIC;
    signal ap_sig_357 : BOOLEAN;
    signal exitcond8_fu_943_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal frame_1_fu_966_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal frame_1_reg_1327 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_sig_cseq_ST_st20_fsm_19 : STD_LOGIC;
    signal ap_sig_371 : BOOLEAN;
    signal tmp_17_cast1_fu_972_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_17_cast1_reg_1332 : STD_LOGIC_VECTOR (12 downto 0);
    signal exitcond5_fu_960_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_17_cast_fu_976_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_17_cast_reg_1337 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_3_fu_986_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_3_reg_1347 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_cseq_ST_st21_fsm_20 : STD_LOGIC;
    signal ap_sig_387 : BOOLEAN;
    signal next_mul7_fu_992_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal next_mul7_reg_1352 : STD_LOGIC_VECTOR (12 downto 0);
    signal exitcond7_fu_980_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal M_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st22_fsm_21 : STD_LOGIC;
    signal ap_sig_403 : BOOLEAN;
    signal next_mul9_fu_1013_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal next_mul9_reg_1368 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_sig_cseq_ST_st26_fsm_25 : STD_LOGIC;
    signal ap_sig_412 : BOOLEAN;
    signal j8_cast7_fu_1019_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal j8_cast7_reg_1373 : STD_LOGIC_VECTOR (7 downto 0);
    signal j_5_fu_1029_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal j_5_reg_1381 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_shl_fu_1035_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_shl_reg_1386 : STD_LOGIC_VECTOR (11 downto 0);
    signal exitcond9_fu_1023_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal x_1_fu_1049_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal x_1_reg_1394 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_cseq_ST_st27_fsm_26 : STD_LOGIC;
    signal ap_sig_430 : BOOLEAN;
    signal exitcond11_fu_1043_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_st28_fsm_27 : STD_LOGIC;
    signal ap_sig_445 : BOOLEAN;
    signal z2_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_644_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st36_fsm_35 : STD_LOGIC;
    signal ap_sig_456 : BOOLEAN;
    signal tmp_42_fu_1079_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_42_reg_1424 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_sig_cseq_ST_st42_fsm_41 : STD_LOGIC;
    signal ap_sig_465 : BOOLEAN;
    signal grp_fu_675_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i_reg_1429 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st48_fsm_47 : STD_LOGIC;
    signal ap_sig_474 : BOOLEAN;
    signal next_mul1_fu_1088_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal next_mul1_reg_1434 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_sig_cseq_ST_st50_fsm_49 : STD_LOGIC;
    signal ap_sig_483 : BOOLEAN;
    signal k_cast3_fu_1094_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal k_1_fu_1105_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal k_1_reg_1447 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_22_fu_1111_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_22_reg_1452 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond10_fu_1099_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_s_fu_1117_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_s_reg_1457 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st55_fsm_54 : STD_LOGIC;
    signal ap_sig_501 : BOOLEAN;
    signal grp_fu_672_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_23_reg_1462 : STD_LOGIC_VECTOR (31 downto 0);
    signal n1_cast2_fu_1124_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st56_fsm_55 : STD_LOGIC;
    signal ap_sig_512 : BOOLEAN;
    signal n_fu_1135_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal n_reg_1475 : STD_LOGIC_VECTOR (4 downto 0);
    signal next_mul2_fu_1141_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal next_mul2_reg_1480 : STD_LOGIC_VECTOR (9 downto 0);
    signal exitcond12_fu_1129_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_44_fu_1147_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_44_reg_1485 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_43_fu_1152_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_43_reg_1490 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_32_reg_1495 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st61_fsm_60 : STD_LOGIC;
    signal ap_sig_533 : BOOLEAN;
    signal tmp_34_reg_1500 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st70_fsm_69 : STD_LOGIC;
    signal ap_sig_541 : BOOLEAN;
    signal grp_fu_667_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_x_assign_2_reg_1505 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st94_fsm_93 : STD_LOGIC;
    signal ap_sig_550 : BOOLEAN;
    signal ap_sig_cseq_ST_st96_fsm_95 : STD_LOGIC;
    signal ap_sig_559 : BOOLEAN;
    signal grp_dut_sinf_or_cosf_fu_623_ap_done : STD_LOGIC;
    signal grp_dut_sinf_or_cosf_fu_623_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i_i_i_i_reg_1515 : STD_LOGIC_VECTOR (31 downto 0);
    signal z_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st97_fsm_96 : STD_LOGIC;
    signal ap_sig_574 : BOOLEAN;
    signal ap_sig_cseq_ST_st105_fsm_104 : STD_LOGIC;
    signal ap_sig_582 : BOOLEAN;
    signal xn_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal xn_ce0 : STD_LOGIC;
    signal xn_we0 : STD_LOGIC;
    signal xn_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal xk_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal xk_ce0 : STD_LOGIC;
    signal xk_we0 : STD_LOGIC;
    signal xk_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal M_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal M_ce0 : STD_LOGIC;
    signal M_we0 : STD_LOGIC;
    signal z_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal z_ce0 : STD_LOGIC;
    signal z_we0 : STD_LOGIC;
    signal z2_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal z2_ce0 : STD_LOGIC;
    signal z2_we0 : STD_LOGIC;
    signal X_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal X_ce0 : STD_LOGIC;
    signal X_we0 : STD_LOGIC;
    signal X_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_dut_knn_fu_616_ap_start : STD_LOGIC;
    signal grp_dut_knn_fu_616_ap_done : STD_LOGIC;
    signal grp_dut_knn_fu_616_ap_idle : STD_LOGIC;
    signal grp_dut_knn_fu_616_ap_ready : STD_LOGIC;
    signal grp_dut_knn_fu_616_input_r_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_dut_knn_fu_616_input_r_ce0 : STD_LOGIC;
    signal grp_dut_knn_fu_616_ap_return : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_dut_sinf_or_cosf_fu_623_ap_start : STD_LOGIC;
    signal grp_dut_sinf_or_cosf_fu_623_ap_idle : STD_LOGIC;
    signal grp_dut_sinf_or_cosf_fu_623_ap_ready : STD_LOGIC;
    signal grp_fft_config1_s_fu_636_ap_start : STD_LOGIC;
    signal grp_fft_config1_s_fu_636_ap_ce : STD_LOGIC;
    signal grp_fft_config1_s_fu_636_ap_done : STD_LOGIC;
    signal grp_fft_config1_s_fu_636_ap_idle : STD_LOGIC;
    signal grp_fft_config1_s_fu_636_ap_ready : STD_LOGIC;
    signal grp_fft_config1_s_fu_636_xn_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fft_config1_s_fu_636_xn_ce0 : STD_LOGIC;
    signal grp_fft_config1_s_fu_636_xn_we0 : STD_LOGIC;
    signal grp_fft_config1_s_fu_636_xn_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fft_config1_s_fu_636_xn_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fft_config1_s_fu_636_xn_ce1 : STD_LOGIC;
    signal grp_fft_config1_s_fu_636_xn_we1 : STD_LOGIC;
    signal grp_fft_config1_s_fu_636_xn_d1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fft_config1_s_fu_636_xk_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fft_config1_s_fu_636_xk_ce0 : STD_LOGIC;
    signal grp_fft_config1_s_fu_636_xk_we0 : STD_LOGIC;
    signal grp_fft_config1_s_fu_636_xk_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fft_config1_s_fu_636_xk_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fft_config1_s_fu_636_xk_ce1 : STD_LOGIC;
    signal grp_fft_config1_s_fu_636_xk_we1 : STD_LOGIC;
    signal grp_fft_config1_s_fu_636_xk_d1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fft_config1_s_fu_636_status_data_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fft_config1_s_fu_636_status_data_V_write : STD_LOGIC;
    signal grp_fft_config1_s_fu_636_config_ch_data_V_read : STD_LOGIC;
    signal ap_sig_cseq_ST_st17_fsm_16 : STD_LOGIC;
    signal ap_sig_696 : BOOLEAN;
    signal i_reg_344 : STD_LOGIC_VECTOR (8 downto 0);
    signal phi_mul2_reg_355 : STD_LOGIC_VECTOR (13 downto 0);
    signal j_reg_367 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_sig_cseq_ST_st8_fsm_7 : STD_LOGIC;
    signal ap_sig_717 : BOOLEAN;
    signal phi_mul_reg_378 : STD_LOGIC_VECTOR (12 downto 0);
    signal i1_reg_389 : STD_LOGIC_VECTOR (8 downto 0);
    signal phi_mul4_reg_400 : STD_LOGIC_VECTOR (13 downto 0);
    signal j2_reg_412 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_sig_cseq_ST_st11_fsm_10 : STD_LOGIC;
    signal ap_sig_738 : BOOLEAN;
    signal tmp_1_reg_423 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_10_fu_839_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_11_reg_434 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_15_fu_856_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i4_reg_445 : STD_LOGIC_VECTOR (5 downto 0);
    signal j5_reg_456 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_sig_cseq_ST_st16_fsm_15 : STD_LOGIC;
    signal ap_sig_768 : BOOLEAN;
    signal j6_reg_468 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_sig_cseq_ST_st19_fsm_18 : STD_LOGIC;
    signal ap_sig_779 : BOOLEAN;
    signal frame_reg_479 : STD_LOGIC_VECTOR (5 downto 0);
    signal i7_reg_490 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_cseq_ST_st25_fsm_24 : STD_LOGIC;
    signal ap_sig_794 : BOOLEAN;
    signal phi_mul6_reg_502 : STD_LOGIC_VECTOR (12 downto 0);
    signal j8_reg_513 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_sig_cseq_ST_st49_fsm_48 : STD_LOGIC;
    signal ap_sig_805 : BOOLEAN;
    signal phi_mul8_reg_524 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_x_assign_reg_536 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_reg_548 : STD_LOGIC_VECTOR (7 downto 0);
    signal k_reg_559 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_sig_cseq_ST_st108_fsm_107 : STD_LOGIC;
    signal ap_sig_824 : BOOLEAN;
    signal phi_mul1_reg_570 : STD_LOGIC_VECTOR (9 downto 0);
    signal sum9_reg_582 : STD_LOGIC_VECTOR (31 downto 0);
    signal n1_reg_594 : STD_LOGIC_VECTOR (4 downto 0);
    signal phi_mul3_reg_605 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_reg_grp_dut_knn_fu_616_ap_start : STD_LOGIC := '0';
    signal ap_sig_cseq_ST_st109_fsm_108 : STD_LOGIC;
    signal ap_sig_845 : BOOLEAN;
    signal ap_reg_grp_dut_sinf_or_cosf_fu_623_ap_start : STD_LOGIC := '0';
    signal ap_sig_cseq_ST_st95_fsm_94 : STD_LOGIC;
    signal ap_sig_862 : BOOLEAN;
    signal ap_reg_grp_fft_config1_s_fu_636_ap_start : STD_LOGIC := '0';
    signal tmp_4_fu_711_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_9_fu_739_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_39_cast_fu_754_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_43_cast_fu_819_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_42_cast_fu_824_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_3_fu_834_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_13_fu_851_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_46_cast_fu_920_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_18_fu_925_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_21_fu_955_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_48_cast_fu_1003_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_19_fu_1008_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_26_fu_1069_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_27_fu_1074_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_50_cast_fu_1084_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_54_cast_fu_1157_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_52_cast_fu_1161_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal xn_M_imag_addr_23941_part_set_fu_934_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_644_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_644_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st32_fsm_31 : STD_LOGIC;
    signal ap_sig_958 : BOOLEAN;
    signal ap_sig_cseq_ST_st66_fsm_65 : STD_LOGIC;
    signal ap_sig_965 : BOOLEAN;
    signal ap_sig_cseq_ST_st101_fsm_100 : STD_LOGIC;
    signal ap_sig_972 : BOOLEAN;
    signal grp_fu_651_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_651_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st62_fsm_61 : STD_LOGIC;
    signal ap_sig_984 : BOOLEAN;
    signal ap_sig_cseq_ST_st71_fsm_70 : STD_LOGIC;
    signal ap_sig_991 : BOOLEAN;
    signal ap_sig_cseq_ST_st75_fsm_74 : STD_LOGIC;
    signal ap_sig_998 : BOOLEAN;
    signal ap_sig_cseq_ST_st79_fsm_78 : STD_LOGIC;
    signal ap_sig_1008 : BOOLEAN;
    signal grp_fu_672_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_fu_734_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_6_cast_fu_744_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_30_fu_796_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_41_cast_fu_804_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_14_cast_fu_792_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_38_fu_813_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_39_fu_887_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_18_cast_fu_911_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_40_fu_915_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal xn_input_M_real_load_toint_fu_930_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_41_fu_998_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp1_fu_1055_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp1_cast_fu_1060_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_25_fu_1064_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_return_preg : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (108 downto 0);

    component dut_knn IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        input_r_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        input_r_ce0 : OUT STD_LOGIC;
        input_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component dut_sinf_or_cosf IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        t_in : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component fft_config1_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ce : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        xn_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        xn_ce0 : OUT STD_LOGIC;
        xn_we0 : OUT STD_LOGIC;
        xn_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        xn_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        xn_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        xn_ce1 : OUT STD_LOGIC;
        xn_we1 : OUT STD_LOGIC;
        xn_d1 : OUT STD_LOGIC_VECTOR (63 downto 0);
        xn_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
        xk_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        xk_ce0 : OUT STD_LOGIC;
        xk_we0 : OUT STD_LOGIC;
        xk_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        xk_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        xk_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        xk_ce1 : OUT STD_LOGIC;
        xk_we1 : OUT STD_LOGIC;
        xk_d1 : OUT STD_LOGIC_VECTOR (63 downto 0);
        xk_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
        status_data_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        status_data_V_full_n : IN STD_LOGIC;
        status_data_V_write : OUT STD_LOGIC;
        config_ch_data_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        config_ch_data_V_empty_n : IN STD_LOGIC;
        config_ch_data_V_read : OUT STD_LOGIC );
    end component;


    component dut_fadd_32ns_32ns_32_5_full_dsp IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component dut_fmul_32ns_32ns_32_4_max_dsp IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component dut_fdiv_32ns_32ns_32_16 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component dut_sitofp_32ns_32_6 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component dut_flog_32ns_32ns_32_13_full_dsp IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component dut_mfcc_hamming IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component dut_mfcc_xn_input_M_real IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (13 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component dut_mfcc_melfb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component dut_mfcc_xn IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component dut_mfcc_xk IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (63 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component dut_mfcc_M IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (13 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component dut_mfcc_z IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component dut_mfcc_z2 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    hamming_U : component dut_mfcc_hamming
    generic map (
        DataWidth => 32,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => hamming_address0,
        ce0 => hamming_ce0,
        q0 => hamming_q0);

    xn_input_M_real_U : component dut_mfcc_xn_input_M_real
    generic map (
        DataWidth => 32,
        AddressRange => 12544,
        AddressWidth => 14)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => xn_input_M_real_address0,
        ce0 => xn_input_M_real_ce0,
        we0 => xn_input_M_real_we0,
        d0 => M_q0,
        q0 => xn_input_M_real_q0);

    melfb_U : component dut_mfcc_melfb
    generic map (
        DataWidth => 32,
        AddressRange => 2580,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => melfb_address0,
        ce0 => melfb_ce0,
        q0 => melfb_q0);

    xn_U : component dut_mfcc_xn
    generic map (
        DataWidth => 64,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => xn_address0,
        ce0 => xn_ce0,
        we0 => xn_we0,
        d0 => xn_d0);

    xk_U : component dut_mfcc_xk
    generic map (
        DataWidth => 64,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => xk_address0,
        ce0 => xk_ce0,
        we0 => xk_we0,
        d0 => ap_const_lv64_0,
        q0 => xk_q0);

    M_U : component dut_mfcc_M
    generic map (
        DataWidth => 32,
        AddressRange => 12544,
        AddressWidth => 14)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => M_address0,
        ce0 => M_ce0,
        we0 => M_we0,
        d0 => grp_fu_651_p2,
        q0 => M_q0);

    z_U : component dut_mfcc_z
    generic map (
        DataWidth => 32,
        AddressRange => 980,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => z_address0,
        ce0 => z_ce0,
        we0 => z_we0,
        d0 => tmp_i_reg_1429,
        q0 => z_q0);

    z2_U : component dut_mfcc_z2
    generic map (
        DataWidth => 32,
        AddressRange => 129,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => z2_address0,
        ce0 => z2_ce0,
        we0 => z2_we0,
        d0 => grp_fu_651_p2,
        q0 => z2_q0);

    X_U : component dut_mfcc_z
    generic map (
        DataWidth => 32,
        AddressRange => 980,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => X_address0,
        ce0 => X_ce0,
        we0 => X_we0,
        d0 => grp_fu_651_p2,
        q0 => X_q0);

    grp_dut_knn_fu_616 : component dut_knn
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_dut_knn_fu_616_ap_start,
        ap_done => grp_dut_knn_fu_616_ap_done,
        ap_idle => grp_dut_knn_fu_616_ap_idle,
        ap_ready => grp_dut_knn_fu_616_ap_ready,
        input_r_address0 => grp_dut_knn_fu_616_input_r_address0,
        input_r_ce0 => grp_dut_knn_fu_616_input_r_ce0,
        input_r_q0 => X_q0,
        ap_return => grp_dut_knn_fu_616_ap_return);

    grp_dut_sinf_or_cosf_fu_623 : component dut_sinf_or_cosf
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_dut_sinf_or_cosf_fu_623_ap_start,
        ap_done => grp_dut_sinf_or_cosf_fu_623_ap_done,
        ap_idle => grp_dut_sinf_or_cosf_fu_623_ap_idle,
        ap_ready => grp_dut_sinf_or_cosf_fu_623_ap_ready,
        t_in => p_x_assign_2_reg_1505,
        ap_return => grp_dut_sinf_or_cosf_fu_623_ap_return);

    grp_fft_config1_s_fu_636 : component fft_config1_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_fft_config1_s_fu_636_ap_start,
        ap_ce => grp_fft_config1_s_fu_636_ap_ce,
        ap_done => grp_fft_config1_s_fu_636_ap_done,
        ap_idle => grp_fft_config1_s_fu_636_ap_idle,
        ap_ready => grp_fft_config1_s_fu_636_ap_ready,
        xn_address0 => grp_fft_config1_s_fu_636_xn_address0,
        xn_ce0 => grp_fft_config1_s_fu_636_xn_ce0,
        xn_we0 => grp_fft_config1_s_fu_636_xn_we0,
        xn_d0 => grp_fft_config1_s_fu_636_xn_d0,
        xn_q0 => ap_const_lv64_0,
        xn_address1 => grp_fft_config1_s_fu_636_xn_address1,
        xn_ce1 => grp_fft_config1_s_fu_636_xn_ce1,
        xn_we1 => grp_fft_config1_s_fu_636_xn_we1,
        xn_d1 => grp_fft_config1_s_fu_636_xn_d1,
        xn_q1 => ap_const_lv64_0,
        xk_address0 => grp_fft_config1_s_fu_636_xk_address0,
        xk_ce0 => grp_fft_config1_s_fu_636_xk_ce0,
        xk_we0 => grp_fft_config1_s_fu_636_xk_we0,
        xk_d0 => grp_fft_config1_s_fu_636_xk_d0,
        xk_q0 => ap_const_lv64_0,
        xk_address1 => grp_fft_config1_s_fu_636_xk_address1,
        xk_ce1 => grp_fft_config1_s_fu_636_xk_ce1,
        xk_we1 => grp_fft_config1_s_fu_636_xk_we1,
        xk_d1 => grp_fft_config1_s_fu_636_xk_d1,
        xk_q1 => ap_const_lv64_0,
        status_data_V_din => grp_fft_config1_s_fu_636_status_data_V_din,
        status_data_V_full_n => ap_const_logic_1,
        status_data_V_write => grp_fft_config1_s_fu_636_status_data_V_write,
        config_ch_data_V_dout => ap_const_lv16_0,
        config_ch_data_V_empty_n => ap_const_logic_1,
        config_ch_data_V_read => grp_fft_config1_s_fu_636_config_ch_data_V_read);

    dut_fadd_32ns_32ns_32_5_full_dsp_U23 : component dut_fadd_32ns_32ns_32_5_full_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_644_p0,
        din1 => grp_fu_644_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_644_p2);

    dut_fmul_32ns_32ns_32_4_max_dsp_U24 : component dut_fmul_32ns_32ns_32_4_max_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_651_p0,
        din1 => grp_fu_651_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_651_p2);

    dut_fdiv_32ns_32ns_32_16_U25 : component dut_fdiv_32ns_32ns_32_16
    generic map (
        ID => 1,
        NUM_STAGE => 16,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_681,
        din1 => ap_const_lv32_42200000,
        ce => ap_const_logic_1,
        dout => grp_fu_667_p2);

    dut_sitofp_32ns_32_6_U26 : component dut_sitofp_32ns_32_6
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_672_p0,
        ce => ap_const_logic_1,
        dout => grp_fu_672_p1);

    dut_flog_32ns_32ns_32_13_full_dsp_U27 : component dut_flog_32ns_32ns_32_13_full_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 13,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => ap_const_lv32_0,
        din1 => p_x_assign_reg_536,
        ce => ap_const_logic_1,
        dout => grp_fu_675_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_reg_grp_dut_knn_fu_616_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_grp_dut_knn_fu_616_ap_start <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_st20_fsm_19) and not((ap_const_lv1_0 = exitcond5_fu_960_p2)))) then 
                    ap_reg_grp_dut_knn_fu_616_ap_start <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_dut_knn_fu_616_ap_ready)) then 
                    ap_reg_grp_dut_knn_fu_616_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_grp_dut_sinf_or_cosf_fu_623_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_grp_dut_sinf_or_cosf_fu_623_ap_start <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_cseq_ST_st95_fsm_94)) then 
                    ap_reg_grp_dut_sinf_or_cosf_fu_623_ap_start <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_dut_sinf_or_cosf_fu_623_ap_ready)) then 
                    ap_reg_grp_dut_sinf_or_cosf_fu_623_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_grp_fft_config1_s_fu_636_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_grp_fft_config1_s_fu_636_ap_start <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_st15_fsm_14) and not((ap_const_lv1_0 = exitcond6_fu_899_p2)))) then 
                    ap_reg_grp_fft_config1_s_fu_636_ap_start <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_fft_config1_s_fu_636_ap_ready)) then 
                    ap_reg_grp_fft_config1_s_fu_636_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_return_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_preg <= ap_const_lv1_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_st109_fsm_108) and not((ap_const_logic_0 = grp_dut_knn_fu_616_ap_done)))) then 
                    ap_return_preg <= grp_dut_knn_fu_616_ap_return;
                end if; 
            end if;
        end if;
    end process;


    frame_reg_479_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st50_fsm_49) and not((ap_const_lv1_0 = exitcond10_fu_1099_p2)))) then 
                frame_reg_479 <= frame_1_reg_1327;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st14_fsm_13) and not(ap_sig_330) and not((ap_const_lv1_0 = exitcond4_fu_862_p2)))) then 
                frame_reg_479 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    i1_reg_389_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9) and not((ap_const_lv1_0 = exitcond3_fu_780_p2)))) then 
                i1_reg_389 <= i_2_reg_1241;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((exitcond_fu_699_p2 = ap_const_lv1_0)))) then 
                i1_reg_389 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    i4_reg_445_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st13_fsm_12) and not((ap_const_lv1_0 = tmp_15_fu_856_p2)))) then 
                i4_reg_445 <= ap_const_lv6_0;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st18_fsm_17) and not((ap_const_lv1_0 = exitcond8_fu_943_p2)))) then 
                i4_reg_445 <= i_4_reg_1288;
            end if; 
        end if;
    end process;

    i7_reg_490_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st20_fsm_19) and (ap_const_lv1_0 = exitcond5_fu_960_p2))) then 
                i7_reg_490 <= ap_const_lv8_0;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st25_fsm_24)) then 
                i7_reg_490 <= i_3_reg_1347;
            end if; 
        end if;
    end process;

    i_reg_344_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and not((ap_const_lv1_0 = exitcond2_fu_716_p2)))) then 
                i_reg_344 <= i_1_reg_1190;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                i_reg_344 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    j2_reg_412_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8) and (ap_const_lv1_0 = exitcond1_fu_764_p2))) then 
                j2_reg_412 <= ap_const_lv6_0;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_10)) then 
                j2_reg_412 <= j_2_reg_1254;
            end if; 
        end if;
    end process;

    j5_reg_456_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st16_fsm_15)) then 
                j5_reg_456 <= j_3_reg_1301;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st14_fsm_13) and (ap_const_lv1_0 = exitcond4_fu_862_p2) and not(ap_sig_330))) then 
                j5_reg_456 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    j6_reg_468_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st19_fsm_18)) then 
                j6_reg_468 <= j_4_reg_1314;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st17_fsm_16) and not((ap_const_logic_0 = grp_fft_config1_s_fu_636_ap_done)))) then 
                j6_reg_468 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    j8_reg_513_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st21_fsm_20) and not((ap_const_lv1_0 = exitcond7_fu_980_p2)))) then 
                j8_reg_513 <= ap_const_lv5_0;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st49_fsm_48)) then 
                j8_reg_513 <= j_5_reg_1381;
            end if; 
        end if;
    end process;

    j_reg_367_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
                j_reg_367 <= ap_const_lv6_0;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7)) then 
                j_reg_367 <= j_1_reg_1208;
            end if; 
        end if;
    end process;

    k_reg_559_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st26_fsm_25) and not((ap_const_lv1_0 = exitcond9_fu_1023_p2)))) then 
                k_reg_559 <= ap_const_lv5_0;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st108_fsm_107)) then 
                k_reg_559 <= k_1_reg_1447;
            end if; 
        end if;
    end process;

    n1_reg_594_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st105_fsm_104)) then 
                n1_reg_594 <= n_reg_1475;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st55_fsm_54)) then 
                n1_reg_594 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    p_x_assign_reg_536_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st26_fsm_25) and (ap_const_lv1_0 = exitcond9_fu_1023_p2))) then 
                p_x_assign_reg_536 <= ap_const_lv32_0;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st36_fsm_35)) then 
                p_x_assign_reg_536 <= grp_fu_644_p2;
            end if; 
        end if;
    end process;

    phi_mul1_reg_570_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st26_fsm_25) and not((ap_const_lv1_0 = exitcond9_fu_1023_p2)))) then 
                phi_mul1_reg_570 <= ap_const_lv10_0;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st108_fsm_107)) then 
                phi_mul1_reg_570 <= next_mul1_reg_1434;
            end if; 
        end if;
    end process;

    phi_mul2_reg_355_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and not((ap_const_lv1_0 = exitcond2_fu_716_p2)))) then 
                phi_mul2_reg_355 <= next_mul3_reg_1177;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                phi_mul2_reg_355 <= ap_const_lv14_0;
            end if; 
        end if;
    end process;

    phi_mul3_reg_605_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st105_fsm_104)) then 
                phi_mul3_reg_605 <= next_mul2_reg_1480;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st55_fsm_54)) then 
                phi_mul3_reg_605 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    phi_mul4_reg_400_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9) and not((ap_const_lv1_0 = exitcond3_fu_780_p2)))) then 
                phi_mul4_reg_400 <= next_mul5_reg_1233;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((exitcond_fu_699_p2 = ap_const_lv1_0)))) then 
                phi_mul4_reg_400 <= ap_const_lv14_0;
            end if; 
        end if;
    end process;

    phi_mul6_reg_502_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st20_fsm_19) and (ap_const_lv1_0 = exitcond5_fu_960_p2))) then 
                phi_mul6_reg_502 <= ap_const_lv13_0;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st25_fsm_24)) then 
                phi_mul6_reg_502 <= next_mul7_reg_1352;
            end if; 
        end if;
    end process;

    phi_mul8_reg_524_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st21_fsm_20) and not((ap_const_lv1_0 = exitcond7_fu_980_p2)))) then 
                phi_mul8_reg_524 <= ap_const_lv10_0;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st49_fsm_48)) then 
                phi_mul8_reg_524 <= next_mul9_reg_1368;
            end if; 
        end if;
    end process;

    phi_mul_reg_378_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
                phi_mul_reg_378 <= ap_const_lv13_0;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7)) then 
                phi_mul_reg_378 <= next_mul_reg_1213;
            end if; 
        end if;
    end process;

    sum9_reg_582_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st105_fsm_104)) then 
                sum9_reg_582 <= grp_fu_644_p2;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st55_fsm_54)) then 
                sum9_reg_582 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    tmp_11_reg_434_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_11) and not((ap_const_lv1_0 = tmp_10_fu_839_p2)))) then 
                tmp_11_reg_434 <= ap_const_lv8_0;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st13_fsm_12) and (ap_const_lv1_0 = tmp_15_fu_856_p2))) then 
                tmp_11_reg_434 <= tmp_12_fu_845_p2;
            end if; 
        end if;
    end process;

    tmp_1_reg_423_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8) and not((ap_const_lv1_0 = exitcond1_fu_764_p2)))) then 
                tmp_1_reg_423 <= ap_const_lv8_0;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_11) and (ap_const_lv1_0 = tmp_10_fu_839_p2))) then 
                tmp_1_reg_423 <= tmp_2_fu_828_p2;
            end if; 
        end if;
    end process;

    x_reg_548_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st26_fsm_25) and (ap_const_lv1_0 = exitcond9_fu_1023_p2))) then 
                x_reg_548 <= ap_const_lv8_0;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st36_fsm_35)) then 
                x_reg_548 <= x_1_reg_1394;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st20_fsm_19)) then
                frame_1_reg_1327 <= frame_1_fu_966_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then
                hamming_load_reg_1200 <= hamming_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then
                i_1_reg_1190 <= i_1_fu_705_p2;
                    i_cast_reg_1182(8 downto 0) <= i_cast_fu_695_p1(8 downto 0);
                next_mul3_reg_1177 <= next_mul3_fu_689_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8)) then
                i_2_reg_1241 <= i_2_fu_770_p2;
                next_mul5_reg_1233 <= next_mul5_fu_758_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st21_fsm_20)) then
                i_3_reg_1347 <= i_3_fu_986_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st14_fsm_13) and not(ap_sig_330))) then
                i_4_reg_1288 <= i_4_fu_868_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st26_fsm_25)) then
                    j8_cast7_reg_1373(4 downto 0) <= j8_cast7_fu_1019_p1(4 downto 0);
                j_5_reg_1381 <= j_5_fu_1029_p2;
                next_mul9_reg_1368 <= next_mul9_fu_1013_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then
                j_1_reg_1208 <= j_1_fu_722_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9)) then
                j_2_reg_1254 <= j_2_fu_786_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st15_fsm_14)) then
                j_3_reg_1301 <= j_3_fu_905_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st18_fsm_17)) then
                j_4_reg_1314 <= j_4_fu_949_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st50_fsm_49)) then
                k_1_reg_1447 <= k_1_fu_1105_p2;
                next_mul1_reg_1434 <= next_mul1_fu_1088_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st56_fsm_55)) then
                n_reg_1475 <= n_fu_1135_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st56_fsm_55) and (ap_const_lv1_0 = exitcond12_fu_1129_p2))) then
                next_mul2_reg_1480 <= next_mul2_fu_1141_p2;
                tmp_44_reg_1485 <= tmp_44_fu_1147_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st21_fsm_20) and (ap_const_lv1_0 = exitcond7_fu_980_p2))) then
                next_mul7_reg_1352 <= next_mul7_fu_992_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and (ap_const_lv1_0 = exitcond2_fu_716_p2))) then
                next_mul_reg_1213 <= next_mul_fu_728_p2;
                tmp_24_reg_1223 <= tmp_24_fu_748_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st55_fsm_54)) then
                    p_s_reg_1457(0) <= p_s_fu_1117_p3(0);    p_s_reg_1457(2) <= p_s_fu_1117_p3(2);    p_s_reg_1457(5 downto 4) <= p_s_fu_1117_p3(5 downto 4);    p_s_reg_1457(8 downto 7) <= p_s_fu_1117_p3(8 downto 7);    p_s_reg_1457(12) <= p_s_fu_1117_p3(12);    p_s_reg_1457(16) <= p_s_fu_1117_p3(16);    p_s_reg_1457(18) <= p_s_fu_1117_p3(18);    p_s_reg_1457(23 downto 22) <= p_s_fu_1117_p3(23 downto 22);
                tmp_23_reg_1462 <= grp_fu_672_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st26_fsm_25) and (ap_const_lv1_0 = exitcond9_fu_1023_p2))) then
                    p_shl_reg_1386(11 downto 7) <= p_shl_fu_1035_p3(11 downto 7);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st94_fsm_93)) then
                p_x_assign_2_reg_1505 <= grp_fu_667_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st31_fsm_30) or (ap_const_logic_1 = ap_sig_cseq_ST_st65_fsm_64) or (ap_const_logic_1 = ap_sig_cseq_ST_st74_fsm_73) or (ap_const_logic_1 = ap_sig_cseq_ST_st78_fsm_77) or (ap_const_logic_1 = ap_sig_cseq_ST_st100_fsm_99))) then
                reg_681 <= grp_fu_651_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st20_fsm_19) and (ap_const_lv1_0 = exitcond5_fu_960_p2))) then
                    tmp_17_cast1_reg_1332(5 downto 0) <= tmp_17_cast1_fu_972_p1(5 downto 0);
                    tmp_17_cast_reg_1337(5 downto 0) <= tmp_17_cast_fu_976_p1(5 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st50_fsm_49) and (ap_const_lv1_0 = exitcond10_fu_1099_p2))) then
                tmp_22_reg_1452 <= tmp_22_fu_1111_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9) and (ap_const_lv1_0 = exitcond3_fu_780_p2))) then
                tmp_31_reg_1259 <= tmp_31_fu_808_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st61_fsm_60)) then
                tmp_32_reg_1495 <= grp_fu_672_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st70_fsm_69)) then
                tmp_34_reg_1500 <= grp_fu_644_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st42_fsm_41)) then
                tmp_42_reg_1424 <= tmp_42_fu_1079_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st56_fsm_55) and not((ap_const_lv1_0 = exitcond12_fu_1129_p2)))) then
                tmp_43_reg_1490 <= tmp_43_fu_1152_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st14_fsm_13) and (ap_const_lv1_0 = exitcond4_fu_862_p2) and not(ap_sig_330))) then
                    tmp_45_cast_reg_1293(13 downto 8) <= tmp_45_cast_fu_895_p1(13 downto 8);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8) and (ap_const_lv1_0 = exitcond1_fu_764_p2))) then
                    tmp_5_cast_reg_1246(8 downto 0) <= tmp_5_cast_fu_776_p1(8 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st96_fsm_95) and not((ap_const_logic_0 = grp_dut_sinf_or_cosf_fu_623_ap_done)))) then
                tmp_i_i_i_i_reg_1515 <= grp_dut_sinf_or_cosf_fu_623_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st48_fsm_47)) then
                tmp_i_reg_1429 <= grp_fu_675_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st27_fsm_26)) then
                x_1_reg_1394 <= x_1_fu_1049_p2;
            end if;
        end if;
    end process;
    i_cast_reg_1182(12 downto 9) <= "0000";
    tmp_5_cast_reg_1246(14 downto 9) <= "000000";
    tmp_45_cast_reg_1293(7 downto 0) <= "00000000";
    tmp_45_cast_reg_1293(14) <= '0';
    tmp_17_cast1_reg_1332(12 downto 6) <= "0000000";
    tmp_17_cast_reg_1337(9 downto 6) <= "0000";
    j8_cast7_reg_1373(7 downto 5) <= "000";
    p_shl_reg_1386(6 downto 0) <= "0000000";
    p_s_reg_1457(1) <= '1';
    p_s_reg_1457(3 downto 3) <= "1";
    p_s_reg_1457(6 downto 6) <= "0";
    p_s_reg_1457(11 downto 9) <= "100";
    p_s_reg_1457(15 downto 13) <= "111";
    p_s_reg_1457(17 downto 17) <= "0";
    p_s_reg_1457(21 downto 19) <= "100";
    p_s_reg_1457(31 downto 24) <= "00111110";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, exitcond_fu_699_p2, exitcond2_fu_716_p2, exitcond1_fu_764_p2, exitcond3_fu_780_p2, exitcond4_fu_862_p2, ap_sig_330, exitcond6_fu_899_p2, exitcond8_fu_943_p2, exitcond5_fu_960_p2, exitcond7_fu_980_p2, exitcond9_fu_1023_p2, exitcond11_fu_1043_p2, exitcond10_fu_1099_p2, exitcond12_fu_1129_p2, grp_dut_sinf_or_cosf_fu_623_ap_done, grp_dut_knn_fu_616_ap_done, grp_fft_config1_s_fu_636_ap_done, tmp_10_fu_839_p2, tmp_15_fu_856_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                if (not((exitcond_fu_699_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_st9_fsm_8;
                else
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                end if;
            when ap_ST_st3_fsm_2 => 
                ap_NS_fsm <= ap_ST_st4_fsm_3;
            when ap_ST_st4_fsm_3 => 
                if ((ap_const_lv1_0 = exitcond2_fu_716_p2)) then
                    ap_NS_fsm <= ap_ST_st5_fsm_4;
                else
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                end if;
            when ap_ST_st5_fsm_4 => 
                ap_NS_fsm <= ap_ST_st6_fsm_5;
            when ap_ST_st6_fsm_5 => 
                ap_NS_fsm <= ap_ST_st7_fsm_6;
            when ap_ST_st7_fsm_6 => 
                ap_NS_fsm <= ap_ST_st8_fsm_7;
            when ap_ST_st8_fsm_7 => 
                ap_NS_fsm <= ap_ST_st4_fsm_3;
            when ap_ST_st9_fsm_8 => 
                if ((ap_const_lv1_0 = exitcond1_fu_764_p2)) then
                    ap_NS_fsm <= ap_ST_st10_fsm_9;
                else
                    ap_NS_fsm <= ap_ST_st12_fsm_11;
                end if;
            when ap_ST_st10_fsm_9 => 
                if ((ap_const_lv1_0 = exitcond3_fu_780_p2)) then
                    ap_NS_fsm <= ap_ST_st11_fsm_10;
                else
                    ap_NS_fsm <= ap_ST_st9_fsm_8;
                end if;
            when ap_ST_st11_fsm_10 => 
                ap_NS_fsm <= ap_ST_st10_fsm_9;
            when ap_ST_st12_fsm_11 => 
                if (not((ap_const_lv1_0 = tmp_10_fu_839_p2))) then
                    ap_NS_fsm <= ap_ST_st13_fsm_12;
                else
                    ap_NS_fsm <= ap_ST_st12_fsm_11;
                end if;
            when ap_ST_st13_fsm_12 => 
                if (not((ap_const_lv1_0 = tmp_15_fu_856_p2))) then
                    ap_NS_fsm <= ap_ST_st14_fsm_13;
                else
                    ap_NS_fsm <= ap_ST_st13_fsm_12;
                end if;
            when ap_ST_st14_fsm_13 => 
                if (((ap_const_lv1_0 = exitcond4_fu_862_p2) and not(ap_sig_330))) then
                    ap_NS_fsm <= ap_ST_st15_fsm_14;
                elsif ((not(ap_sig_330) and not((ap_const_lv1_0 = exitcond4_fu_862_p2)))) then
                    ap_NS_fsm <= ap_ST_st20_fsm_19;
                else
                    ap_NS_fsm <= ap_ST_st14_fsm_13;
                end if;
            when ap_ST_st15_fsm_14 => 
                if (not((ap_const_lv1_0 = exitcond6_fu_899_p2))) then
                    ap_NS_fsm <= ap_ST_st17_fsm_16;
                else
                    ap_NS_fsm <= ap_ST_st16_fsm_15;
                end if;
            when ap_ST_st16_fsm_15 => 
                ap_NS_fsm <= ap_ST_st15_fsm_14;
            when ap_ST_st17_fsm_16 => 
                if (not((ap_const_logic_0 = grp_fft_config1_s_fu_636_ap_done))) then
                    ap_NS_fsm <= ap_ST_st18_fsm_17;
                else
                    ap_NS_fsm <= ap_ST_st17_fsm_16;
                end if;
            when ap_ST_st18_fsm_17 => 
                if (not((ap_const_lv1_0 = exitcond8_fu_943_p2))) then
                    ap_NS_fsm <= ap_ST_st14_fsm_13;
                else
                    ap_NS_fsm <= ap_ST_st19_fsm_18;
                end if;
            when ap_ST_st19_fsm_18 => 
                ap_NS_fsm <= ap_ST_st18_fsm_17;
            when ap_ST_st20_fsm_19 => 
                if ((ap_const_lv1_0 = exitcond5_fu_960_p2)) then
                    ap_NS_fsm <= ap_ST_st21_fsm_20;
                else
                    ap_NS_fsm <= ap_ST_st109_fsm_108;
                end if;
            when ap_ST_st21_fsm_20 => 
                if (not((ap_const_lv1_0 = exitcond7_fu_980_p2))) then
                    ap_NS_fsm <= ap_ST_st26_fsm_25;
                else
                    ap_NS_fsm <= ap_ST_st22_fsm_21;
                end if;
            when ap_ST_st22_fsm_21 => 
                ap_NS_fsm <= ap_ST_st23_fsm_22;
            when ap_ST_st23_fsm_22 => 
                ap_NS_fsm <= ap_ST_st24_fsm_23;
            when ap_ST_st24_fsm_23 => 
                ap_NS_fsm <= ap_ST_st25_fsm_24;
            when ap_ST_st25_fsm_24 => 
                ap_NS_fsm <= ap_ST_st21_fsm_20;
            when ap_ST_st26_fsm_25 => 
                if ((ap_const_lv1_0 = exitcond9_fu_1023_p2)) then
                    ap_NS_fsm <= ap_ST_st27_fsm_26;
                else
                    ap_NS_fsm <= ap_ST_st50_fsm_49;
                end if;
            when ap_ST_st27_fsm_26 => 
                if (not((ap_const_lv1_0 = exitcond11_fu_1043_p2))) then
                    ap_NS_fsm <= ap_ST_st37_fsm_36;
                else
                    ap_NS_fsm <= ap_ST_st28_fsm_27;
                end if;
            when ap_ST_st28_fsm_27 => 
                ap_NS_fsm <= ap_ST_st29_fsm_28;
            when ap_ST_st29_fsm_28 => 
                ap_NS_fsm <= ap_ST_st30_fsm_29;
            when ap_ST_st30_fsm_29 => 
                ap_NS_fsm <= ap_ST_st31_fsm_30;
            when ap_ST_st31_fsm_30 => 
                ap_NS_fsm <= ap_ST_st32_fsm_31;
            when ap_ST_st32_fsm_31 => 
                ap_NS_fsm <= ap_ST_st33_fsm_32;
            when ap_ST_st33_fsm_32 => 
                ap_NS_fsm <= ap_ST_st34_fsm_33;
            when ap_ST_st34_fsm_33 => 
                ap_NS_fsm <= ap_ST_st35_fsm_34;
            when ap_ST_st35_fsm_34 => 
                ap_NS_fsm <= ap_ST_st36_fsm_35;
            when ap_ST_st36_fsm_35 => 
                ap_NS_fsm <= ap_ST_st27_fsm_26;
            when ap_ST_st37_fsm_36 => 
                ap_NS_fsm <= ap_ST_st38_fsm_37;
            when ap_ST_st38_fsm_37 => 
                ap_NS_fsm <= ap_ST_st39_fsm_38;
            when ap_ST_st39_fsm_38 => 
                ap_NS_fsm <= ap_ST_st40_fsm_39;
            when ap_ST_st40_fsm_39 => 
                ap_NS_fsm <= ap_ST_st41_fsm_40;
            when ap_ST_st41_fsm_40 => 
                ap_NS_fsm <= ap_ST_st42_fsm_41;
            when ap_ST_st42_fsm_41 => 
                ap_NS_fsm <= ap_ST_st43_fsm_42;
            when ap_ST_st43_fsm_42 => 
                ap_NS_fsm <= ap_ST_st44_fsm_43;
            when ap_ST_st44_fsm_43 => 
                ap_NS_fsm <= ap_ST_st45_fsm_44;
            when ap_ST_st45_fsm_44 => 
                ap_NS_fsm <= ap_ST_st46_fsm_45;
            when ap_ST_st46_fsm_45 => 
                ap_NS_fsm <= ap_ST_st47_fsm_46;
            when ap_ST_st47_fsm_46 => 
                ap_NS_fsm <= ap_ST_st48_fsm_47;
            when ap_ST_st48_fsm_47 => 
                ap_NS_fsm <= ap_ST_st49_fsm_48;
            when ap_ST_st49_fsm_48 => 
                ap_NS_fsm <= ap_ST_st26_fsm_25;
            when ap_ST_st50_fsm_49 => 
                if ((ap_const_lv1_0 = exitcond10_fu_1099_p2)) then
                    ap_NS_fsm <= ap_ST_st51_fsm_50;
                else
                    ap_NS_fsm <= ap_ST_st20_fsm_19;
                end if;
            when ap_ST_st51_fsm_50 => 
                ap_NS_fsm <= ap_ST_st52_fsm_51;
            when ap_ST_st52_fsm_51 => 
                ap_NS_fsm <= ap_ST_st53_fsm_52;
            when ap_ST_st53_fsm_52 => 
                ap_NS_fsm <= ap_ST_st54_fsm_53;
            when ap_ST_st54_fsm_53 => 
                ap_NS_fsm <= ap_ST_st55_fsm_54;
            when ap_ST_st55_fsm_54 => 
                ap_NS_fsm <= ap_ST_st56_fsm_55;
            when ap_ST_st56_fsm_55 => 
                if (not((ap_const_lv1_0 = exitcond12_fu_1129_p2))) then
                    ap_NS_fsm <= ap_ST_st106_fsm_105;
                else
                    ap_NS_fsm <= ap_ST_st57_fsm_56;
                end if;
            when ap_ST_st57_fsm_56 => 
                ap_NS_fsm <= ap_ST_st58_fsm_57;
            when ap_ST_st58_fsm_57 => 
                ap_NS_fsm <= ap_ST_st59_fsm_58;
            when ap_ST_st59_fsm_58 => 
                ap_NS_fsm <= ap_ST_st60_fsm_59;
            when ap_ST_st60_fsm_59 => 
                ap_NS_fsm <= ap_ST_st61_fsm_60;
            when ap_ST_st61_fsm_60 => 
                ap_NS_fsm <= ap_ST_st62_fsm_61;
            when ap_ST_st62_fsm_61 => 
                ap_NS_fsm <= ap_ST_st63_fsm_62;
            when ap_ST_st63_fsm_62 => 
                ap_NS_fsm <= ap_ST_st64_fsm_63;
            when ap_ST_st64_fsm_63 => 
                ap_NS_fsm <= ap_ST_st65_fsm_64;
            when ap_ST_st65_fsm_64 => 
                ap_NS_fsm <= ap_ST_st66_fsm_65;
            when ap_ST_st66_fsm_65 => 
                ap_NS_fsm <= ap_ST_st67_fsm_66;
            when ap_ST_st67_fsm_66 => 
                ap_NS_fsm <= ap_ST_st68_fsm_67;
            when ap_ST_st68_fsm_67 => 
                ap_NS_fsm <= ap_ST_st69_fsm_68;
            when ap_ST_st69_fsm_68 => 
                ap_NS_fsm <= ap_ST_st70_fsm_69;
            when ap_ST_st70_fsm_69 => 
                ap_NS_fsm <= ap_ST_st71_fsm_70;
            when ap_ST_st71_fsm_70 => 
                ap_NS_fsm <= ap_ST_st72_fsm_71;
            when ap_ST_st72_fsm_71 => 
                ap_NS_fsm <= ap_ST_st73_fsm_72;
            when ap_ST_st73_fsm_72 => 
                ap_NS_fsm <= ap_ST_st74_fsm_73;
            when ap_ST_st74_fsm_73 => 
                ap_NS_fsm <= ap_ST_st75_fsm_74;
            when ap_ST_st75_fsm_74 => 
                ap_NS_fsm <= ap_ST_st76_fsm_75;
            when ap_ST_st76_fsm_75 => 
                ap_NS_fsm <= ap_ST_st77_fsm_76;
            when ap_ST_st77_fsm_76 => 
                ap_NS_fsm <= ap_ST_st78_fsm_77;
            when ap_ST_st78_fsm_77 => 
                ap_NS_fsm <= ap_ST_st79_fsm_78;
            when ap_ST_st79_fsm_78 => 
                ap_NS_fsm <= ap_ST_st80_fsm_79;
            when ap_ST_st80_fsm_79 => 
                ap_NS_fsm <= ap_ST_st81_fsm_80;
            when ap_ST_st81_fsm_80 => 
                ap_NS_fsm <= ap_ST_st82_fsm_81;
            when ap_ST_st82_fsm_81 => 
                ap_NS_fsm <= ap_ST_st83_fsm_82;
            when ap_ST_st83_fsm_82 => 
                ap_NS_fsm <= ap_ST_st84_fsm_83;
            when ap_ST_st84_fsm_83 => 
                ap_NS_fsm <= ap_ST_st85_fsm_84;
            when ap_ST_st85_fsm_84 => 
                ap_NS_fsm <= ap_ST_st86_fsm_85;
            when ap_ST_st86_fsm_85 => 
                ap_NS_fsm <= ap_ST_st87_fsm_86;
            when ap_ST_st87_fsm_86 => 
                ap_NS_fsm <= ap_ST_st88_fsm_87;
            when ap_ST_st88_fsm_87 => 
                ap_NS_fsm <= ap_ST_st89_fsm_88;
            when ap_ST_st89_fsm_88 => 
                ap_NS_fsm <= ap_ST_st90_fsm_89;
            when ap_ST_st90_fsm_89 => 
                ap_NS_fsm <= ap_ST_st91_fsm_90;
            when ap_ST_st91_fsm_90 => 
                ap_NS_fsm <= ap_ST_st92_fsm_91;
            when ap_ST_st92_fsm_91 => 
                ap_NS_fsm <= ap_ST_st93_fsm_92;
            when ap_ST_st93_fsm_92 => 
                ap_NS_fsm <= ap_ST_st94_fsm_93;
            when ap_ST_st94_fsm_93 => 
                ap_NS_fsm <= ap_ST_st95_fsm_94;
            when ap_ST_st95_fsm_94 => 
                ap_NS_fsm <= ap_ST_st96_fsm_95;
            when ap_ST_st96_fsm_95 => 
                if (not((ap_const_logic_0 = grp_dut_sinf_or_cosf_fu_623_ap_done))) then
                    ap_NS_fsm <= ap_ST_st97_fsm_96;
                else
                    ap_NS_fsm <= ap_ST_st96_fsm_95;
                end if;
            when ap_ST_st97_fsm_96 => 
                ap_NS_fsm <= ap_ST_st98_fsm_97;
            when ap_ST_st98_fsm_97 => 
                ap_NS_fsm <= ap_ST_st99_fsm_98;
            when ap_ST_st99_fsm_98 => 
                ap_NS_fsm <= ap_ST_st100_fsm_99;
            when ap_ST_st100_fsm_99 => 
                ap_NS_fsm <= ap_ST_st101_fsm_100;
            when ap_ST_st101_fsm_100 => 
                ap_NS_fsm <= ap_ST_st102_fsm_101;
            when ap_ST_st102_fsm_101 => 
                ap_NS_fsm <= ap_ST_st103_fsm_102;
            when ap_ST_st103_fsm_102 => 
                ap_NS_fsm <= ap_ST_st104_fsm_103;
            when ap_ST_st104_fsm_103 => 
                ap_NS_fsm <= ap_ST_st105_fsm_104;
            when ap_ST_st105_fsm_104 => 
                ap_NS_fsm <= ap_ST_st56_fsm_55;
            when ap_ST_st106_fsm_105 => 
                ap_NS_fsm <= ap_ST_st107_fsm_106;
            when ap_ST_st107_fsm_106 => 
                ap_NS_fsm <= ap_ST_st108_fsm_107;
            when ap_ST_st108_fsm_107 => 
                ap_NS_fsm <= ap_ST_st50_fsm_49;
            when ap_ST_st109_fsm_108 => 
                if (not((ap_const_logic_0 = grp_dut_knn_fu_616_ap_done))) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                else
                    ap_NS_fsm <= ap_ST_st109_fsm_108;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;

    M_address0_assign_proc : process(ap_sig_cseq_ST_st10_fsm_9, ap_sig_cseq_ST_st21_fsm_20, ap_sig_cseq_ST_st8_fsm_7, tmp_39_cast_fu_754_p1, tmp_43_cast_fu_819_p1, tmp_48_cast_fu_1003_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7)) then 
            M_address0 <= tmp_39_cast_fu_754_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st21_fsm_20)) then 
            M_address0 <= tmp_48_cast_fu_1003_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9)) then 
            M_address0 <= tmp_43_cast_fu_819_p1(14 - 1 downto 0);
        else 
            M_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    M_ce0_assign_proc : process(ap_sig_cseq_ST_st10_fsm_9, ap_sig_cseq_ST_st21_fsm_20, ap_sig_cseq_ST_st8_fsm_7)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9) or (ap_const_logic_1 = ap_sig_cseq_ST_st21_fsm_20) or (ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7))) then 
            M_ce0 <= ap_const_logic_1;
        else 
            M_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    M_we0_assign_proc : process(ap_sig_cseq_ST_st8_fsm_7)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7))) then 
            M_we0 <= ap_const_logic_1;
        else 
            M_we0 <= ap_const_logic_0;
        end if; 
    end process;


    X_address0_assign_proc : process(grp_dut_knn_fu_616_input_r_address0, ap_sig_cseq_ST_st108_fsm_107, ap_sig_cseq_ST_st109_fsm_108, tmp_52_cast_fu_1161_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st108_fsm_107)) then 
            X_address0 <= tmp_52_cast_fu_1161_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st109_fsm_108)) then 
            X_address0 <= grp_dut_knn_fu_616_input_r_address0;
        else 
            X_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    X_ce0_assign_proc : process(grp_dut_knn_fu_616_input_r_ce0, ap_sig_cseq_ST_st108_fsm_107, ap_sig_cseq_ST_st109_fsm_108)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st108_fsm_107)) then 
            X_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st109_fsm_108)) then 
            X_ce0 <= grp_dut_knn_fu_616_input_r_ce0;
        else 
            X_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    X_we0_assign_proc : process(ap_sig_cseq_ST_st108_fsm_107)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st108_fsm_107))) then 
            X_we0 <= ap_const_logic_1;
        else 
            X_we0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0, grp_dut_knn_fu_616_ap_done, ap_sig_cseq_ST_st109_fsm_108)
    begin
        if ((((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st109_fsm_108) and not((ap_const_logic_0 = grp_dut_knn_fu_616_ap_done))))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(grp_dut_knn_fu_616_ap_done, ap_sig_cseq_ST_st109_fsm_108)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st109_fsm_108) and not((ap_const_logic_0 = grp_dut_knn_fu_616_ap_done)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_assign_proc : process(grp_dut_knn_fu_616_ap_done, grp_dut_knn_fu_616_ap_return, ap_sig_cseq_ST_st109_fsm_108, ap_return_preg)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st109_fsm_108) and not((ap_const_logic_0 = grp_dut_knn_fu_616_ap_done)))) then 
            ap_return <= grp_dut_knn_fu_616_ap_return;
        else 
            ap_return <= ap_return_preg;
        end if; 
    end process;


    ap_sig_1008_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_1008 <= (ap_const_lv1_1 = ap_CS_fsm(78 downto 78));
    end process;


    ap_sig_126_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_126 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    ap_sig_169_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_169 <= (ap_const_lv1_1 = ap_CS_fsm(30 downto 30));
    end process;


    ap_sig_176_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_176 <= (ap_const_lv1_1 = ap_CS_fsm(64 downto 64));
    end process;


    ap_sig_184_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_184 <= (ap_const_lv1_1 = ap_CS_fsm(73 downto 73));
    end process;


    ap_sig_192_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_192 <= (ap_const_lv1_1 = ap_CS_fsm(77 downto 77));
    end process;


    ap_sig_200_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_200 <= (ap_const_lv1_1 = ap_CS_fsm(99 downto 99));
    end process;


    ap_sig_210_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_210 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    ap_sig_228_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_228 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    ap_sig_237_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_237 <= (ap_const_lv1_1 = ap_CS_fsm(3 downto 3));
    end process;


    ap_sig_254_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_254 <= (ap_const_lv1_1 = ap_CS_fsm(4 downto 4));
    end process;


    ap_sig_263_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_263 <= (ap_const_lv1_1 = ap_CS_fsm(8 downto 8));
    end process;


    ap_sig_279_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_279 <= (ap_const_lv1_1 = ap_CS_fsm(9 downto 9));
    end process;


    ap_sig_295_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_295 <= (ap_const_lv1_1 = ap_CS_fsm(11 downto 11));
    end process;


    ap_sig_304_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_304 <= (ap_const_lv1_1 = ap_CS_fsm(12 downto 12));
    end process;


    ap_sig_313_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_313 <= (ap_const_lv1_1 = ap_CS_fsm(13 downto 13));
    end process;


    ap_sig_330_assign_proc : process(fft_config_data_V_empty_n, exitcond4_fu_862_p2, fft_config_data_V_full_n)
    begin
                ap_sig_330 <= (((fft_config_data_V_empty_n = ap_const_logic_0) and (ap_const_lv1_0 = exitcond4_fu_862_p2)) or ((ap_const_lv1_0 = exitcond4_fu_862_p2) and (fft_config_data_V_full_n = ap_const_logic_0)));
    end process;


    ap_sig_343_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_343 <= (ap_const_lv1_1 = ap_CS_fsm(14 downto 14));
    end process;


    ap_sig_357_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_357 <= (ap_const_lv1_1 = ap_CS_fsm(17 downto 17));
    end process;


    ap_sig_371_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_371 <= (ap_const_lv1_1 = ap_CS_fsm(19 downto 19));
    end process;


    ap_sig_387_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_387 <= (ap_const_lv1_1 = ap_CS_fsm(20 downto 20));
    end process;


    ap_sig_403_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_403 <= (ap_const_lv1_1 = ap_CS_fsm(21 downto 21));
    end process;


    ap_sig_412_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_412 <= (ap_const_lv1_1 = ap_CS_fsm(25 downto 25));
    end process;


    ap_sig_430_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_430 <= (ap_const_lv1_1 = ap_CS_fsm(26 downto 26));
    end process;


    ap_sig_445_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_445 <= (ap_const_lv1_1 = ap_CS_fsm(27 downto 27));
    end process;


    ap_sig_456_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_456 <= (ap_const_lv1_1 = ap_CS_fsm(35 downto 35));
    end process;


    ap_sig_465_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_465 <= (ap_const_lv1_1 = ap_CS_fsm(41 downto 41));
    end process;


    ap_sig_474_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_474 <= (ap_const_lv1_1 = ap_CS_fsm(47 downto 47));
    end process;


    ap_sig_483_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_483 <= (ap_const_lv1_1 = ap_CS_fsm(49 downto 49));
    end process;


    ap_sig_501_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_501 <= (ap_const_lv1_1 = ap_CS_fsm(54 downto 54));
    end process;


    ap_sig_512_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_512 <= (ap_const_lv1_1 = ap_CS_fsm(55 downto 55));
    end process;


    ap_sig_533_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_533 <= (ap_const_lv1_1 = ap_CS_fsm(60 downto 60));
    end process;


    ap_sig_541_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_541 <= (ap_const_lv1_1 = ap_CS_fsm(69 downto 69));
    end process;


    ap_sig_550_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_550 <= (ap_const_lv1_1 = ap_CS_fsm(93 downto 93));
    end process;


    ap_sig_559_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_559 <= (ap_const_lv1_1 = ap_CS_fsm(95 downto 95));
    end process;


    ap_sig_574_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_574 <= (ap_const_lv1_1 = ap_CS_fsm(96 downto 96));
    end process;


    ap_sig_582_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_582 <= (ap_const_lv1_1 = ap_CS_fsm(104 downto 104));
    end process;


    ap_sig_696_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_696 <= (ap_const_lv1_1 = ap_CS_fsm(16 downto 16));
    end process;


    ap_sig_717_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_717 <= (ap_const_lv1_1 = ap_CS_fsm(7 downto 7));
    end process;


    ap_sig_738_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_738 <= (ap_const_lv1_1 = ap_CS_fsm(10 downto 10));
    end process;


    ap_sig_768_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_768 <= (ap_const_lv1_1 = ap_CS_fsm(15 downto 15));
    end process;


    ap_sig_779_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_779 <= (ap_const_lv1_1 = ap_CS_fsm(18 downto 18));
    end process;


    ap_sig_794_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_794 <= (ap_const_lv1_1 = ap_CS_fsm(24 downto 24));
    end process;


    ap_sig_805_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_805 <= (ap_const_lv1_1 = ap_CS_fsm(48 downto 48));
    end process;


    ap_sig_824_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_824 <= (ap_const_lv1_1 = ap_CS_fsm(107 downto 107));
    end process;


    ap_sig_845_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_845 <= (ap_const_lv1_1 = ap_CS_fsm(108 downto 108));
    end process;


    ap_sig_862_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_862 <= (ap_const_lv1_1 = ap_CS_fsm(94 downto 94));
    end process;


    ap_sig_958_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_958 <= (ap_const_lv1_1 = ap_CS_fsm(31 downto 31));
    end process;


    ap_sig_965_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_965 <= (ap_const_lv1_1 = ap_CS_fsm(65 downto 65));
    end process;


    ap_sig_972_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_972 <= (ap_const_lv1_1 = ap_CS_fsm(100 downto 100));
    end process;


    ap_sig_984_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_984 <= (ap_const_lv1_1 = ap_CS_fsm(61 downto 61));
    end process;


    ap_sig_991_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_991 <= (ap_const_lv1_1 = ap_CS_fsm(70 downto 70));
    end process;


    ap_sig_998_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_998 <= (ap_const_lv1_1 = ap_CS_fsm(74 downto 74));
    end process;


    ap_sig_cseq_ST_st100_fsm_99_assign_proc : process(ap_sig_200)
    begin
        if (ap_sig_200) then 
            ap_sig_cseq_ST_st100_fsm_99 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st100_fsm_99 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st101_fsm_100_assign_proc : process(ap_sig_972)
    begin
        if (ap_sig_972) then 
            ap_sig_cseq_ST_st101_fsm_100 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st101_fsm_100 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st105_fsm_104_assign_proc : process(ap_sig_582)
    begin
        if (ap_sig_582) then 
            ap_sig_cseq_ST_st105_fsm_104 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st105_fsm_104 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st108_fsm_107_assign_proc : process(ap_sig_824)
    begin
        if (ap_sig_824) then 
            ap_sig_cseq_ST_st108_fsm_107 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st108_fsm_107 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st109_fsm_108_assign_proc : process(ap_sig_845)
    begin
        if (ap_sig_845) then 
            ap_sig_cseq_ST_st109_fsm_108 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st109_fsm_108 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st10_fsm_9_assign_proc : process(ap_sig_279)
    begin
        if (ap_sig_279) then 
            ap_sig_cseq_ST_st10_fsm_9 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st10_fsm_9 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st11_fsm_10_assign_proc : process(ap_sig_738)
    begin
        if (ap_sig_738) then 
            ap_sig_cseq_ST_st11_fsm_10 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st11_fsm_10 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st12_fsm_11_assign_proc : process(ap_sig_295)
    begin
        if (ap_sig_295) then 
            ap_sig_cseq_ST_st12_fsm_11 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st12_fsm_11 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st13_fsm_12_assign_proc : process(ap_sig_304)
    begin
        if (ap_sig_304) then 
            ap_sig_cseq_ST_st13_fsm_12 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st13_fsm_12 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st14_fsm_13_assign_proc : process(ap_sig_313)
    begin
        if (ap_sig_313) then 
            ap_sig_cseq_ST_st14_fsm_13 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st14_fsm_13 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st15_fsm_14_assign_proc : process(ap_sig_343)
    begin
        if (ap_sig_343) then 
            ap_sig_cseq_ST_st15_fsm_14 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st15_fsm_14 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st16_fsm_15_assign_proc : process(ap_sig_768)
    begin
        if (ap_sig_768) then 
            ap_sig_cseq_ST_st16_fsm_15 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st16_fsm_15 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st17_fsm_16_assign_proc : process(ap_sig_696)
    begin
        if (ap_sig_696) then 
            ap_sig_cseq_ST_st17_fsm_16 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st17_fsm_16 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st18_fsm_17_assign_proc : process(ap_sig_357)
    begin
        if (ap_sig_357) then 
            ap_sig_cseq_ST_st18_fsm_17 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st18_fsm_17 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st19_fsm_18_assign_proc : process(ap_sig_779)
    begin
        if (ap_sig_779) then 
            ap_sig_cseq_ST_st19_fsm_18 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st19_fsm_18 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_126)
    begin
        if (ap_sig_126) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st20_fsm_19_assign_proc : process(ap_sig_371)
    begin
        if (ap_sig_371) then 
            ap_sig_cseq_ST_st20_fsm_19 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st20_fsm_19 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st21_fsm_20_assign_proc : process(ap_sig_387)
    begin
        if (ap_sig_387) then 
            ap_sig_cseq_ST_st21_fsm_20 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st21_fsm_20 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st22_fsm_21_assign_proc : process(ap_sig_403)
    begin
        if (ap_sig_403) then 
            ap_sig_cseq_ST_st22_fsm_21 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st22_fsm_21 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st25_fsm_24_assign_proc : process(ap_sig_794)
    begin
        if (ap_sig_794) then 
            ap_sig_cseq_ST_st25_fsm_24 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st25_fsm_24 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st26_fsm_25_assign_proc : process(ap_sig_412)
    begin
        if (ap_sig_412) then 
            ap_sig_cseq_ST_st26_fsm_25 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st26_fsm_25 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st27_fsm_26_assign_proc : process(ap_sig_430)
    begin
        if (ap_sig_430) then 
            ap_sig_cseq_ST_st27_fsm_26 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st27_fsm_26 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st28_fsm_27_assign_proc : process(ap_sig_445)
    begin
        if (ap_sig_445) then 
            ap_sig_cseq_ST_st28_fsm_27 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st28_fsm_27 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st2_fsm_1_assign_proc : process(ap_sig_210)
    begin
        if (ap_sig_210) then 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st31_fsm_30_assign_proc : process(ap_sig_169)
    begin
        if (ap_sig_169) then 
            ap_sig_cseq_ST_st31_fsm_30 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st31_fsm_30 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st32_fsm_31_assign_proc : process(ap_sig_958)
    begin
        if (ap_sig_958) then 
            ap_sig_cseq_ST_st32_fsm_31 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st32_fsm_31 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st36_fsm_35_assign_proc : process(ap_sig_456)
    begin
        if (ap_sig_456) then 
            ap_sig_cseq_ST_st36_fsm_35 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st36_fsm_35 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st3_fsm_2_assign_proc : process(ap_sig_228)
    begin
        if (ap_sig_228) then 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st42_fsm_41_assign_proc : process(ap_sig_465)
    begin
        if (ap_sig_465) then 
            ap_sig_cseq_ST_st42_fsm_41 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st42_fsm_41 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st48_fsm_47_assign_proc : process(ap_sig_474)
    begin
        if (ap_sig_474) then 
            ap_sig_cseq_ST_st48_fsm_47 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st48_fsm_47 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st49_fsm_48_assign_proc : process(ap_sig_805)
    begin
        if (ap_sig_805) then 
            ap_sig_cseq_ST_st49_fsm_48 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st49_fsm_48 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st4_fsm_3_assign_proc : process(ap_sig_237)
    begin
        if (ap_sig_237) then 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st50_fsm_49_assign_proc : process(ap_sig_483)
    begin
        if (ap_sig_483) then 
            ap_sig_cseq_ST_st50_fsm_49 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st50_fsm_49 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st55_fsm_54_assign_proc : process(ap_sig_501)
    begin
        if (ap_sig_501) then 
            ap_sig_cseq_ST_st55_fsm_54 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st55_fsm_54 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st56_fsm_55_assign_proc : process(ap_sig_512)
    begin
        if (ap_sig_512) then 
            ap_sig_cseq_ST_st56_fsm_55 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st56_fsm_55 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st5_fsm_4_assign_proc : process(ap_sig_254)
    begin
        if (ap_sig_254) then 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st61_fsm_60_assign_proc : process(ap_sig_533)
    begin
        if (ap_sig_533) then 
            ap_sig_cseq_ST_st61_fsm_60 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st61_fsm_60 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st62_fsm_61_assign_proc : process(ap_sig_984)
    begin
        if (ap_sig_984) then 
            ap_sig_cseq_ST_st62_fsm_61 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st62_fsm_61 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st65_fsm_64_assign_proc : process(ap_sig_176)
    begin
        if (ap_sig_176) then 
            ap_sig_cseq_ST_st65_fsm_64 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st65_fsm_64 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st66_fsm_65_assign_proc : process(ap_sig_965)
    begin
        if (ap_sig_965) then 
            ap_sig_cseq_ST_st66_fsm_65 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st66_fsm_65 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st70_fsm_69_assign_proc : process(ap_sig_541)
    begin
        if (ap_sig_541) then 
            ap_sig_cseq_ST_st70_fsm_69 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st70_fsm_69 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st71_fsm_70_assign_proc : process(ap_sig_991)
    begin
        if (ap_sig_991) then 
            ap_sig_cseq_ST_st71_fsm_70 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st71_fsm_70 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st74_fsm_73_assign_proc : process(ap_sig_184)
    begin
        if (ap_sig_184) then 
            ap_sig_cseq_ST_st74_fsm_73 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st74_fsm_73 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st75_fsm_74_assign_proc : process(ap_sig_998)
    begin
        if (ap_sig_998) then 
            ap_sig_cseq_ST_st75_fsm_74 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st75_fsm_74 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st78_fsm_77_assign_proc : process(ap_sig_192)
    begin
        if (ap_sig_192) then 
            ap_sig_cseq_ST_st78_fsm_77 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st78_fsm_77 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st79_fsm_78_assign_proc : process(ap_sig_1008)
    begin
        if (ap_sig_1008) then 
            ap_sig_cseq_ST_st79_fsm_78 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st79_fsm_78 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st8_fsm_7_assign_proc : process(ap_sig_717)
    begin
        if (ap_sig_717) then 
            ap_sig_cseq_ST_st8_fsm_7 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st8_fsm_7 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st94_fsm_93_assign_proc : process(ap_sig_550)
    begin
        if (ap_sig_550) then 
            ap_sig_cseq_ST_st94_fsm_93 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st94_fsm_93 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st95_fsm_94_assign_proc : process(ap_sig_862)
    begin
        if (ap_sig_862) then 
            ap_sig_cseq_ST_st95_fsm_94 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st95_fsm_94 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st96_fsm_95_assign_proc : process(ap_sig_559)
    begin
        if (ap_sig_559) then 
            ap_sig_cseq_ST_st96_fsm_95 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st96_fsm_95 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st97_fsm_96_assign_proc : process(ap_sig_574)
    begin
        if (ap_sig_574) then 
            ap_sig_cseq_ST_st97_fsm_96 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st97_fsm_96 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st9_fsm_8_assign_proc : process(ap_sig_263)
    begin
        if (ap_sig_263) then 
            ap_sig_cseq_ST_st9_fsm_8 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st9_fsm_8 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond10_fu_1099_p2 <= "1" when (k_reg_559 = ap_const_lv5_14) else "0";
    exitcond11_fu_1043_p2 <= "1" when (x_reg_548 = ap_const_lv8_81) else "0";
    exitcond12_fu_1129_p2 <= "1" when (n1_reg_594 = ap_const_lv5_14) else "0";
    exitcond1_fu_764_p2 <= "1" when (i1_reg_389 = ap_const_lv9_100) else "0";
    exitcond2_fu_716_p2 <= "1" when (j_reg_367 = ap_const_lv6_31) else "0";
    exitcond3_fu_780_p2 <= "1" when (j2_reg_412 = ap_const_lv6_31) else "0";
    exitcond4_fu_862_p2 <= "1" when (i4_reg_445 = ap_const_lv6_31) else "0";
    exitcond5_fu_960_p2 <= "1" when (frame_reg_479 = ap_const_lv6_31) else "0";
    exitcond6_fu_899_p2 <= "1" when (j5_reg_456 = ap_const_lv9_100) else "0";
    exitcond7_fu_980_p2 <= "1" when (i7_reg_490 = ap_const_lv8_81) else "0";
    exitcond8_fu_943_p2 <= "1" when (j6_reg_468 = ap_const_lv9_100) else "0";
    exitcond9_fu_1023_p2 <= "1" when (j8_reg_513 = ap_const_lv5_14) else "0";
    exitcond_fu_699_p2 <= "1" when (i_reg_344 = ap_const_lv9_100) else "0";
    fft_config_data_V_empty_n <= ap_const_logic_1;
    fft_config_data_V_full_n <= ap_const_logic_1;
    frame_1_fu_966_p2 <= std_logic_vector(unsigned(frame_reg_479) + unsigned(ap_const_lv6_1));
    grp_dut_knn_fu_616_ap_start <= ap_reg_grp_dut_knn_fu_616_ap_start;
    grp_dut_sinf_or_cosf_fu_623_ap_start <= ap_reg_grp_dut_sinf_or_cosf_fu_623_ap_start;

    grp_fft_config1_s_fu_636_ap_ce_assign_proc : process(ap_sig_cseq_ST_st15_fsm_14, exitcond6_fu_899_p2, ap_sig_cseq_ST_st17_fsm_16)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st15_fsm_14) and not((ap_const_lv1_0 = exitcond6_fu_899_p2))) or (ap_const_logic_1 = ap_sig_cseq_ST_st17_fsm_16))) then 
            grp_fft_config1_s_fu_636_ap_ce <= ap_const_logic_1;
        else 
            grp_fft_config1_s_fu_636_ap_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fft_config1_s_fu_636_ap_start <= ap_reg_grp_fft_config1_s_fu_636_ap_start;

    grp_fu_644_p0_assign_proc : process(reg_681, p_x_assign_reg_536, sum9_reg_582, ap_sig_cseq_ST_st32_fsm_31, ap_sig_cseq_ST_st66_fsm_65, ap_sig_cseq_ST_st101_fsm_100)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st101_fsm_100)) then 
            grp_fu_644_p0 <= sum9_reg_582;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st66_fsm_65)) then 
            grp_fu_644_p0 <= reg_681;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st32_fsm_31)) then 
            grp_fu_644_p0 <= p_x_assign_reg_536;
        else 
            grp_fu_644_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_644_p1_assign_proc : process(reg_681, ap_sig_cseq_ST_st32_fsm_31, ap_sig_cseq_ST_st66_fsm_65, ap_sig_cseq_ST_st101_fsm_100)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st66_fsm_65)) then 
            grp_fu_644_p1 <= ap_const_lv32_3F800000;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st32_fsm_31) or (ap_const_logic_1 = ap_sig_cseq_ST_st101_fsm_100))) then 
            grp_fu_644_p1 <= reg_681;
        else 
            grp_fu_644_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_651_p0_assign_proc : process(sound_file_q0, melfb_q0, reg_681, ap_sig_cseq_ST_st5_fsm_4, M_q0, ap_sig_cseq_ST_st22_fsm_21, ap_sig_cseq_ST_st28_fsm_27, p_s_reg_1457, ap_sig_cseq_ST_st56_fsm_55, tmp_32_reg_1495, tmp_34_reg_1500, z_q0, ap_sig_cseq_ST_st97_fsm_96, ap_sig_cseq_ST_st62_fsm_61, ap_sig_cseq_ST_st71_fsm_70, ap_sig_cseq_ST_st75_fsm_74)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st97_fsm_96)) then 
            grp_fu_651_p0 <= z_q0;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st75_fsm_74)) then 
            grp_fu_651_p0 <= reg_681;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st71_fsm_70)) then 
            grp_fu_651_p0 <= tmp_34_reg_1500;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st62_fsm_61)) then 
            grp_fu_651_p0 <= tmp_32_reg_1495;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st56_fsm_55)) then 
            grp_fu_651_p0 <= p_s_reg_1457;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st28_fsm_27)) then 
            grp_fu_651_p0 <= melfb_q0;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st22_fsm_21)) then 
            grp_fu_651_p0 <= M_q0;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then 
            grp_fu_651_p0 <= sound_file_q0;
        else 
            grp_fu_651_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_651_p1_assign_proc : process(hamming_load_reg_1200, ap_sig_cseq_ST_st5_fsm_4, M_q0, ap_sig_cseq_ST_st22_fsm_21, ap_sig_cseq_ST_st28_fsm_27, z2_q0, tmp_23_reg_1462, ap_sig_cseq_ST_st56_fsm_55, tmp_i_i_i_i_reg_1515, ap_sig_cseq_ST_st97_fsm_96, sum9_reg_582, ap_sig_cseq_ST_st62_fsm_61, ap_sig_cseq_ST_st71_fsm_70, ap_sig_cseq_ST_st75_fsm_74)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st97_fsm_96)) then 
            grp_fu_651_p1 <= tmp_i_i_i_i_reg_1515;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st75_fsm_74)) then 
            grp_fu_651_p1 <= tmp_23_reg_1462;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st71_fsm_70)) then 
            grp_fu_651_p1 <= ap_const_lv32_40490FD8;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st62_fsm_61)) then 
            grp_fu_651_p1 <= ap_const_lv32_40000000;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st56_fsm_55)) then 
            grp_fu_651_p1 <= sum9_reg_582;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st28_fsm_27)) then 
            grp_fu_651_p1 <= z2_q0;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st22_fsm_21)) then 
            grp_fu_651_p1 <= M_q0;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then 
            grp_fu_651_p1 <= hamming_load_reg_1200;
        else 
            grp_fu_651_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_672_p0_assign_proc : process(ap_sig_cseq_ST_st50_fsm_49, k_cast3_fu_1094_p1, n1_cast2_fu_1124_p1, ap_sig_cseq_ST_st56_fsm_55)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st56_fsm_55)) then 
            grp_fu_672_p0 <= n1_cast2_fu_1124_p1;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st50_fsm_49)) then 
            grp_fu_672_p0 <= k_cast3_fu_1094_p1;
        else 
            grp_fu_672_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    hamming_address0 <= tmp_4_fu_711_p1(8 - 1 downto 0);

    hamming_ce0_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            hamming_ce0 <= ap_const_logic_1;
        else 
            hamming_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    i_1_fu_705_p2 <= std_logic_vector(unsigned(i_reg_344) + unsigned(ap_const_lv9_1));
    i_2_fu_770_p2 <= std_logic_vector(unsigned(i1_reg_389) + unsigned(ap_const_lv9_1));
    i_3_fu_986_p2 <= std_logic_vector(unsigned(i7_reg_490) + unsigned(ap_const_lv8_1));
    i_4_fu_868_p2 <= std_logic_vector(unsigned(i4_reg_445) + unsigned(ap_const_lv6_1));
    i_cast_fu_695_p1 <= std_logic_vector(resize(unsigned(i_reg_344),13));
    j8_cast7_fu_1019_p1 <= std_logic_vector(resize(unsigned(j8_reg_513),8));
    j_1_fu_722_p2 <= std_logic_vector(unsigned(j_reg_367) + unsigned(ap_const_lv6_1));
    j_2_fu_786_p2 <= std_logic_vector(unsigned(j2_reg_412) + unsigned(ap_const_lv6_1));
    j_3_fu_905_p2 <= std_logic_vector(unsigned(j5_reg_456) + unsigned(ap_const_lv9_1));
    j_4_fu_949_p2 <= std_logic_vector(unsigned(j6_reg_468) + unsigned(ap_const_lv9_1));
    j_5_fu_1029_p2 <= std_logic_vector(unsigned(j8_reg_513) + unsigned(ap_const_lv5_1));
    k_1_fu_1105_p2 <= std_logic_vector(unsigned(k_reg_559) + unsigned(ap_const_lv5_1));
    k_cast3_fu_1094_p1 <= std_logic_vector(resize(unsigned(k_reg_559),32));
    melfb_address0 <= tmp_26_fu_1069_p1(12 - 1 downto 0);

    melfb_ce0_assign_proc : process(ap_sig_cseq_ST_st27_fsm_26)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st27_fsm_26)) then 
            melfb_ce0 <= ap_const_logic_1;
        else 
            melfb_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    n1_cast2_fu_1124_p1 <= std_logic_vector(resize(unsigned(n1_reg_594),32));
    n_fu_1135_p2 <= std_logic_vector(unsigned(n1_reg_594) + unsigned(ap_const_lv5_1));
    next_mul1_fu_1088_p2 <= std_logic_vector(unsigned(phi_mul1_reg_570) + unsigned(ap_const_lv10_31));
    next_mul2_fu_1141_p2 <= std_logic_vector(unsigned(phi_mul3_reg_605) + unsigned(ap_const_lv10_31));
    next_mul3_fu_689_p2 <= std_logic_vector(unsigned(phi_mul2_reg_355) + unsigned(ap_const_lv14_31));
    next_mul5_fu_758_p2 <= std_logic_vector(unsigned(phi_mul4_reg_400) + unsigned(ap_const_lv14_31));
    next_mul7_fu_992_p2 <= std_logic_vector(unsigned(phi_mul6_reg_502) + unsigned(ap_const_lv13_31));
    next_mul9_fu_1013_p2 <= std_logic_vector(unsigned(phi_mul8_reg_524) + unsigned(ap_const_lv10_31));
    next_mul_fu_728_p2 <= std_logic_vector(unsigned(phi_mul_reg_378) + unsigned(ap_const_lv13_64));
    p_s_fu_1117_p3 <= 
        ap_const_lv32_3E64F92E when (tmp_22_reg_1452(0) = '1') else 
        ap_const_lv32_3EA1E89B;
    p_shl_fu_1035_p3 <= (j8_reg_513 & ap_const_lv7_0);
    sound_file_address0 <= tmp_9_fu_739_p1(14 - 1 downto 0);

    sound_file_ce0_assign_proc : process(ap_sig_cseq_ST_st4_fsm_3)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            sound_file_ce0 <= ap_const_logic_1;
        else 
            sound_file_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp1_cast_fu_1060_p1 <= std_logic_vector(resize(unsigned(tmp1_fu_1055_p2),12));
    tmp1_fu_1055_p2 <= std_logic_vector(unsigned(j8_cast7_reg_1373) + unsigned(x_reg_548));
    tmp_10_fu_839_p2 <= "1" when (tmp_1_reg_423 = ap_const_lv8_FF) else "0";
    tmp_12_fu_845_p2 <= std_logic_vector(unsigned(tmp_11_reg_434) + unsigned(ap_const_lv8_1));
    tmp_13_fu_851_p1 <= std_logic_vector(resize(unsigned(tmp_11_reg_434),64));
    tmp_14_cast_fu_792_p1 <= std_logic_vector(resize(unsigned(j2_reg_412),14));
    tmp_15_fu_856_p2 <= "1" when (tmp_11_reg_434 = ap_const_lv8_FF) else "0";
    tmp_17_cast1_fu_972_p1 <= std_logic_vector(resize(unsigned(frame_reg_479),13));
    tmp_17_cast_fu_976_p1 <= std_logic_vector(resize(unsigned(frame_reg_479),10));
    tmp_18_cast_fu_911_p1 <= std_logic_vector(resize(unsigned(j5_reg_456),15));
    tmp_18_fu_925_p1 <= std_logic_vector(resize(unsigned(j5_reg_456),64));
    tmp_19_fu_1008_p1 <= std_logic_vector(resize(unsigned(i7_reg_490),64));
    tmp_21_fu_955_p1 <= std_logic_vector(resize(unsigned(j6_reg_468),64));
    tmp_22_fu_1111_p2 <= "1" when (k_reg_559 = ap_const_lv5_0) else "0";
    tmp_24_fu_748_p2 <= std_logic_vector(unsigned(phi_mul2_reg_355) + unsigned(tmp_6_cast_fu_744_p1));
    tmp_25_fu_1064_p2 <= std_logic_vector(unsigned(tmp1_cast_fu_1060_p1) + unsigned(p_shl_reg_1386));
    tmp_26_fu_1069_p1 <= std_logic_vector(resize(unsigned(tmp_25_fu_1064_p2),64));
    tmp_27_fu_1074_p1 <= std_logic_vector(resize(unsigned(x_reg_548),64));
    tmp_2_fu_828_p2 <= std_logic_vector(unsigned(tmp_1_reg_423) + unsigned(ap_const_lv8_1));
    tmp_30_fu_796_p3 <= (j2_reg_412 & ap_const_lv8_0);
    tmp_31_fu_808_p2 <= std_logic_vector(unsigned(tmp_5_cast_reg_1246) + unsigned(tmp_41_cast_fu_804_p1));
    tmp_38_fu_813_p2 <= std_logic_vector(unsigned(tmp_14_cast_fu_792_p1) + unsigned(phi_mul4_reg_400));
    tmp_39_cast_fu_754_p1 <= std_logic_vector(resize(unsigned(tmp_24_reg_1223),64));
    tmp_39_fu_887_p3 <= (i4_reg_445 & ap_const_lv8_0);
    tmp_3_fu_834_p1 <= std_logic_vector(resize(unsigned(tmp_1_reg_423),64));
    tmp_40_fu_915_p2 <= std_logic_vector(unsigned(tmp_45_cast_reg_1293) + unsigned(tmp_18_cast_fu_911_p1));
    tmp_41_cast_fu_804_p1 <= std_logic_vector(resize(unsigned(tmp_30_fu_796_p3),15));
    tmp_41_fu_998_p2 <= std_logic_vector(unsigned(tmp_17_cast1_reg_1332) + unsigned(phi_mul6_reg_502));
    tmp_42_cast_fu_824_p1 <= std_logic_vector(resize(unsigned(tmp_31_reg_1259),64));
    tmp_42_fu_1079_p2 <= std_logic_vector(unsigned(tmp_17_cast_reg_1337) + unsigned(phi_mul8_reg_524));
    tmp_43_cast_fu_819_p1 <= std_logic_vector(resize(unsigned(tmp_38_fu_813_p2),64));
    tmp_43_fu_1152_p2 <= std_logic_vector(unsigned(tmp_17_cast_reg_1337) + unsigned(phi_mul1_reg_570));
    tmp_44_fu_1147_p2 <= std_logic_vector(unsigned(tmp_17_cast_reg_1337) + unsigned(phi_mul3_reg_605));
    tmp_45_cast_fu_895_p1 <= std_logic_vector(resize(unsigned(tmp_39_fu_887_p3),15));
    tmp_46_cast_fu_920_p1 <= std_logic_vector(resize(unsigned(tmp_40_fu_915_p2),64));
    tmp_48_cast_fu_1003_p1 <= std_logic_vector(resize(unsigned(tmp_41_fu_998_p2),64));
    tmp_4_fu_711_p1 <= std_logic_vector(resize(unsigned(i_reg_344),64));
    tmp_50_cast_fu_1084_p1 <= std_logic_vector(resize(unsigned(tmp_42_reg_1424),64));
    tmp_52_cast_fu_1161_p1 <= std_logic_vector(resize(unsigned(tmp_43_reg_1490),64));
    tmp_54_cast_fu_1157_p1 <= std_logic_vector(resize(unsigned(tmp_44_reg_1485),64));
    tmp_5_cast_fu_776_p1 <= std_logic_vector(resize(unsigned(i1_reg_389),15));
    tmp_6_cast_fu_744_p1 <= std_logic_vector(resize(unsigned(j_reg_367),14));
    tmp_8_fu_734_p2 <= std_logic_vector(unsigned(phi_mul_reg_378) + unsigned(i_cast_reg_1182));
    tmp_9_fu_739_p1 <= std_logic_vector(resize(unsigned(tmp_8_fu_734_p2),64));
    x_1_fu_1049_p2 <= std_logic_vector(unsigned(x_reg_548) + unsigned(ap_const_lv8_1));

    xk_address0_assign_proc : process(ap_sig_cseq_ST_st13_fsm_12, ap_sig_cseq_ST_st18_fsm_17, tmp_13_fu_851_p1, tmp_21_fu_955_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st13_fsm_12)) then 
            xk_address0 <= tmp_13_fu_851_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st18_fsm_17)) then 
            xk_address0 <= tmp_21_fu_955_p1(8 - 1 downto 0);
        else 
            xk_address0 <= "XXXXXXXX";
        end if; 
    end process;


    xk_ce0_assign_proc : process(ap_sig_cseq_ST_st13_fsm_12, ap_sig_cseq_ST_st18_fsm_17)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st13_fsm_12) or (ap_const_logic_1 = ap_sig_cseq_ST_st18_fsm_17))) then 
            xk_ce0 <= ap_const_logic_1;
        else 
            xk_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    xk_we0_assign_proc : process(ap_sig_cseq_ST_st13_fsm_12)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st13_fsm_12))) then 
            xk_we0 <= ap_const_logic_1;
        else 
            xk_we0 <= ap_const_logic_0;
        end if; 
    end process;

    xn_M_imag_addr_23941_part_set_fu_934_p3 <= (ap_const_lv32_0 & xn_input_M_real_load_toint_fu_930_p1);

    xn_address0_assign_proc : process(ap_sig_cseq_ST_st12_fsm_11, ap_sig_cseq_ST_st16_fsm_15, tmp_3_fu_834_p1, tmp_18_fu_925_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st16_fsm_15)) then 
            xn_address0 <= tmp_18_fu_925_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_11)) then 
            xn_address0 <= tmp_3_fu_834_p1(8 - 1 downto 0);
        else 
            xn_address0 <= "XXXXXXXX";
        end if; 
    end process;


    xn_ce0_assign_proc : process(ap_sig_cseq_ST_st12_fsm_11, ap_sig_cseq_ST_st16_fsm_15)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_11) or (ap_const_logic_1 = ap_sig_cseq_ST_st16_fsm_15))) then 
            xn_ce0 <= ap_const_logic_1;
        else 
            xn_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    xn_d0_assign_proc : process(ap_sig_cseq_ST_st12_fsm_11, ap_sig_cseq_ST_st16_fsm_15, xn_M_imag_addr_23941_part_set_fu_934_p3)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st16_fsm_15)) then 
            xn_d0 <= xn_M_imag_addr_23941_part_set_fu_934_p3;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_11)) then 
            xn_d0 <= ap_const_lv64_0;
        else 
            xn_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    xn_input_M_real_address0_assign_proc : process(ap_sig_cseq_ST_st15_fsm_14, ap_sig_cseq_ST_st11_fsm_10, tmp_42_cast_fu_824_p1, tmp_46_cast_fu_920_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_10)) then 
            xn_input_M_real_address0 <= tmp_42_cast_fu_824_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st15_fsm_14)) then 
            xn_input_M_real_address0 <= tmp_46_cast_fu_920_p1(14 - 1 downto 0);
        else 
            xn_input_M_real_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    xn_input_M_real_ce0_assign_proc : process(ap_sig_cseq_ST_st15_fsm_14, ap_sig_cseq_ST_st11_fsm_10)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st15_fsm_14) or (ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_10))) then 
            xn_input_M_real_ce0 <= ap_const_logic_1;
        else 
            xn_input_M_real_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    xn_input_M_real_load_toint_fu_930_p1 <= xn_input_M_real_q0;

    xn_input_M_real_we0_assign_proc : process(ap_sig_cseq_ST_st11_fsm_10)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_10))) then 
            xn_input_M_real_we0 <= ap_const_logic_1;
        else 
            xn_input_M_real_we0 <= ap_const_logic_0;
        end if; 
    end process;


    xn_we0_assign_proc : process(ap_sig_cseq_ST_st12_fsm_11, ap_sig_cseq_ST_st16_fsm_15)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_11) or (ap_const_logic_1 = ap_sig_cseq_ST_st16_fsm_15))) then 
            xn_we0 <= ap_const_logic_1;
        else 
            xn_we0 <= ap_const_logic_0;
        end if; 
    end process;


    z2_address0_assign_proc : process(ap_sig_cseq_ST_st27_fsm_26, ap_sig_cseq_ST_st25_fsm_24, tmp_19_fu_1008_p1, tmp_27_fu_1074_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st25_fsm_24)) then 
            z2_address0 <= tmp_19_fu_1008_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st27_fsm_26)) then 
            z2_address0 <= tmp_27_fu_1074_p1(8 - 1 downto 0);
        else 
            z2_address0 <= "XXXXXXXX";
        end if; 
    end process;


    z2_ce0_assign_proc : process(ap_sig_cseq_ST_st27_fsm_26, ap_sig_cseq_ST_st25_fsm_24)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st27_fsm_26) or (ap_const_logic_1 = ap_sig_cseq_ST_st25_fsm_24))) then 
            z2_ce0 <= ap_const_logic_1;
        else 
            z2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    z2_we0_assign_proc : process(ap_sig_cseq_ST_st25_fsm_24)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st25_fsm_24))) then 
            z2_we0 <= ap_const_logic_1;
        else 
            z2_we0 <= ap_const_logic_0;
        end if; 
    end process;


    z_address0_assign_proc : process(ap_sig_cseq_ST_st96_fsm_95, ap_sig_cseq_ST_st49_fsm_48, tmp_50_cast_fu_1084_p1, tmp_54_cast_fu_1157_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st49_fsm_48)) then 
            z_address0 <= tmp_50_cast_fu_1084_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st96_fsm_95)) then 
            z_address0 <= tmp_54_cast_fu_1157_p1(10 - 1 downto 0);
        else 
            z_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    z_ce0_assign_proc : process(ap_sig_cseq_ST_st96_fsm_95, grp_dut_sinf_or_cosf_fu_623_ap_done, ap_sig_cseq_ST_st49_fsm_48)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st96_fsm_95) and not((ap_const_logic_0 = grp_dut_sinf_or_cosf_fu_623_ap_done))) or (ap_const_logic_1 = ap_sig_cseq_ST_st49_fsm_48))) then 
            z_ce0 <= ap_const_logic_1;
        else 
            z_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    z_we0_assign_proc : process(ap_sig_cseq_ST_st49_fsm_48)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st49_fsm_48))) then 
            z_we0 <= ap_const_logic_1;
        else 
            z_we0 <= ap_const_logic_0;
        end if; 
    end process;

end behav;
