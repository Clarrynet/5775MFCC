-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.2
-- Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity dut_mfcc_melfb_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 12; 
             mem_size    : integer := 2580
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of dut_mfcc_melfb_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "00000000000000000000000000000000", 
    1 => "00111111100100110000010101010011", 
    2 => "00111111111000100100000010111000", 
    3 => "00111111001111011101011000111001", 
    4 to 130=> "00000000000000000000000000000000", 
    131 => "00111110011011011111111110000010", 
    132 => "00111111101000010001001101000000", 
    133 => "00111111111000100011110101110001", 
    134 => "00111111010101110010001100100101", 
    135 to 261=> "00000000000000000000000000000000", 
    262 => "00111110011011100001011100011010", 
    263 => "00111111100101000110110111000110", 
    264 => "00111111111110100101101011101110", 
    265 => "00111111100011100001111001001111", 
    266 => "00111110100110011100010011011011", 
    267 to 392=> "00000000000000000000000000000000", 
    393 => "00111101001101001001101111101001", 
    394 => "00111111011000111100001010111001", 
    395 => "00111111110110011000111111000101", 
    396 => "00111111110000101111010011110001", 
    397 => "00111111010001101010100010010111", 
    398 => "00111101011010001111011111011011", 
    399 to 524=> "00000000000000000000000000000000", 
    525 => "00111110111101000010111011011100", 
    526 => "00111111100111001010110000001000", 
    527 => "00111111111110001011011110000000", 
    528 => "00111111101011101000110110111001", 
    529 => "00111111001100011100111000000111", 
    530 => "00111101010001000101111011010101", 
    531 to 656=> "00000000000000000000000000000000", 
    657 => "00111111001000101110011100101110", 
    658 => "00111111101001110001011101011001", 
    659 => "00111111111110011101111001101010", 
    660 => "00111111101101100001000100110100", 
    661 => "00111111010100010000010011010101", 
    662 => "00111110011010101001100100110001", 
    663 to 788=> "00000000000000000000000000000000", 
    789 => "00111111000100111110000000110111", 
    790 => "00111111100101110111110011101110", 
    791 => "00111111111000101010110011011010", 
    792 => "00111111110101000101110101100100", 
    793 => "00111111100011011000010001001101", 
    794 => "00111111000100010100010110110111", 
    795 => "00111101001101000101001010000011", 
    796 to 920=> "00000000000000000000000000000000", 
    921 => "00111110101011101000011010000011", 
    922 => "00111111011001001111101000000101", 
    923 => "00111111101101110101110000101001", 
    924 => "00111111111110100101111000110101", 
    925 => "00111111110001000110011100111000", 
    926 => "00111111100001001101110100101111", 
    927 => "00111111000011011101100000110000", 
    928 => "00111101101001111111100000000001", 
    929 to 1053=> "00000000000000000000000000000000", 
    1054 => "00111110111011100101110010010010", 
    1055 => "00111111011101100100010001010010", 
    1056 => "00111111101110010001001101000000", 
    1057 => "00111111111101011000000100000110", 
    1058 => "00111111110011111000011011000010", 
    1059 => "00111111100101011110110100101001", 
    1060 => "00111111001110110100100101111011", 
    1061 => "00111110100110100111101100001011", 
    1062 to 1186=> "00000000000000000000000000000000", 
    1187 => "00111110110000011110101000110110", 
    1188 => "00111111010101000010011011111110", 
    1189 => "00111111101000100101101011101110", 
    1190 => "00111111110110010110000111100101", 
    1191 => "00111111111100001100101100101001", 
    1192 => "00111111101111000010001001101000", 
    1193 => "00111111100010001001000000101110", 
    1194 => "00111111001011000001110010000010", 
    1195 => "00111110100100100100000010111000", 
    1196 to 1319=> "00000000000000000000000000000000", 
    1320 => "00111101111100110011001100110011", 
    1321 => "00111111000001111011110100100111", 
    1322 => "00111111011011101101111011111100", 
    1323 => "00111111101010011111001000010011", 
    1324 => "00111111110110110111000101110110", 
    1325 => "00111111111101000000101101111000", 
    1326 => "00111111110001000111011110011010", 
    1327 => "00111111100101011100100100011101", 
    1328 => "00111111010011111111010000110100", 
    1329 => "00111110111011000000001011110011", 
    1330 => "00111101111011010110001000111001", 
    1331 to 1453=> "00000000000000000000000000000000", 
    1454 => "00111101101111110100011011101101", 
    1455 => "00111110111011100010010000110101", 
    1456 => "00111111010101000110110100011110", 
    1457 => "00111111100110000000011010001110", 
    1458 => "00111111110001001111110111110100", 
    1459 => "00111111111100010010101000110000", 
    1460 => "00111111111000110111000101110110", 
    1461 => "00111111101110001100111001110000", 
    1462 => "00111111100011101110011000110010", 
    1463 => "00111111010010110110000100010011", 
    1464 => "00111110111101001010001000110100", 
    1465 => "00111110001010100100010101001110", 
    1466 to 1588=> "00000000000000000000000000000000", 
    1589 => "00111110011001000110100111010111", 
    1590 => "00111111000011100110000010000000", 
    1591 => "00111111011000100011001011110100", 
    1592 => "00111111100110100100110111010011", 
    1593 => "00111111110000101101011101110011", 
    1594 => "00111111111010101011011010101110", 
    1595 => "00111111111011100000101010100110", 
    1596 => "00111111110001110110110010001011", 
    1597 => "00111111101000010110010100101100", 
    1598 => "00111111011101111110001010000010", 
    1599 => "00111111001011100001101110110000", 
    1600 => "00111110110010101101011011001011", 
    1601 => "00111101111011100100111000100111", 
    1602 to 1723=> "00000000000000000000000000000000", 
    1724 => "00111110000011111010100000101111", 
    1725 => "00111110111000100101001100010001", 
    1726 => "00111111001111010011011110100000", 
    1727 => "00111111100001000000111010111111", 
    1728 => "00111111101010001111001001111100", 
    1729 => "00111111110011010100100101010010", 
    1730 => "00111111111100010001100111001110", 
    1731 => "00111111111010111001100011001000", 
    1732 => "00111111110010001100101100101001", 
    1733 => "00111111101001100111101000010000", 
    1734 => "00111111100001001001111011101101", 
    1735 => "00111111010001100111101010110111", 
    1736 => "00111111000001001001100100000111", 
    1737 => "00111110100001110010110001010010", 
    1738 => "00111100010110101111100011011111", 
    1739 to 1859=> "00000000000000000000000000000000", 
    1860 => "00111110001000110100000110011110", 
    1861 => "00111110110111001101011101001001", 
    1862 => "00111111001100110000111010000000", 
    1863 => "00111111011101101011111110000111", 
    1864 => "00111111100111001100001011111000", 
    1865 => "00111111101111011011001000101101", 
    1866 => "00111111110111100011010100111111", 
    1867 => "00111111111111100100100011101001", 
    1868 => "00111111111000100000100100000011", 
    1869 => "00111111110000101100011100010001", 
    1870 => "00111111101000111110011101101101", 
    1871 => "00111111100001010110011011001111", 
    1872 => "00111111010011101001001001001111", 
    1873 => "00111111000100110000111100101000", 
    1874 => "00111110101100001000010001100010", 
    1875 => "00111101111100010011000101100110", 
    1876 to 1996=> "00000000000000000000000000000000", 
    1997 => "00111110011011111010101011001110", 
    1998 => "00111110111101001110011110101011", 
    1999 => "00111111001110000011001111000110", 
    2000 => "00111111011101010011000001101010", 
    2001 => "00111111100110001011011110000000", 
    2002 => "00111111101101100111101000010000", 
    2003 => "00111111110100111101110110011000", 
    2004 => "00111111111100001110101111101110", 
    2005 => "00111111111100100101101011101110", 
    2006 => "00111111110101011111101001000100", 
    2007 => "00111111101110011110101110000101", 
    2008 => "00111111100111100010101101101011", 
    2009 => "00111111100000101011110100111100", 
    2010 => "00111111010011110011010011010111", 
    2011 => "00111111000110011000011111101000", 
    2012 => "00111110110010001101111101111010", 
    2013 => "00111110001111111001111100000010", 
    2014 to 2133=> "00000000000000000000000000000000", 
    2134 => "00111101110110100011110000100001", 
    2135 => "00111110101010000001100001000000", 
    2136 => "00111111000011000010101110010101", 
    2137 => "00111111010000111010100010000010", 
    2138 => "00111111011110101000011101111111", 
    2139 => "00111111100110000110010110010101", 
    2140 => "00111111101100110011110100001000", 
    2141 => "00111111110011011100100100011101", 
    2142 => "00111111111010000000110100011011", 
    2143 => "00111111111111011111011011111101", 
    2144 => "00111111111001000011111111100110", 
    2145 => "00111111110010101100110110011111", 
    2146 => "00111111101100011001110011100000", 
    2147 => "00111111100110001010110110101100", 
    2148 => "00111111011111111111101011000010", 
    2149 => "00111111010011110001100101010000", 
    2150 => "00111111000111101011001100010100", 
    2151 => "00111110110111011000101011011011", 
    2152 => "00111110011111010011011011111000", 
    2153 => "00111101100000100101010100101010", 
    2154 to 2271=> "00000000000000000000000000000000", 
    2272 => "00111100100000100011010000100010", 
    2273 => "00111110010111100000000011010010", 
    2274 => "00111110110101001100110101110101", 
    2275 => "00111111000111001100100000110110", 
    2276 => "00111111010011101010011010100000", 
    2277 => "00111111100000000000001101000111", 
    2278 => "00111111100110000111001010110000", 
    2279 => "00111111101100001010011100011110", 
    2280 => "00111111110010001001110101001001", 
    2281 => "00111111111000000101100001111001", 
    2282 => "00111111111101111101101111110101", 
    2283 => "00111111111100001101101110001100", 
    2284 => "00111111110110011100101011000001", 
    2285 => "00111111110000101111000110101010", 
    2286 => "00111111101011000100110100000001", 
    2287 => "00111111100101011101110011000110", 
    2288 => "00111111011111110100001101000010", 
    2289 => "00111111010100110011000111100100", 
    2290 => "00111111001001111000010011001011", 
    2291 => "00111110111110000111001010110000", 
    2292 => "00111110101000101001110111000111", 
    2293 => "00111110000110110000101100111001", 
    2294 to 2411=> "00000000000000000000000000000000", 
    2412 => "00111101111100100011011110001011", 
    2413 => "00111110100110001101001001011111", 
    2414 => "00111110111101000011101010101000", 
    2415 => "00111111001001110110010111111110", 
    2416 => "00111111010101000100010100100100", 
    2417 => "00111111100000000101111100000111", 
    2418 => "00111111100101100110011001100110", 
    2419 => "00111111101011000011110010011111", 
    2420 => "00111111110000011110010011110111", 
    2421 => "00111111110101110101100011100010", 
    2422 => "00111111111011001001111011101101", 
    2423 => "00111111111111100100100011101001", 
    2424 => "00111111111010010110000111100101", 
    2425 => "00111111110101001010010101111010", 
    2426 => "00111111110000000001001110101001", 
    2427 => "00111111101010111010111110111000", 
    2428 => "00111111100101110111011001100000", 
    2429 => "00111111100000110110011110100001", 
    2430 => "00111111010111110000001110110000", 
    2431 => "00111111001101111000101000001001", 
    2432 => "00111111000100000110000001010111", 
    2433 => "00111110110100110000101111100001", 
    2434 => "00111110100001011111001100001110", 
    2435 => "00111101111001011100100100011101", 
    2436 to 2551=> "00000000000000000000000000000000", 
    2552 => "00111100010110101101011101010010", 
    2553 => "00111110001101001111100010110110", 
    2554 => "00111110101011010110110010110101", 
    2555 => "00111110111111111010110101101101", 
    2556 => "00111111001010001001111101000001", 
    2557 => "00111111010100010001000111110001", 
    2558 => "00111111011110010011000010111110", 
    2559 => "00111111100100000111110010000101", 
    2560 => "00111111101001000011110010011111", 
    2561 => "00111111101101111100111011011001", 
    2562 => "00111111110010110011110100001000", 
    2563 => "00111111110111101000001111100100", 
    2564 => "00111111111100011010001101101110", 
    2565 => "00111111111110110110000100010011", 
    2566 => "00111111111010001000110011100111", 
    2567 => "00111111110101011101110011000110", 
    2568 => "00111111110000110101000010110001", 
    2569 => "00111111101100001110100010100111", 
    2570 => "00111111100111101010000101100010", 
    2571 => "00111111100011000111111000101000", 
    2572 => "00111111011101001111100010110110", 
    2573 => "00111111010100010011100010011011", 
    2574 => "00111111001011011011101000001010", 
    2575 => "00111111000010100111110100000011", 
    2576 => "00111110110011101111111100011001", 
    2577 => "00111110100010011000001101010001", 
    2578 => "00111110000010010000100000011100", 
    2579 => "00000000000000000000000000000000" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity dut_mfcc_melfb is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 2580;
        AddressWidth : INTEGER := 12);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of dut_mfcc_melfb is
    component dut_mfcc_melfb_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    dut_mfcc_melfb_rom_U :  component dut_mfcc_melfb_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


