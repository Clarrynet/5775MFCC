; ModuleID = '/home/drl224/ece5775/final/ecelinux/mfcc.prj/solution1/.autopilot/db/a.o.2.bc'
target datalayout = "e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-s0:64:64-f80:128:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@xn_input_M_real = internal global [12544 x float] zeroinitializer
@xk_output_M_real = internal global [12544 x float] zeroinitializer
@xk_output_M_imag = internal global [12544 x float] zeroinitializer
@training_data_V = internal unnamed_addr constant [14000 x i6] [i6 -23, i6 26, i6 21, i6 22, i6 18, i6 7, i6 13, i6 17, i6 13, i6 12, i6 8, i6 5, i6 5, i6 9, i6 16, i6 14, i6 10, i6 10, i6 7, i6 0, i6 3, i6 0, i6 0, i6 1, i6 1, i6 10, i6 10, i6 7, i6 3, i6 9, i6 13, i6 23, i6 26, i6 10, i6 3, i6 6, i6 3, i6 5, i6 8, i6 11, i6 16, i6 23, i6 24, i6 25, i6 25, i6 23, i6 19, i6 24, i6 23, i6 1, i6 6, i6 8, i6 7, i6 9, i6 7, i6 1, i6 4, i6 6, i6 6, i6 3, i6 2, i6 1, i6 4, i6 2, i6 4, i6 5, i6 8, i6 6, i6 5, i6 5, i6 3, i6 5, i6 7, i6 4, i6 4, i6 3, i6 6, i6 6, i6 4, i6 3, i6 2, i6 5, i6 4, i6 4, i6 4, i6 3, i6 2, i6 2, i6 2, i6 3, i6 2, i6 5, i6 5, i6 5, i6 4, i6 4, i6 3, i6 4, i6 5, i6 1, i6 2, i6 4, i6 2, i6 4, i6 3, i6 0, i6 2, i6 2, i6 2, i6 1, i6 1, i6 1, i6 1, i6 0, i6 3, i6 3, i6 5, i6 5, i6 3, i6 0, i6 0, i6 1, i6 0, i6 2, i6 2, i6 1, i6 2, i6 2, i6 0, i6 1, i6 1, i6 2, i6 2, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 1, i6 1, i6 0, i6 1, i6 2, i6 2, i6 1, i6 0, i6 1, i6 1, i6 1, i6 1, i6 3, i6 3, i6 3, i6 3, i6 2, i6 3, i6 2, i6 3, i6 2, i6 1, i6 2, i6 2, i6 1, i6 3, i6 3, i6 3, i6 4, i6 3, i6 0, i6 1, i6 2, i6 2, i6 2, i6 2, i6 2, i6 3, i6 2, i6 1, i6 2, i6 4, i6 3, i6 1, i6 3, i6 2, i6 2, i6 2, i6 2, i6 1, i6 2, i6 1, i6 1, i6 1, i6 2, i6 1, i6 0, i6 0, i6 0, i6 1, i6 1, i6 1, i6 1, i6 1, i6 1, i6 1, i6 1, i6 1, i6 0, i6 0, i6 0, i6 0, i6 2, i6 1, i6 0, i6 0, i6 1, i6 1, i6 2, i6 1, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 1, i6 0, i6 0, i6 1, i6 1, i6 0, i6 2, i6 1, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 1, i6 1, i6 1, i6 0, i6 1, i6 0, i6 1, i6 1, i6 0, i6 2, i6 1, i6 2, i6 1, i6 1, i6 2, i6 2, i6 1, i6 1, i6 1, i6 1, i6 1, i6 1, i6 1, i6 2, i6 1, i6 1, i6 2, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 1, i6 1, i6 1, i6 1, i6 0, i6 3, i6 3, i6 2, i6 1, i6 1, i6 1, i6 1, i6 1, i6 0, i6 0, i6 1, i6 1, i6 1, i6 2, i6 2, i6 2, i6 4, i6 2, i6 1, i6 1, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 1, i6 1, i6 2, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 1, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 1, i6 0, i6 1, i6 1, i6 0, i6 1, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 1, i6 0, i6 0, i6 0, i6 0, i6 2, i6 2, i6 2, i6 2, i6 0, i6 0, i6 1, i6 0, i6 1, i6 1, i6 1, i6 1, i6 1, i6 1, i6 2, i6 1, i6 2, i6 0, i6 0, i6 0, i6 1, i6 0, i6 1, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 1, i6 1, i6 0, i6 1, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 1, i6 1, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 1, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 27, i6 16, i6 6, i6 4, i6 13, i6 12, i6 18, i6 17, i6 18, i6 17, i6 19, i6 20, i6 21, i6 22, i6 23, i6 25, i6 25, i6 19, i6 22, i6 25, i6 25, i6 26, i6 26, i6 18, i6 7, i6 17, i6 24, i6 26, i6 23, i6 11, i6 12, i6 16, i6 23, i6 12, i6 10, i6 19, i6 24, i6 27, i6 27, i6 28, i6 29, i6 29, i6 30, i6 27, i6 27, i6 28, i6 28, i6 16, i6 3, i6 1, i6 6, i6 8, i6 4, i6 8, i6 11, i6 14, i6 12, i6 10, i6 10, i6 11, i6 9, i6 9, i6 8, i6 8, i6 8, i6 7, i6 7, i6 9, i6 8, i6 8, i6 8, i6 7, i6 8, i6 11, i6 16, i6 14, i6 10, i6 8, i6 6, i6 14, i6 13, i6 10, i6 8, i6 14, i6 14, i6 10, i6 10, i6 9, i6 8, i6 6, i6 6, i6 5, i6 4, i6 8, i6 7, i6 7, i6 7, i6 8, i6 12, i6 1, i6 2, i6 7, i6 1, i6 4, i6 4, i6 3, i6 3, i6 3, i6 2, i6 3, i6 2, i6 1, i6 1, i6 2, i6 4, i6 4, i6 1, i6 0, i6 2, i6 2, i6 2, i6 2, i6 2, i6 1, i6 1, i6 6, i6 3, i6 2, i6 1, i6 2, i6 4, i6 4, i6 3, i6 2, i6 2, i6 3, i6 4, i6 3, i6 2, i6 0, i6 0, i6 1, i6 0, i6 0, i6 1, i6 0, i6 1, i6 1, i6 0, i6 1, i6 1, i6 3, i6 3, i6 3, i6 3, i6 2, i6 3, i6 2, i6 2, i6 2, i6 1, i6 1, i6 3, i6 2, i6 3, i6 3, i6 1, i6 1, i6 1, i6 1, i6 1, i6 2, i6 2, i6 0, i6 2, i6 3, i6 2, i6 2, i6 0, i6 1, i6 4, i6 3, i6 2, i6 1, i6 2, i6 4, i6 2, i6 1, i6 2, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 3, i6 1, i6 0, i6 1, i6 1, i6 0, i6 1, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 2, i6 1, i6 1, i6 1, i6 2, i6 2, i6 1, i6 1, i6 0, i6 0, i6 0, i6 2, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 1, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 1, i6 2, i6 0, i6 1, i6 0, i6 1, i6 2, i6 1, i6 2, i6 2, i6 2, i6 1, i6 1, i6 2, i6 2, i6 1, i6 1, i6 1, i6 1, i6 1, i6 1, i6 1, i6 0, i6 1, i6 2, i6 1, i6 2, i6 1, i6 1, i6 2, i6 1, i6 1, i6 1, i6 1, i6 1, i6 2, i6 2, i6 1, i6 1, i6 0, i6 1, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 1, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 1, i6 0, i6 1, i6 0, i6 1, i6 1, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 1, i6 0, i6 0, i6 1, i6 1, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 1, i6 1, i6 1, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 1, i6 0, i6 1, i6 0, i6 1, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 1, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 1, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 1, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 1, i6 1, i6 2, i6 1, i6 1, i6 1, i6 0, i6 0, i6 1, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 -27, i6 26, i6 11, i6 7, i6 3, i6 5, i6 1, i6 7, i6 7, i6 16, i6 13, i6 10, i6 18, i6 22, i6 23, i6 24, i6 25, i6 25, i6 25, i6 24, i6 22, i6 8, i6 4, i6 10, i6 6, i6 3, i6 9, i6 8, i6 10, i6 11, i6 19, i6 22, i6 20, i6 14, i6 18, i6 21, i6 23, i6 21, i6 21, i6 22, i6 22, i6 21, i6 21, i6 12, i6 12, i6 19, i6 24, i6 25, i6 26, i6 1, i6 6, i6 9, i6 16, i6 17, i6 15, i6 16, i6 15, i6 13, i6 18, i6 15, i6 9, i6 18, i6 14, i6 8, i6 8, i6 7, i6 6, i6 6, i6 5, i6 6, i6 7, i6 15, i6 17, i6 18, i6 14, i6 10, i6 14, i6 16, i6 14, i6 14, i6 7, i6 4, i6 4, i6 0, i6 0, i6 2, i6 2, i6 2, i6 4, i6 3, i6 3, i6 5, i6 4, i6 15, i6 17, i6 11, i6 6, i6 7, i6 6, i6 1, i6 2, i6 4, i6 2, i6 3, i6 2, i6 4, i6 3, i6 5, i6 4, i6 6, i6 3, i6 3, i6 5, i6 2, i6 2, i6 2, i6 2, i6 1, i6 0, i6 0, i6 1, i6 1, i6 2, i6 5, i6 3, i6 3, i6 4, i6 4, i6 5, i6 6, i6 2, i6 2, i6 2, i6 1, i6 0, i6 0, i6 1, i6 3, i6 2, i6 3, i6 4, i6 4, i6 3, i6 2, i6 4, i6 1, i6 1, i6 1, i6 0, i6 1, i6 1, i6 2, i6 0, i6 0, i6 3, i6 3, i6 2, i6 2, i6 2, i6 4, i6 1, i6 1, i6 2, i6 2, i6 2, i6 3, i6 3, i6 2, i6 1, i6 2, i6 3, i6 0, i6 0, i6 0, i6 0, i6 2, i6 0, i6 1, i6 2, i6 2, i6 3, i6 3, i6 3, i6 3, i6 2, i6 2, i6 2, i6 1, i6 2, i6 2, i6 2, i6 2, i6 2, i6 4, i6 5, i6 5, i6 1, i6 1, i6 2, i6 1, i6 0, i6 2, i6 0, i6 1, i6 1, i6 2, i6 1, i6 1, i6 1, i6 1, i6 1, i6 0, i6 1, i6 2, i6 1, i6 2, i6 2, i6 1, i6 1, i6 2, i6 1, i6 2, i6 2, i6 0, i6 1, i6 0, i6 1, i6 0, i6 0, i6 0, i6 1, i6 2, i6 2, i6 1, i6 0, i6 0, i6 0, i6 1, i6 2, i6 2, i6 4, i6 3, i6 3, i6 2, i6 2, i6 3, i6 1, i6 1, i6 1, i6 1, i6 0, i6 2, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 1, i6 1, i6 2, i6 1, i6 1, i6 3, i6 2, i6 1, i6 2, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 2, i6 2, i6 1, i6 1, i6 0, i6 1, i6 2, i6 1, i6 1, i6 1, i6 1, i6 0, i6 0, i6 1, i6 0, i6 1, i6 1, i6 1, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 1, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 1, i6 0, i6 1, i6 0, i6 0, i6 1, i6 1, i6 1, i6 0, i6 1, i6 1, i6 2, i6 2, i6 1, i6 0, i6 0, i6 0, i6 1, i6 1, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 1, i6 1, i6 1, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 1, i6 2, i6 0, i6 0, i6 0, i6 1, i6 1, i6 2, i6 2, i6 1, i6 1, i6 0, i6 1, i6 2, i6 0, i6 1, i6 2, i6 1, i6 0, i6 0, i6 0, i6 1, i6 1, i6 1, i6 0, i6 0, i6 1, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 2, i6 1, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 1, i6 1, i6 1, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 1, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 -25, i6 26, i6 21, i6 22, i6 23, i6 23, i6 23, i6 23, i6 20, i6 19, i6 22, i6 23, i6 20, i6 19, i6 13, i6 7, i6 12, i6 12, i6 10, i6 8, i6 5, i6 2, i6 4, i6 6, i6 7, i6 7, i6 10, i6 13, i6 15, i6 16, i6 17, i6 20, i6 19, i6 16, i6 15, i6 23, i6 25, i6 25, i6 25, i6 24, i6 25, i6 27, i6 25, i6 26, i6 25, i6 25, i6 26, i6 27, i6 26, i6 1, i6 6, i6 8, i6 7, i6 8, i6 8, i6 6, i6 8, i6 8, i6 12, i6 13, i6 8, i6 6, i6 9, i6 10, i6 10, i6 18, i6 15, i6 10, i6 11, i6 14, i6 13, i6 12, i6 12, i6 10, i6 10, i6 11, i6 11, i6 8, i6 6, i6 6, i6 7, i6 7, i6 7, i6 10, i6 9, i6 8, i6 7, i6 6, i6 7, i6 7, i6 8, i6 7, i6 7, i6 6, i6 6, i6 6, i6 6, i6 6, i6 6, i6 1, i6 2, i6 4, i6 2, i6 3, i6 2, i6 1, i6 3, i6 1, i6 4, i6 5, i6 3, i6 2, i6 4, i6 5, i6 4, i6 3, i6 6, i6 2, i6 4, i6 6, i6 5, i6 4, i6 5, i6 3, i6 3, i6 3, i6 5, i6 3, i6 1, i6 0, i6 3, i6 3, i6 3, i6 4, i6 3, i6 5, i6 4, i6 1, i6 1, i6 3, i6 3, i6 2, i6 2, i6 1, i6 1, i6 2, i6 1, i6 1, i6 1, i6 1, i6 1, i6 4, i6 2, i6 3, i6 1, i6 1, i6 3, i6 0, i6 2, i6 3, i6 2, i6 1, i6 3, i6 3, i6 1, i6 0, i6 1, i6 1, i6 1, i6 2, i6 4, i6 3, i6 3, i6 3, i6 3, i6 3, i6 3, i6 4, i6 3, i6 2, i6 3, i6 2, i6 2, i6 2, i6 2, i6 2, i6 2, i6 1, i6 0, i6 3, i6 1, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 1, i6 0, i6 2, i6 2, i6 2, i6 3, i6 2, i6 0, i6 1, i6 1, i6 1, i6 3, i6 2, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 1, i6 1, i6 0, i6 1, i6 1, i6 2, i6 2, i6 0, i6 0, i6 2, i6 2, i6 1, i6 1, i6 3, i6 2, i6 0, i6 2, i6 1, i6 1, i6 0, i6 0, i6 1, i6 1, i6 1, i6 0, i6 1, i6 1, i6 2, i6 1, i6 0, i6 1, i6 2, i6 0, i6 0, i6 1, i6 1, i6 1, i6 1, i6 0, i6 0, i6 0, i6 2, i6 0, i6 0, i6 1, i6 0, i6 0, i6 1, i6 1, i6 0, i6 0, i6 1, i6 1, i6 1, i6 1, i6 0, i6 2, i6 0, i6 1, i6 1, i6 0, i6 0, i6 0, i6 2, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 1, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 1, i6 0, i6 1, i6 0, i6 1, i6 1, i6 0, i6 0, i6 0, i6 1, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 1, i6 1, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 1, i6 1, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 1, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 1, i6 2, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 1, i6 0, i6 0, i6 0, i6 0, i6 1, i6 1, i6 1, i6 0, i6 0, i6 0, i6 1, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 1, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 -15, i6 30, i6 25, i6 18, i6 21, i6 23, i6 25, i6 27, i6 25, i6 25, i6 25, i6 25, i6 25, i6 24, i6 24, i6 24, i6 24, i6 23, i6 22, i6 24, i6 24, i6 22, i6 22, i6 22, i6 17, i6 19, i6 21, i6 21, i6 23, i6 22, i6 22, i6 19, i6 19, i6 21, i6 21, i6 22, i6 23, i6 23, i6 22, i6 21, i6 22, i6 20, i6 9, i6 16, i6 19, i6 18, i6 12, i6 18, i6 21, i6 1, i6 9, i6 9, i6 7, i6 13, i6 11, i6 6, i6 6, i6 7, i6 8, i6 6, i6 6, i6 5, i6 5, i6 6, i6 7, i6 5, i6 5, i6 5, i6 5, i6 4, i6 5, i6 4, i6 4, i6 4, i6 8, i6 8, i6 5, i6 5, i6 6, i6 5, i6 4, i6 8, i6 9, i6 5, i6 6, i6 4, i6 4, i6 4, i6 4, i6 7, i6 8, i6 2, i6 0, i6 4, i6 5, i6 4, i6 2, i6 3, i6 4, i6 1, i6 2, i6 2, i6 1, i6 6, i6 6, i6 1, i6 0, i6 1, i6 1, i6 0, i6 0, i6 0, i6 1, i6 2, i6 1, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 1, i6 1, i6 0, i6 2, i6 3, i6 1, i6 0, i6 0, i6 0, i6 1, i6 2, i6 2, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 2, i6 2, i6 1, i6 2, i6 3, i6 2, i6 0, i6 5, i6 3, i6 1, i6 1, i6 1, i6 1, i6 1, i6 3, i6 4, i6 3, i6 3, i6 2, i6 3, i6 2, i6 3, i6 2, i6 2, i6 2, i6 2, i6 2, i6 1, i6 2, i6 2, i6 1, i6 1, i6 1, i6 1, i6 1, i6 4, i6 4, i6 3, i6 1, i6 1, i6 0, i6 1, i6 2, i6 2, i6 2, i6 2, i6 1, i6 2, i6 1, i6 0, i6 3, i6 4, i6 3, i6 4, i6 4, i6 4, i6 4, i6 4, i6 4, i6 3, i6 1, i6 1, i6 1, i6 2, i6 0, i6 1, i6 2, i6 2, i6 1, i6 1, i6 2, i6 2, i6 1, i6 2, i6 2, i6 2, i6 1, i6 1, i6 2, i6 2, i6 2, i6 2, i6 1, i6 2, i6 2, i6 2, i6 3, i6 3, i6 2, i6 2, i6 2, i6 1, i6 2, i6 3, i6 2, i6 1, i6 2, i6 2, i6 2, i6 1, i6 2, i6 3, i6 1, i6 0, i6 0, i6 0, i6 3, i6 4, i6 3, i6 2, i6 1, i6 1, i6 1, i6 1, i6 0, i6 1, i6 1, i6 1, i6 1, i6 0, i6 0, i6 0, i6 2, i6 2, i6 0, i6 1, i6 0, i6 1, i6 0, i6 2, i6 3, i6 0, i6 0, i6 0, i6 0, i6 1, i6 2, i6 1, i6 1, i6 0, i6 1, i6 1, i6 0, i6 1, i6 2, i6 1, i6 1, i6 1, i6 0, i6 0, i6 0, i6 1, i6 1, i6 1, i6 2, i6 2, i6 1, i6 1, i6 1, i6 1, i6 1, i6 0, i6 0, i6 0, i6 2, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 1, i6 0, i6 1, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 1, i6 1, i6 2, i6 2, i6 2, i6 1, i6 0, i6 0, i6 1, i6 1, i6 1, i6 0, i6 1, i6 0, i6 0, i6 1, i6 2, i6 2, i6 2, i6 1, i6 2, i6 0, i6 1, i6 0, i6 0, i6 1, i6 0, i6 1, i6 2, i6 1, i6 1, i6 0, i6 0, i6 1, i6 0, i6 0, i6 1, i6 1, i6 1, i6 1, i6 1, i6 1, i6 1, i6 2, i6 2, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 1, i6 1, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 1, i6 2, i6 1, i6 1, i6 1, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 2, i6 0, i6 0, i6 1, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 1, i6 1, i6 2, i6 1, i6 1, i6 0, i6 1, i6 1, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 1, i6 0, i6 0, i6 1, i6 1, i6 1, i6 1, i6 1, i6 1, i6 1, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 1, i6 1, i6 0, i6 0, i6 0, i6 0, i6 1, i6 1, i6 1, i6 0, i6 1, i6 1, i6 0, i6 0, i6 1, i6 0, i6 1, i6 1, i6 1, i6 1, i6 2, i6 2, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 1, i6 1, i6 0, i6 1, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 1, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 1, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 -20, i6 28, i6 24, i6 22, i6 23, i6 22, i6 23, i6 23, i6 22, i6 23, i6 24, i6 24, i6 23, i6 20, i6 23, i6 22, i6 22, i6 24, i6 25, i6 24, i6 25, i6 25, i6 24, i6 22, i6 24, i6 25, i6 26, i6 22, i6 18, i6 14, i6 20, i6 12, i6 17, i6 22, i6 23, i6 25, i6 24, i6 24, i6 24, i6 26, i6 25, i6 24, i6 24, i6 23, i6 19, i6 17, i6 17, i6 17, i6 16, i6 1, i6 6, i6 7, i6 6, i6 7, i6 7, i6 6, i6 5, i6 6, i6 7, i6 7, i6 5, i6 5, i6 5, i6 3, i6 5, i6 9, i6 6, i6 4, i6 4, i6 4, i6 5, i6 5, i6 7, i6 9, i6 7, i6 5, i6 5, i6 7, i6 4, i6 2, i6 3, i6 2, i6 4, i6 6, i6 5, i6 5, i6 4, i6 6, i6 5, i6 5, i6 6, i6 7, i6 7, i6 10, i6 13, i6 13, i6 13, i6 12, i6 12, i6 1, i6 2, i6 1, i6 1, i6 1, i6 1, i6 1, i6 0, i6 0, i6 1, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 3, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 2, i6 2, i6 2, i6 0, i6 0, i6 3, i6 3, i6 3, i6 2, i6 1, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 2, i6 0, i6 0, i6 2, i6 3, i6 2, i6 1, i6 1, i6 2, i6 2, i6 2, i6 2, i6 2, i6 2, i6 1, i6 1, i6 2, i6 1, i6 1, i6 3, i6 3, i6 2, i6 2, i6 2, i6 1, i6 1, i6 0, i6 0, i6 0, i6 2, i6 3, i6 3, i6 1, i6 0, i6 1, i6 1, i6 0, i6 1, i6 2, i6 2, i6 2, i6 1, i6 1, i6 1, i6 1, i6 0, i6 1, i6 1, i6 0, i6 1, i6 1, i6 0, i6 1, i6 2, i6 1, i6 1, i6 1, i6 1, i6 2, i6 2, i6 2, i6 1, i6 2, i6 2, i6 1, i6 2, i6 2, i6 2, i6 1, i6 2, i6 1, i6 2, i6 3, i6 3, i6 1, i6 1, i6 0, i6 0, i6 0, i6 1, i6 3, i6 3, i6 0, i6 0, i6 2, i6 3, i6 1, i6 1, i6 4, i6 1, i6 0, i6 1, i6 0, i6 0, i6 0, i6 2, i6 0, i6 1, i6 1, i6 1, i6 1, i6 1, i6 1, i6 1, i6 1, i6 1, i6 1, i6 0, i6 2, i6 1, i6 1, i6 1, i6 1, i6 1, i6 1, i6 1, i6 1, i6 1, i6 0, i6 1, i6 0, i6 0, i6 1, i6 1, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 2, i6 2, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 2, i6 1, i6 0, i6 0, i6 1, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 1, i6 1, i6 1, i6 2, i6 1, i6 1, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 2, i6 1, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 2, i6 1, i6 2, i6 3, i6 1, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 1, i6 1, i6 0, i6 0, i6 2, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 1, i6 0, i6 0, i6 1, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 1, i6 2, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 1, i6 1, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 1, i6 0, i6 0, i6 1, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 1, i6 1, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 1, i6 0, i6 1, i6 1, i6 0, i6 0, i6 1, i6 0, i6 1, i6 0, i6 1, i6 2, i6 1, i6 1, i6 1, i6 1, i6 0, i6 0, i6 1, i6 1, i6 1, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 1, i6 1, i6 0, i6 0, i6 1, i6 1, i6 1, i6 1, i6 0, i6 0, i6 0, i6 0, i6 1, i6 1, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 1, i6 0, i6 0, i6 0, i6 0, i6 1, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 1, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 -19, i6 28, i6 23, i6 24, i6 25, i6 24, i6 26, i6 25, i6 23, i6 18, i6 21, i6 20, i6 18, i6 23, i6 23, i6 17, i6 19, i6 23, i6 17, i6 9, i6 14, i6 19, i6 14, i6 7, i6 7, i6 13, i6 23, i6 25, i6 26, i6 26, i6 20, i6 14, i6 23, i6 23, i6 27, i6 27, i6 21, i6 11, i6 17, i6 16, i6 17, i6 4, i6 1, i6 11, i6 18, i6 17, i6 11, i6 20, i6 18, i6 1, i6 7, i6 8, i6 7, i6 7, i6 7, i6 7, i6 7, i6 7, i6 8, i6 12, i6 9, i6 10, i6 14, i6 10, i6 9, i6 10, i6 13, i6 10, i6 8, i6 10, i6 10, i6 9, i6 8, i6 11, i6 16, i6 10, i6 10, i6 9, i6 7, i6 8, i6 13, i6 17, i6 14, i6 9, i6 8, i6 8, i6 13, i6 19, i6 16, i6 19, i6 18, i6 7, i6 13, i6 12, i6 7, i6 17, i6 18, i6 13, i6 13, i6 1, i6 2, i6 2, i6 0, i6 0, i6 1, i6 2, i6 0, i6 1, i6 1, i6 1, i6 2, i6 3, i6 4, i6 3, i6 2, i6 2, i6 4, i6 3, i6 0, i6 2, i6 4, i6 4, i6 1, i6 1, i6 1, i6 4, i6 4, i6 2, i6 1, i6 0, i6 3, i6 5, i6 7, i6 3, i6 2, i6 2, i6 1, i6 2, i6 6, i6 4, i6 7, i6 1, i6 2, i6 5, i6 3, i6 2, i6 2, i6 4, i6 4, i6 1, i6 1, i6 1, i6 2, i6 2, i6 3, i6 1, i6 0, i6 0, i6 1, i6 2, i6 2, i6 2, i6 2, i6 3, i6 2, i6 2, i6 1, i6 2, i6 3, i6 2, i6 1, i6 3, i6 3, i6 2, i6 3, i6 4, i6 3, i6 1, i6 0, i6 0, i6 0, i6 0, i6 4, i6 2, i6 1, i6 1, i6 0, i6 1, i6 2, i6 1, i6 1, i6 2, i6 0, i6 3, i6 2, i6 0, i6 0, i6 4, i6 2, i6 1, i6 0, i6 0, i6 1, i6 1, i6 3, i6 2, i6 2, i6 1, i6 1, i6 1, i6 1, i6 0, i6 1, i6 2, i6 1, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 2, i6 2, i6 1, i6 0, i6 0, i6 1, i6 2, i6 1, i6 1, i6 0, i6 0, i6 1, i6 1, i6 0, i6 2, i6 0, i6 0, i6 1, i6 0, i6 2, i6 0, i6 1, i6 0, i6 0, i6 1, i6 1, i6 2, i6 0, i6 1, i6 3, i6 1, i6 2, i6 1, i6 0, i6 0, i6 2, i6 1, i6 1, i6 1, i6 2, i6 2, i6 0, i6 1, i6 1, i6 0, i6 2, i6 1, i6 2, i6 1, i6 2, i6 1, i6 2, i6 2, i6 1, i6 2, i6 0, i6 0, i6 0, i6 1, i6 1, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 2, i6 2, i6 0, i6 0, i6 1, i6 0, i6 1, i6 1, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 1, i6 0, i6 0, i6 1, i6 1, i6 0, i6 0, i6 2, i6 1, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 2, i6 0, i6 1, i6 0, i6 0, i6 0, i6 1, i6 1, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 1, i6 0, i6 1, i6 1, i6 1, i6 1, i6 0, i6 0, i6 1, i6 1, i6 1, i6 1, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 2, i6 0, i6 0, i6 0, i6 0, i6 2, i6 1, i6 0, i6 0, i6 0, i6 0, i6 1, i6 2, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 1, i6 1, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 1, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 1, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 1, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 1, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 1, i6 1, i6 1, i6 1, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 1, i6 1, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 26, i6 4, i6 0, i6 1, i6 0, i6 2, i6 1, i6 3, i6 2, i6 3, i6 1, i6 2, i6 2, i6 1, i6 2, i6 3, i6 3, i6 2, i6 2, i6 2, i6 2, i6 3, i6 4, i6 4, i6 3, i6 3, i6 3, i6 3, i6 4, i6 5, i6 5, i6 5, i6 4, i6 5, i6 6, i6 5, i6 5, i6 8, i6 8, i6 7, i6 5, i6 6, i6 6, i6 6, i6 5, i6 6, i6 7, i6 7, i6 7, i6 2, i6 6, i6 6, i6 5, i6 5, i6 6, i6 4, i6 3, i6 2, i6 0, i6 1, i6 5, i6 5, i6 5, i6 5, i6 5, i6 5, i6 4, i6 5, i6 5, i6 4, i6 3, i6 3, i6 3, i6 4, i6 3, i6 2, i6 2, i6 3, i6 2, i6 2, i6 2, i6 2, i6 1, i6 2, i6 0, i6 1, i6 1, i6 0, i6 0, i6 1, i6 2, i6 2, i6 2, i6 1, i6 1, i6 0, i6 0, i6 0, i6 0, i6 2, i6 3, i6 5, i6 5, i6 4, i6 4, i6 5, i6 5, i6 5, i6 6, i6 6, i6 6, i6 5, i6 5, i6 6, i6 5, i6 6, i6 6, i6 6, i6 6, i6 6, i6 7, i6 7, i6 6, i6 6, i6 7, i6 7, i6 7, i6 7, i6 7, i6 7, i6 7, i6 7, i6 8, i6 7, i6 7, i6 7, i6 7, i6 8, i6 7, i6 6, i6 6, i6 7, i6 7, i6 7, i6 7, i6 7, i6 7, i6 6, i6 7, i6 2, i6 2, i6 2, i6 4, i6 3, i6 3, i6 2, i6 2, i6 3, i6 4, i6 3, i6 3, i6 3, i6 4, i6 4, i6 5, i6 5, i6 4, i6 5, i6 4, i6 5, i6 5, i6 4, i6 4, i6 4, i6 4, i6 5, i6 6, i6 6, i6 6, i6 6, i6 5, i6 5, i6 6, i6 6, i6 4, i6 5, i6 5, i6 2, i6 2, i6 3, i6 5, i6 5, i6 4, i6 4, i6 5, i6 5, i6 4, i6 4, i6 6, i6 2, i6 0, i6 1, i6 2, i6 2, i6 1, i6 2, i6 3, i6 4, i6 4, i6 3, i6 2, i6 2, i6 2, i6 2, i6 2, i6 2, i6 2, i6 2, i6 2, i6 3, i6 3, i6 2, i6 3, i6 2, i6 3, i6 3, i6 2, i6 2, i6 3, i6 3, i6 3, i6 3, i6 3, i6 2, i6 2, i6 3, i6 3, i6 4, i6 4, i6 3, i6 2, i6 3, i6 2, i6 2, i6 2, i6 3, i6 4, i6 3, i6 4, i6 2, i6 0, i6 2, i6 0, i6 0, i6 0, i6 0, i6 1, i6 1, i6 1, i6 1, i6 1, i6 1, i6 1, i6 1, i6 1, i6 1, i6 1, i6 2, i6 2, i6 2, i6 1, i6 2, i6 0, i6 1, i6 1, i6 1, i6 1, i6 1, i6 1, i6 1, i6 1, i6 1, i6 1, i6 2, i6 1, i6 1, i6 1, i6 0, i6 1, i6 0, i6 1, i6 1, i6 1, i6 1, i6 1, i6 1, i6 2, i6 2, i6 2, i6 2, i6 2, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 2, i6 1, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 1, i6 2, i6 1, i6 1, i6 2, i6 1, i6 2, i6 2, i6 1, i6 1, i6 1, i6 1, i6 1, i6 1, i6 1, i6 2, i6 1, i6 1, i6 0, i6 1, i6 0, i6 0, i6 0, i6 1, i6 1, i6 1, i6 1, i6 0, i6 0, i6 0, i6 0, i6 1, i6 1, i6 2, i6 0, i6 2, i6 2, i6 1, i6 1, i6 0, i6 0, i6 1, i6 0, i6 1, i6 2, i6 2, i6 2, i6 3, i6 2, i6 2, i6 3, i6 3, i6 3, i6 3, i6 3, i6 4, i6 4, i6 3, i6 4, i6 4, i6 4, i6 3, i6 3, i6 3, i6 3, i6 3, i6 3, i6 3, i6 3, i6 3, i6 4, i6 3, i6 3, i6 3, i6 3, i6 3, i6 2, i6 2, i6 3, i6 2, i6 2, i6 3, i6 1, i6 2, i6 0, i6 1, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 1, i6 0, i6 0, i6 1, i6 0, i6 1, i6 0, i6 1, i6 1, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 1, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 2, i6 2, i6 1, i6 2, i6 1, i6 2, i6 1, i6 1, i6 1, i6 0, i6 2, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 1, i6 1, i6 0, i6 0, i6 0, i6 0, i6 1, i6 1, i6 0, i6 1, i6 1, i6 1, i6 1, i6 1, i6 1, i6 2, i6 2, i6 1, i6 1, i6 0, i6 0, i6 1, i6 2, i6 2, i6 0, i6 0, i6 1, i6 0, i6 1, i6 0, i6 1, i6 1, i6 1, i6 1, i6 1, i6 0, i6 0, i6 1, i6 1, i6 2, i6 2, i6 2, i6 0, i6 0, i6 1, i6 0, i6 1, i6 0, i6 0, i6 1, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 1, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 1, i6 1, i6 2, i6 0, i6 1, i6 2, i6 1, i6 1, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 1, i6 1, i6 1, i6 0, i6 0, i6 0, i6 0, i6 2, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 1, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 2, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 1, i6 1, i6 1, i6 2, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 2, i6 0, i6 0, i6 0, i6 1, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 1, i6 1, i6 1, i6 0, i6 1, i6 0, i6 0, i6 0, i6 1, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 2, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 2, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 2, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 1, i6 1, i6 1, i6 1, i6 1, i6 0, i6 1, i6 0, i6 0, i6 1, i6 1, i6 1, i6 1, i6 0, i6 0, i6 1, i6 1, i6 1, i6 0, i6 0, i6 1, i6 1, i6 1, i6 1, i6 0, i6 0, i6 0, i6 1, i6 1, i6 1, i6 0, i6 1, i6 1, i6 2, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 2, i6 31, i6 8, i6 3, i6 4, i6 3, i6 0, i6 1, i6 1, i6 1, i6 3, i6 3, i6 3, i6 3, i6 4, i6 4, i6 4, i6 5, i6 4, i6 4, i6 4, i6 4, i6 5, i6 3, i6 1, i6 0, i6 0, i6 0, i6 1, i6 0, i6 2, i6 2, i6 1, i6 2, i6 3, i6 2, i6 3, i6 2, i6 2, i6 2, i6 2, i6 0, i6 2, i6 2, i6 2, i6 1, i6 1, i6 3, i6 3, i6 2, i6 2, i6 4, i6 5, i6 5, i6 4, i6 5, i6 6, i6 4, i6 5, i6 5, i6 3, i6 2, i6 4, i6 4, i6 4, i6 3, i6 3, i6 3, i6 3, i6 3, i6 3, i6 2, i6 3, i6 2, i6 3, i6 3, i6 6, i6 5, i6 5, i6 2, i6 3, i6 3, i6 2, i6 3, i6 3, i6 3, i6 2, i6 2, i6 2, i6 3, i6 2, i6 0, i6 1, i6 1, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 2, i6 4, i6 3, i6 2, i6 2, i6 2, i6 2, i6 4, i6 3, i6 3, i6 4, i6 5, i6 5, i6 5, i6 3, i6 3, i6 4, i6 4, i6 5, i6 5, i6 4, i6 3, i6 2, i6 3, i6 3, i6 2, i6 0, i6 2, i6 3, i6 4, i6 2, i6 3, i6 3, i6 2, i6 3, i6 3, i6 4, i6 4, i6 3, i6 1, i6 1, i6 2, i6 2, i6 3, i6 4, i6 4, i6 4, i6 4, i6 3, i6 3, i6 2, i6 0, i6 0, i6 0, i6 0, i6 1, i6 1, i6 2, i6 1, i6 1, i6 2, i6 1, i6 1, i6 2, i6 1, i6 0, i6 1, i6 0, i6 1, i6 1, i6 1, i6 1, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 1, i6 1, i6 2, i6 1, i6 1, i6 1, i6 1, i6 0, i6 0, i6 0, i6 2, i6 1, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 2, i6 1, i6 1, i6 0, i6 1, i6 2, i6 2, i6 3, i6 2, i6 2, i6 3, i6 4, i6 3, i6 4, i6 4, i6 5, i6 5, i6 5, i6 6, i6 5, i6 5, i6 6, i6 5, i6 6, i6 3, i6 2, i6 2, i6 3, i6 4, i6 5, i6 4, i6 4, i6 4, i6 5, i6 5, i6 6, i6 5, i6 6, i6 6, i6 5, i6 5, i6 6, i6 6, i6 5, i6 6, i6 7, i6 6, i6 5, i6 4, i6 5, i6 2, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 1, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 2, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 3, i6 2, i6 1, i6 0, i6 0, i6 0, i6 0, i6 1, i6 1, i6 1, i6 1, i6 1, i6 0, i6 1, i6 2, i6 2, i6 1, i6 1, i6 2, i6 0, i6 1, i6 1, i6 2, i6 2, i6 2, i6 2, i6 0, i6 1, i6 0, i6 0, i6 1, i6 1, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 1, i6 1, i6 2, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 1, i6 2, i6 1, i6 1, i6 1, i6 0, i6 0, i6 2, i6 2, i6 2, i6 1, i6 2, i6 2, i6 1, i6 3, i6 2, i6 2, i6 1, i6 2, i6 2, i6 2, i6 2, i6 2, i6 2, i6 3, i6 2, i6 3, i6 2, i6 1, i6 1, i6 1, i6 0, i6 0, i6 1, i6 1, i6 1, i6 1, i6 1, i6 2, i6 2, i6 1, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 2, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 1, i6 2, i6 2, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 2, i6 0, i6 1, i6 0, i6 1, i6 2, i6 1, i6 1, i6 0, i6 0, i6 1, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 1, i6 1, i6 1, i6 1, i6 1, i6 1, i6 1, i6 0, i6 1, i6 1, i6 1, i6 1, i6 0, i6 1, i6 0, i6 1, i6 0, i6 0, i6 1, i6 0, i6 2, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 1, i6 0, i6 0, i6 1, i6 0, i6 1, i6 0, i6 1, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 2, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 2, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 1, i6 2, i6 2, i6 1, i6 1, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 1, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 2, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 1, i6 1, i6 1, i6 1, i6 1, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 1, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 1, i6 2, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 1, i6 1, i6 0, i6 0, i6 0, i6 1, i6 0, i6 1, i6 1, i6 1, i6 1, i6 0, i6 0, i6 2, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 1, i6 0, i6 1, i6 1, i6 1, i6 1, i6 1, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 2, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 1, i6 0, i6 1, i6 2, i6 1, i6 1, i6 1, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 2, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 1, i6 0, i6 1, i6 1, i6 1, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 2, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 2, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 1, i6 1, i6 1, i6 1, i6 1, i6 1, i6 1, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 1, i6 1, i6 1, i6 1, i6 1, i6 1, i6 1, i6 1, i6 1, i6 1, i6 1, i6 1, i6 1, i6 2, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 2, i6 -32, i6 8, i6 4, i6 7, i6 6, i6 6, i6 6, i6 8, i6 7, i6 8, i6 8, i6 7, i6 9, i6 8, i6 7, i6 8, i6 6, i6 6, i6 4, i6 8, i6 8, i6 3, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 1, i6 3, i6 1, i6 1, i6 1, i6 1, i6 3, i6 3, i6 3, i6 3, i6 3, i6 3, i6 4, i6 5, i6 2, i6 4, i6 6, i6 6, i6 4, i6 4, i6 4, i6 5, i6 3, i6 4, i6 3, i6 4, i6 4, i6 3, i6 3, i6 5, i6 5, i6 4, i6 4, i6 3, i6 3, i6 4, i6 6, i6 6, i6 5, i6 5, i6 6, i6 5, i6 5, i6 5, i6 5, i6 5, i6 6, i6 6, i6 6, i6 6, i6 6, i6 5, i6 5, i6 7, i6 7, i6 7, i6 6, i6 5, i6 5, i6 5, i6 5, i6 4, i6 4, i6 3, i6 2, i6 0, i6 0, i6 1, i6 2, i6 1, i6 2, i6 0, i6 2, i6 2, i6 1, i6 1, i6 1, i6 2, i6 2, i6 2, i6 1, i6 2, i6 0, i6 2, i6 2, i6 3, i6 3, i6 4, i6 4, i6 4, i6 2, i6 2, i6 3, i6 3, i6 3, i6 3, i6 3, i6 3, i6 2, i6 2, i6 1, i6 2, i6 1, i6 1, i6 1, i6 1, i6 2, i6 1, i6 1, i6 0, i6 0, i6 1, i6 1, i6 2, i6 2, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 2, i6 3, i6 4, i6 4, i6 4, i6 4, i6 3, i6 4, i6 4, i6 3, i6 2, i6 3, i6 3, i6 3, i6 2, i6 3, i6 4, i6 3, i6 2, i6 1, i6 3, i6 3, i6 2, i6 1, i6 1, i6 0, i6 1, i6 1, i6 2, i6 2, i6 3, i6 3, i6 2, i6 2, i6 3, i6 2, i6 3, i6 3, i6 2, i6 1, i6 1, i6 1, i6 1, i6 2, i6 2, i6 2, i6 2, i6 2, i6 2, i6 1, i6 3, i6 4, i6 4, i6 4, i6 4, i6 4, i6 4, i6 4, i6 5, i6 4, i6 4, i6 4, i6 5, i6 6, i6 5, i6 5, i6 4, i6 4, i6 4, i6 4, i6 4, i6 4, i6 5, i6 5, i6 5, i6 5, i6 4, i6 3, i6 2, i6 0, i6 2, i6 1, i6 1, i6 2, i6 2, i6 1, i6 0, i6 1, i6 1, i6 0, i6 1, i6 1, i6 0, i6 0, i6 1, i6 0, i6 1, i6 1, i6 0, i6 1, i6 1, i6 1, i6 1, i6 2, i6 2, i6 1, i6 1, i6 2, i6 2, i6 2, i6 1, i6 1, i6 1, i6 0, i6 0, i6 0, i6 0, i6 1, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 2, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 1, i6 1, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 2, i6 2, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 2, i6 1, i6 1, i6 2, i6 2, i6 0, i6 0, i6 0, i6 1, i6 1, i6 0, i6 1, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 1, i6 1, i6 1, i6 1, i6 2, i6 1, i6 0, i6 0, i6 0, i6 0, i6 2, i6 2, i6 2, i6 2, i6 3, i6 2, i6 2, i6 2, i6 3, i6 2, i6 2, i6 3, i6 3, i6 3, i6 2, i6 2, i6 2, i6 2, i6 1, i6 0, i6 2, i6 1, i6 2, i6 1, i6 2, i6 2, i6 2, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 1, i6 2, i6 0, i6 0, i6 0, i6 0, i6 1, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 2, i6 1, i6 1, i6 1, i6 1, i6 0, i6 1, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 1, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 1, i6 0, i6 0, i6 0, i6 1, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 2, i6 1, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 1, i6 0, i6 1, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 2, i6 0, i6 1, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 2, i6 1, i6 1, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 1, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 2, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 1, i6 0, i6 1, i6 1, i6 1, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 1, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 2, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 1, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 2, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 2, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 1, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 2, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 2, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 2, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 2, i6 20, i6 4, i6 8, i6 7, i6 7, i6 9, i6 10, i6 9, i6 6, i6 3, i6 2, i6 1, i6 1, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 1, i6 1, i6 1, i6 0, i6 1, i6 1, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 1, i6 1, i6 0, i6 1, i6 1, i6 1, i6 1, i6 1, i6 1, i6 1, i6 1, i6 4, i6 4, i6 5, i6 5, i6 4, i6 2, i6 2, i6 3, i6 4, i6 3, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 1, i6 0, i6 0, i6 0, i6 2, i6 2, i6 3, i6 2, i6 2, i6 1, i6 2, i6 3, i6 2, i6 1, i6 2, i6 3, i6 3, i6 3, i6 3, i6 4, i6 3, i6 2, i6 2, i6 4, i6 5, i6 4, i6 4, i6 4, i6 5, i6 2, i6 0, i6 2, i6 2, i6 1, i6 3, i6 2, i6 5, i6 6, i6 6, i6 3, i6 3, i6 3, i6 4, i6 2, i6 3, i6 3, i6 2, i6 4, i6 4, i6 3, i6 4, i6 4, i6 4, i6 4, i6 4, i6 6, i6 6, i6 5, i6 5, i6 6, i6 5, i6 4, i6 4, i6 5, i6 4, i6 4, i6 5, i6 5, i6 5, i6 5, i6 5, i6 6, i6 6, i6 6, i6 5, i6 5, i6 5, i6 2, i6 2, i6 3, i6 4, i6 5, i6 2, i6 1, i6 1, i6 1, i6 2, i6 3, i6 4, i6 4, i6 3, i6 3, i6 3, i6 3, i6 3, i6 2, i6 1, i6 4, i6 2, i6 1, i6 1, i6 2, i6 3, i6 4, i6 3, i6 3, i6 3, i6 4, i6 4, i6 4, i6 2, i6 3, i6 2, i6 4, i6 4, i6 4, i6 4, i6 3, i6 4, i6 4, i6 4, i6 5, i6 5, i6 4, i6 5, i6 5, i6 4, i6 0, i6 1, i6 3, i6 3, i6 4, i6 2, i6 4, i6 3, i6 2, i6 2, i6 3, i6 2, i6 3, i6 3, i6 3, i6 3, i6 2, i6 2, i6 2, i6 1, i6 2, i6 1, i6 1, i6 1, i6 2, i6 1, i6 2, i6 2, i6 3, i6 2, i6 2, i6 3, i6 3, i6 2, i6 2, i6 1, i6 2, i6 1, i6 2, i6 1, i6 2, i6 1, i6 2, i6 2, i6 2, i6 3, i6 2, i6 2, i6 3, i6 2, i6 0, i6 0, i6 2, i6 2, i6 2, i6 2, i6 0, i6 0, i6 0, i6 1, i6 1, i6 1, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 1, i6 1, i6 1, i6 0, i6 1, i6 1, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 2, i6 2, i6 1, i6 1, i6 2, i6 0, i6 0, i6 2, i6 1, i6 0, i6 1, i6 1, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 1, i6 0, i6 0, i6 2, i6 0, i6 3, i6 3, i6 3, i6 2, i6 1, i6 0, i6 1, i6 1, i6 1, i6 2, i6 1, i6 1, i6 1, i6 1, i6 1, i6 0, i6 1, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 2, i6 1, i6 1, i6 1, i6 1, i6 1, i6 0, i6 1, i6 1, i6 1, i6 1, i6 1, i6 0, i6 0, i6 2, i6 1, i6 1, i6 1, i6 2, i6 0, i6 1, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 1, i6 0, i6 0, i6 1, i6 0, i6 1, i6 2, i6 2, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 2, i6 1, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 1, i6 2, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 1, i6 0, i6 0, i6 0, i6 2, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 1, i6 0, i6 1, i6 1, i6 1, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 1, i6 0, i6 1, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 1, i6 1, i6 1, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 2, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 2, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 2, i6 0, i6 1, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 1, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 1, i6 0, i6 1, i6 0, i6 0, i6 0, i6 2, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 1, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 2, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 2, i6 0, i6 0, i6 1, i6 1, i6 1, i6 0, i6 0, i6 1, i6 1, i6 0, i6 0, i6 0, i6 0, i6 1, i6 1, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 2, i6 0, i6 0, i6 1, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 2, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 2, i6 31, i6 8, i6 3, i6 3, i6 3, i6 3, i6 5, i6 3, i6 2, i6 3, i6 8, i6 7, i6 0, i6 3, i6 3, i6 3, i6 3, i6 4, i6 4, i6 3, i6 3, i6 0, i6 0, i6 1, i6 1, i6 1, i6 1, i6 0, i6 1, i6 1, i6 2, i6 2, i6 1, i6 2, i6 3, i6 2, i6 1, i6 0, i6 0, i6 2, i6 2, i6 2, i6 3, i6 3, i6 1, i6 1, i6 0, i6 0, i6 0, i6 2, i6 5, i6 5, i6 5, i6 5, i6 6, i6 5, i6 3, i6 4, i6 4, i6 3, i6 8, i6 11, i6 9, i6 7, i6 7, i6 6, i6 6, i6 5, i6 6, i6 5, i6 5, i6 6, i6 6, i6 5, i6 3, i6 3, i6 4, i6 5, i6 5, i6 5, i6 4, i6 5, i6 5, i6 4, i6 5, i6 5, i6 6, i6 7, i6 6, i6 4, i6 4, i6 4, i6 4, i6 4, i6 4, i6 2, i6 2, i6 2, i6 3, i6 2, i6 2, i6 2, i6 2, i6 2, i6 2, i6 3, i6 4, i6 3, i6 4, i6 4, i6 1, i6 1, i6 0, i6 1, i6 1, i6 3, i6 3, i6 2, i6 2, i6 2, i6 2, i6 2, i6 2, i6 1, i6 2, i6 2, i6 2, i6 2, i6 2, i6 3, i6 4, i6 3, i6 3, i6 4, i6 4, i6 4, i6 3, i6 1, i6 2, i6 2, i6 5, i6 4, i6 3, i6 4, i6 3, i6 3, i6 3, i6 4, i6 4, i6 2, i6 2, i6 1, i6 1, i6 0, i6 0, i6 1, i6 1, i6 2, i6 3, i6 2, i6 1, i6 0, i6 0, i6 0, i6 1, i6 1, i6 1, i6 2, i6 0, i6 1, i6 2, i6 0, i6 0, i6 1, i6 2, i6 2, i6 2, i6 1, i6 2, i6 2, i6 3, i6 3, i6 2, i6 3, i6 2, i6 2, i6 2, i6 1, i6 0, i6 1, i6 1, i6 1, i6 1, i6 2, i6 3, i6 3, i6 4, i6 4, i6 3, i6 2, i6 2, i6 2, i6 1, i6 2, i6 1, i6 2, i6 3, i6 2, i6 3, i6 2, i6 1, i6 1, i6 0, i6 0, i6 1, i6 0, i6 1, i6 1, i6 1, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 2, i6 1, i6 0, i6 0, i6 1, i6 1, i6 1, i6 1, i6 2, i6 1, i6 1, i6 0, i6 0, i6 0, i6 1, i6 2, i6 1, i6 1, i6 1, i6 1, i6 1, i6 2, i6 1, i6 2, i6 0, i6 0, i6 1, i6 0, i6 2, i6 1, i6 1, i6 0, i6 0, i6 1, i6 1, i6 2, i6 3, i6 3, i6 2, i6 1, i6 1, i6 1, i6 1, i6 1, i6 2, i6 2, i6 1, i6 1, i6 1, i6 1, i6 0, i6 1, i6 2, i6 3, i6 2, i6 2, i6 1, i6 0, i6 2, i6 2, i6 1, i6 2, i6 2, i6 2, i6 0, i6 1, i6 1, i6 1, i6 1, i6 1, i6 1, i6 1, i6 2, i6 2, i6 0, i6 1, i6 2, i6 0, i6 0, i6 1, i6 1, i6 1, i6 1, i6 0, i6 3, i6 2, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 1, i6 1, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 2, i6 0, i6 2, i6 2, i6 2, i6 2, i6 1, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 2, i6 0, i6 0, i6 0, i6 1, i6 1, i6 2, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 2, i6 0, i6 1, i6 1, i6 1, i6 1, i6 0, i6 1, i6 1, i6 0, i6 1, i6 0, i6 0, i6 1, i6 2, i6 1, i6 1, i6 1, i6 1, i6 0, i6 1, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 2, i6 0, i6 0, i6 2, i6 2, i6 1, i6 1, i6 1, i6 2, i6 1, i6 2, i6 0, i6 0, i6 2, i6 2, i6 2, i6 2, i6 2, i6 1, i6 1, i6 2, i6 1, i6 0, i6 1, i6 2, i6 2, i6 1, i6 2, i6 2, i6 3, i6 2, i6 2, i6 1, i6 2, i6 2, i6 2, i6 1, i6 1, i6 2, i6 1, i6 1, i6 1, i6 1, i6 0, i6 0, i6 1, i6 1, i6 1, i6 2, i6 1, i6 2, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 1, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 2, i6 0, i6 1, i6 1, i6 1, i6 1, i6 1, i6 0, i6 1, i6 1, i6 0, i6 0, i6 0, i6 1, i6 1, i6 1, i6 2, i6 1, i6 1, i6 1, i6 1, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 1, i6 0, i6 0, i6 0, i6 1, i6 1, i6 0, i6 0, i6 1, i6 1, i6 0, i6 0, i6 1, i6 1, i6 1, i6 0, i6 0, i6 1, i6 1, i6 1, i6 1, i6 2, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 1, i6 1, i6 3, i6 1, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 1, i6 1, i6 2, i6 1, i6 0, i6 0, i6 1, i6 1, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 1, i6 0, i6 0, i6 2, i6 0, i6 1, i6 1, i6 1, i6 1, i6 1, i6 1, i6 1, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 1, i6 1, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 1, i6 1, i6 0, i6 2, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 2, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 1, i6 1, i6 1, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 2, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 2, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 2, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 2, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 2, i6 -30, i6 8, i6 3, i6 4, i6 4, i6 3, i6 4, i6 4, i6 3, i6 3, i6 3, i6 3, i6 3, i6 3, i6 4, i6 4, i6 4, i6 2, i6 3, i6 5, i6 2, i6 1, i6 0, i6 0, i6 0, i6 3, i6 2, i6 2, i6 2, i6 4, i6 3, i6 4, i6 3, i6 4, i6 4, i6 4, i6 5, i6 3, i6 5, i6 5, i6 5, i6 6, i6 4, i6 2, i6 2, i6 0, i6 5, i6 6, i6 6, i6 2, i6 3, i6 3, i6 4, i6 4, i6 4, i6 4, i6 4, i6 3, i6 3, i6 4, i6 4, i6 4, i6 2, i6 3, i6 3, i6 3, i6 3, i6 5, i6 3, i6 3, i6 1, i6 0, i6 1, i6 2, i6 1, i6 2, i6 3, i6 3, i6 4, i6 3, i6 3, i6 3, i6 4, i6 4, i6 4, i6 4, i6 2, i6 3, i6 3, i6 4, i6 3, i6 3, i6 3, i6 1, i6 0, i6 1, i6 1, i6 1, i6 2, i6 2, i6 0, i6 0, i6 2, i6 3, i6 1, i6 2, i6 2, i6 2, i6 2, i6 2, i6 3, i6 2, i6 4, i6 4, i6 4, i6 3, i6 2, i6 3, i6 3, i6 2, i6 1, i6 1, i6 0, i6 0, i6 0, i6 1, i6 2, i6 2, i6 1, i6 2, i6 3, i6 3, i6 3, i6 3, i6 4, i6 4, i6 4, i6 3, i6 3, i6 3, i6 4, i6 4, i6 2, i6 2, i6 2, i6 2, i6 3, i6 5, i6 4, i6 2, i6 4, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 1, i6 2, i6 2, i6 2, i6 2, i6 1, i6 1, i6 1, i6 0, i6 0, i6 1, i6 1, i6 1, i6 0, i6 1, i6 0, i6 0, i6 1, i6 1, i6 1, i6 1, i6 1, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 1, i6 3, i6 2, i6 1, i6 2, i6 5, i6 3, i6 2, i6 0, i6 1, i6 2, i6 1, i6 2, i6 2, i6 3, i6 3, i6 3, i6 3, i6 3, i6 4, i6 3, i6 3, i6 3, i6 3, i6 2, i6 4, i6 3, i6 3, i6 4, i6 3, i6 3, i6 4, i6 4, i6 3, i6 3, i6 3, i6 3, i6 3, i6 3, i6 3, i6 2, i6 3, i6 3, i6 3, i6 3, i6 2, i6 2, i6 2, i6 2, i6 2, i6 2, i6 2, i6 0, i6 4, i6 5, i6 6, i6 5, i6 2, i6 1, i6 2, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 1, i6 1, i6 1, i6 1, i6 0, i6 0, i6 0, i6 1, i6 1, i6 1, i6 1, i6 0, i6 0, i6 0, i6 0, i6 1, i6 2, i6 0, i6 1, i6 1, i6 0, i6 0, i6 2, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 1, i6 0, i6 0, i6 0, i6 1, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 1, i6 0, i6 3, i6 1, i6 0, i6 2, i6 1, i6 1, i6 1, i6 0, i6 0, i6 0, i6 0, i6 1, i6 2, i6 1, i6 1, i6 0, i6 1, i6 1, i6 1, i6 1, i6 0, i6 1, i6 1, i6 1, i6 0, i6 1, i6 0, i6 0, i6 1, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 1, i6 1, i6 1, i6 1, i6 1, i6 1, i6 1, i6 1, i6 0, i6 0, i6 0, i6 0, i6 1, i6 2, i6 4, i6 2, i6 2, i6 0, i6 0, i6 1, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 1, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 1, i6 1, i6 1, i6 0, i6 1, i6 0, i6 0, i6 1, i6 1, i6 0, i6 1, i6 0, i6 2, i6 1, i6 2, i6 2, i6 1, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 1, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 1, i6 1, i6 0, i6 0, i6 1, i6 0, i6 0, i6 1, i6 1, i6 1, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 1, i6 1, i6 0, i6 2, i6 1, i6 0, i6 1, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 2, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 1, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 2, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 1, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 1, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 1, i6 0, i6 0, i6 0, i6 0, i6 2, i6 0, i6 0, i6 0, i6 1, i6 1, i6 1, i6 0, i6 1, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 1, i6 1, i6 0, i6 2, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 2, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 1, i6 2, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 2, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 2, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 2, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 2, i6 -30, i6 13, i6 7, i6 8, i6 8, i6 7, i6 3, i6 1, i6 1, i6 0, i6 0, i6 0, i6 0, i6 2, i6 3, i6 5, i6 6, i6 6, i6 6, i6 7, i6 5, i6 6, i6 7, i6 8, i6 8, i6 8, i6 7, i6 6, i6 6, i6 5, i6 3, i6 2, i6 10, i6 1, i6 2, i6 2, i6 2, i6 0, i6 0, i6 2, i6 1, i6 1, i6 0, i6 0, i6 0, i6 3, i6 3, i6 6, i6 8, i6 2, i6 5, i6 7, i6 7, i6 6, i6 5, i6 5, i6 4, i6 4, i6 2, i6 0, i6 0, i6 1, i6 5, i6 4, i6 5, i6 4, i6 3, i6 3, i6 4, i6 4, i6 4, i6 3, i6 4, i6 5, i6 6, i6 5, i6 3, i6 4, i6 5, i6 5, i6 2, i6 2, i6 4, i6 0, i6 0, i6 0, i6 1, i6 1, i6 2, i6 1, i6 1, i6 3, i6 3, i6 5, i6 4, i6 6, i6 6, i6 1, i6 0, i6 2, i6 2, i6 0, i6 1, i6 2, i6 3, i6 3, i6 0, i6 1, i6 0, i6 1, i6 0, i6 1, i6 1, i6 0, i6 0, i6 1, i6 3, i6 3, i6 1, i6 2, i6 2, i6 2, i6 2, i6 3, i6 2, i6 3, i6 2, i6 1, i6 1, i6 0, i6 2, i6 0, i6 0, i6 0, i6 1, i6 3, i6 2, i6 2, i6 1, i6 2, i6 2, i6 3, i6 3, i6 3, i6 3, i6 2, i6 1, i6 1, i6 2, i6 2, i6 2, i6 4, i6 3, i6 2, i6 1, i6 2, i6 2, i6 3, i6 4, i6 2, i6 3, i6 5, i6 4, i6 3, i6 3, i6 2, i6 1, i6 2, i6 1, i6 1, i6 2, i6 1, i6 2, i6 2, i6 2, i6 2, i6 1, i6 2, i6 1, i6 1, i6 0, i6 0, i6 1, i6 0, i6 0, i6 1, i6 0, i6 1, i6 2, i6 3, i6 3, i6 1, i6 1, i6 0, i6 0, i6 2, i6 1, i6 1, i6 1, i6 2, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 1, i6 1, i6 1, i6 1, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 1, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 2, i6 1, i6 2, i6 4, i6 3, i6 2, i6 2, i6 2, i6 1, i6 1, i6 1, i6 1, i6 2, i6 0, i6 3, i6 2, i6 1, i6 1, i6 2, i6 2, i6 1, i6 1, i6 1, i6 1, i6 2, i6 1, i6 1, i6 1, i6 1, i6 0, i6 0, i6 1, i6 1, i6 1, i6 1, i6 0, i6 1, i6 1, i6 2, i6 1, i6 0, i6 2, i6 1, i6 1, i6 0, i6 1, i6 1, i6 0, i6 0, i6 0, i6 1, i6 0, i6 1, i6 2, i6 1, i6 2, i6 1, i6 0, i6 0, i6 0, i6 0, i6 1, i6 2, i6 0, i6 1, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 2, i6 0, i6 2, i6 2, i6 2, i6 1, i6 0, i6 0, i6 2, i6 1, i6 2, i6 1, i6 2, i6 0, i6 2, i6 2, i6 1, i6 2, i6 1, i6 2, i6 1, i6 1, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 1, i6 2, i6 1, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 1, i6 1, i6 0, i6 0, i6 2, i6 0, i6 0, i6 0, i6 1, i6 0, i6 1, i6 1, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 1, i6 1, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 2, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 1, i6 0, i6 0, i6 1, i6 1, i6 1, i6 1, i6 1, i6 1, i6 0, i6 1, i6 2, i6 2, i6 2, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 2, i6 2, i6 1, i6 1, i6 0, i6 0, i6 0, i6 1, i6 1, i6 1, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 2, i6 1, i6 2, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 2, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 2, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 2, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 1, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 1, i6 1, i6 0, i6 0, i6 1, i6 1, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 2, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 2, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 1, i6 0, i6 0, i6 0, i6 0, i6 2, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 2, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 2, i6 0, i6 1, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 0, i6 0, i6 1, i6 1, i6 2, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 0, i6 1, i6 0, i6 2]
@pp_V = internal constant [5 x i40] [i40 438916950976, i40 -13150551920, i40 228483918880, i40 0, i40 0]
@melfb = internal unnamed_addr constant [2580 x float] [float 0.000000e+00, float 0x3FF260AA60000000, float 0x3FFC481700000000, float 0x3FE7BAC720000000, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0x3FCDBFF040000000, float 0x3FF4226800000000, float 0x3FFC47AE20000000, float 0x3FEAE464A0000000, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0x3FCDC2E340000000, float 0x3FF28DB8C0000000, float 0x3FFF4B5DC0000000, float 0x3FF1C3C9E0000000, float 0x3FD3389B60000000, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0x3FA6937D20000000, float 0x3FEC785720000000, float 0x3FFB31F8A0000000, float 0x3FF85E9E20000000, float 0x3FE8D512E0000000, float 0x3FAD1EFB60000000, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0x3FDE85DB80000000, float 0x3FF3958100000000, float 0x3FFF16F000000000, float 0x3FF5D1B720000000, float 0x3FE639C0E0000000, float 0x3FA88BDAA0000000, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0x3FE45CE5C0000000, float 0x3FF4E2EB20000000, float 0x3FFF3BCD40000000, float 0x3FF6C22680000000, float 0x3FEA209AA0000000, float 0x3FCD532620000000, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0x3FE27C06E0000000, float 0x3FF2EF9DC0000000, float 0x3FFC559B40000000, float 0x3FFA8BAC80000000, float 0x3FF1B089A0000000, float 0x3FE228B6E0000000, float 0x3FA68A5060000000, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0x3FD5D0D060000000, float 0x3FEC9F40A0000000, float 0x3FF6EB8520000000, float 0x3FFF4BC6A0000000, float 0x3FF88CE700000000, float 0x3FF09BA5E0000000, float 0x3FE1BB0600000000, float 0x3FB4FF0020000000, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0x3FDDCB9240000000, float 0x3FEEC88A40000000, float 0x3FF7226800000000, float 0x3FFEB020C0000000, float 0x3FF9F0D840000000, float 0x3FF2BDA520000000, float 0x3FE7692F60000000, float 0x3FD34F6160000000, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0x3FD83D46C0000000, float 0x3FEA84DFC0000000, float 0x3FF44B5DC0000000, float 0x3FFB2C3CA0000000, float 0x3FFE196520000000, float 0x3FF7844D00000000, float 0x3FF11205C0000000, float 0x3FE5839040000000, float 0x3FD2481700000000, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0x3FBE666660000000, float 0x3FE0F7A4E0000000, float 0x3FEDDBDF80000000, float 0x3FF53E4260000000, float 0x3FFB6E2EC0000000, float 0x3FFE816F00000000, float 0x3FF88EF340000000, float 0x3FF2B923A0000000, float 0x3FE9FE8680000000, float 0x3FDD805E60000000, float 0x3FBDAC4720000000, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0x3FB7E8DDA0000000, float 0x3FDDC486A0000000, float 0x3FEA8DA3C0000000, float 0x3FF300D1C0000000, float 0x3FF89FBE80000000, float 0x3FFE254600000000, float 0x3FFC6E2EC0000000, float 0x3FF719CE00000000, float 0x3FF1DCC640000000, float 0x3FE96C2260000000, float 0x3FDE944680000000, float 0x3FC548A9C0000000, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0x3FCC8D3AE0000000, float 0x3FE1CC1000000000, float 0x3FEC465E80000000, float 0x3FF349BA60000000, float 0x3FF85AEE60000000, float 0x3FFD56D5C0000000, float 0x3FFDC154C0000000, float 0x3FF8ED9160000000, float 0x3FF42CA580000000, float 0x3FEEFC5040000000, float 0x3FE5C37600000000, float 0x3FD95AD960000000, float 0x3FBDC9C4E0000000, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0x3FC1F505E0000000, float 0x3FDC4A6220000000, float 0x3FE7A6F400000000, float 0x3FF081D7E0000000, float 0x3FF51E4F80000000, float 0x3FF9A92A40000000, float 0x3FFE2339C0000000, float 0x3FFD731900000000, float 0x3FF9196520000000, float 0x3FF4CF4200000000, float 0x3FF093DDA0000000, float 0x3FE8CF56E0000000, float 0x3FE09320E0000000, float 0x3FD0E58A40000000, float 0x3F8B5F1BE0000000, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0x3FC46833C0000000, float 0x3FDB9AE920000000, float 0x3FE661D000000000, float 0x3FEED7F0E0000000, float 0x3FF3985F00000000, float 0x3FF7B645A0000000, float 0x3FFBC6A7E0000000, float 0x3FFFC91D20000000, float 0x3FFC412060000000, float 0x3FF858E220000000, float 0x3FF47CEDA0000000, float 0x3FF0ACD9E0000000, float 0x3FE9D249E0000000, float 0x3FE261E500000000, float 0x3FD6108C40000000, float 0x3FBE262CC0000000, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0x3FCDF559C0000000, float 0x3FDE9CF560000000, float 0x3FE70678C0000000, float 0x3FEEA60D40000000, float 0x3FF316F000000000, float 0x3FF6CF4200000000, float 0x3FFA7BB300000000, float 0x3FFE1D7DC0000000, float 0x3FFE4B5DC0000000, float 0x3FFABF4880000000, float 0x3FF73D70A0000000, float 0x3FF3C56D60000000, float 0x3FF057A780000000, float 0x3FE9E69AE0000000, float 0x3FE330FD00000000, float 0x3FD91BEF40000000, float 0x3FC7F3E040000000, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0x3FBB478420000000, float 0x3FD5030800000000, float 0x3FE18572A0000000, float 0x3FE8751040000000, float 0x3FEF50EFE0000000, float 0x3FF30CB2A0000000, float 0x3FF667A100000000, float 0x3FF9B923A0000000, float 0x3FFD01A360000000, float 0x3FFFBEDFA0000000, float 0x3FFC87FCC0000000, float 0x3FF959B3E0000000, float 0x3FF6339C00000000, float 0x3FF315B580000000, float 0x3FEFFF5840000000, float 0x3FE9E32A00000000, float 0x3FE3D66280000000, float 0x3FDBB15B60000000, float 0x3FCFA6DF00000000, float 0x3FB04AA540000000, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0x3F90468440000000, float 0x3FCBC01A40000000, float 0x3FDA99AEA0000000, float 0x3FE39906C0000000, float 0x3FE9D4D400000000, float 0x3FF00068E0000000, float 0x3FF30E5600000000, float 0x3FF614E3C0000000, float 0x3FF913A920000000, float 0x3FFC0B0F20000000, float 0x3FFEFB7EA0000000, float 0x3FFE1B7180000000, float 0x3FFB395820000000, float 0x3FF85E3540000000, float 0x3FF589A020000000, float 0x3FF2BB98C0000000, float 0x3FEFE86840000000, float 0x3FEA663C80000000, float 0x3FE4F09960000000, float 0x3FDF0E5600000000, float 0x3FD453B8E0000000, float 0x3FC3616720000000, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0x3FBE46F160000000, float 0x3FD31A4BE0000000, float 0x3FDE875500000000, float 0x3FE4ECBFC0000000, float 0x3FEA88A480000000, float 0x3FF00BE0E0000000, float 0x3FF2CCCCC0000000, float 0x3FF58793E0000000, float 0x3FF83C9EE0000000, float 0x3FFAEB1C40000000, float 0x3FFD93DDA0000000, float 0x3FFFC91D20000000, float 0x3FFD2C3CA0000000, float 0x3FFA94AF40000000, float 0x3FF8027520000000, float 0x3FF575F700000000, float 0x3FF2EECC00000000, float 0x3FF06CF420000000, float 0x3FEBE07600000000, float 0x3FE6F14120000000, float 0x3FE20C0AE0000000, float 0x3FDA617C20000000, float 0x3FD0BE61C0000000, float 0x3FBCB923A0000000, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0x3F8B5AEA40000000, float 0x3FC69F16C0000000, float 0x3FD5AD96A0000000, float 0x3FDFF5ADA0000000, float 0x3FE513E820000000, float 0x3FEA223E20000000, float 0x3FEF2617C0000000, float 0x3FF20F90A0000000, float 0x3FF48793E0000000, float 0x3FF6F9DB20000000, float 0x3FF967A100000000, float 0x3FFBD07C80000000, float 0x3FFE346DC0000000, float 0x3FFF6C2260000000, float 0x3FFD119CE0000000, float 0x3FFABB98C0000000, float 0x3FF86A1620000000, float 0x3FF61D14E0000000, float 0x3FF3D42C40000000, float 0x3FF18FC500000000, float 0x3FEE9F16C0000000, float 0x3FEA271360000000, float 0x3FE5B74140000000, float 0x3FE14FA060000000, float 0x3FD9DFE320000000, float 0x3FD1306A20000000, float 0x3FC1210380000000, float 0.000000e+00], align 16
@llvm_global_ctors_1 = appending global [3 x void ()*] [void ()* @_GLOBAL__I_a, void ()* @_GLOBAL__I_a59, void ()* @_GLOBAL__I_a1949]
@llvm_global_ctors_0 = appending global [3 x i32] [i32 65535, i32 65535, i32 65535]
@hls_sin_cos_K2_V = internal constant [256 x i15] [i15 -10105, i15 -10104, i15 -10105, i15 -10104, i15 -10101, i15 -10101, i15 -10098, i15 -10097, i15 -10090, i15 -10087, i15 -10084, i15 -10081, i15 -10077, i15 -10072, i15 -10066, i15 -10060, i15 -10055, i15 -10050, i15 -10040, i15 -10034, i15 -10026, i15 -10017, i15 -10010, i15 -10002, i15 -9992, i15 -9982, i15 -9972, i15 -9963, i15 -9951, i15 -9940, i15 -9929, i15 -9918, i15 -9907, i15 -9892, i15 -9881, i15 -9869, i15 -9853, i15 -9841, i15 -9824, i15 -9813, i15 -9795, i15 -9780, i15 -9765, i15 -9748, i15 -9730, i15 -9714, i15 -9697, i15 -9679, i15 -9662, i15 -9645, i15 -9627, i15 -9605, i15 -9589, i15 -9566, i15 -9548, i15 -9524, i15 -9506, i15 -9485, i15 -9462, i15 -9439, i15 -9418, i15 -9397, i15 -9374, i15 -9348, i15 -9328, i15 -9300, i15 -9276, i15 -9253, i15 -9225, i15 -9202, i15 -9173, i15 -9149, i15 -9122, i15 -9095, i15 -9070, i15 -9041, i15 -9014, i15 -8987, i15 -8956, i15 -8929, i15 -8899, i15 -8869, i15 -8838, i15 -8808, i15 -8778, i15 -8747, i15 -8715, i15 -8683, i15 -8654, i15 -8619, i15 -8588, i15 -8555, i15 -8523, i15 -8487, i15 -8455, i15 -8421, i15 -8388, i15 -8350, i15 -8316, i15 -8282, i15 -8245, i15 -8209, i15 -8170, i15 -8136, i15 -8101, i15 -8064, i15 -8025, i15 -7987, i15 -7949, i15 -7912, i15 -7871, i15 -7833, i15 -7794, i15 -7753, i15 -7715, i15 -7673, i15 -7634, i15 -7592, i15 -7551, i15 -7510, i15 -7467, i15 -7424, i15 -7385, i15 -7343, i15 -7298, i15 -7252, i15 -7214, i15 -7169, i15 -2648, i15 -2647, i15 -2645, i15 -2644, i15 -2643, i15 -2645, i15 -2642, i15 -2643, i15 -2643, i15 -2642, i15 -2643, i15 -2643, i15 -2641, i15 -2640, i15 -2640, i15 -2639, i15 -2638, i15 -2638, i15 -2638, i15 -2637, i15 -2635, i15 -2633, i15 -2630, i15 -2630, i15 -2628, i15 -2625, i15 -2624, i15 -2624, i15 -2622, i15 -2620, i15 -2620, i15 -2618, i15 -2616, i15 -2612, i15 -2610, i15 -2609, i15 -2607, i15 -2603, i15 -2600, i15 -2597, i15 -2595, i15 -2593, i15 -2590, i15 -2589, i15 -2587, i15 -2583, i15 -2581, i15 -2579, i15 -2577, i15 -2575, i15 -2570, i15 -2567, i15 -2565, i15 -2561, i15 -2556, i15 -2554, i15 -2553, i15 -2550, i15 -2542, i15 -2540, i15 -2539, i15 -2532, i15 -2530, i15 -2526, i15 -2522, i15 -2520, i15 -2516, i15 -2512, i15 -2506, i15 -2503, i15 -2499, i15 -2495, i15 -2493, i15 -2484, i15 -2482, i15 -2480, i15 -2476, i15 -2466, i15 -2462, i15 -2457, i15 -2454, i15 -2451, i15 -2447, i15 -2438, i15 -2434, i15 -2432, i15 -2427, i15 -2420, i15 -2416, i15 -2408, i15 -2406, i15 -2400, i15 -2396, i15 -2389, i15 -2383, i15 -2377, i15 -2373, i15 -2367, i15 -2362, i15 -2358, i15 -2350, i15 -2346, i15 -2338, i15 -2333, i15 -2328, i15 -2323, i15 -2314, i15 -2308, i15 -2301, i15 -2297, i15 -2290, i15 -2285, i15 -2279, i15 -2273, i15 -2266, i15 -2260, i15 -2254, i15 -2243, i15 -2237, i15 -2231, i15 -2227, i15 -2219, i15 -2212, i15 -2206, i15 -2198, i15 -2193, i15 -2184, i15 -2178]
@hls_sin_cos_K1_V = internal constant [256 x i23] [i23 -1, i23 -20215, i23 -40426, i23 -60635, i23 -80846, i23 -101049, i23 -121251, i23 -141447, i23 -161642, i23 -181827, i23 -202005, i23 -222175, i23 -242337, i23 -262490, i23 -282635, i23 -302768, i23 -322889, i23 -342997, i23 -363097, i23 -383178, i23 -403247, i23 -423301, i23 -443338, i23 -463357, i23 -483361, i23 -503347, i23 -523313, i23 -543259, i23 -563186, i23 -583090, i23 -602973, i23 -622832, i23 -642668, i23 -662483, i23 -682268, i23 -702029, i23 -721767, i23 -741473, i23 -761156, i23 -780804, i23 -800429, i23 -820020, i23 -839581, i23 -859112, i23 -878610, i23 -898073, i23 -917503, i23 -936899, i23 -956259, i23 -975582, i23 -994869, i23 -1014123, i23 -1033331, i23 -1052508, i23 -1071639, i23 -1090736, i23 -1109785, i23 -1128795, i23 -1147764, i23 -1166690, i23 -1185570, i23 -1204404, i23 -1223195, i23 -1241943, i23 -1260637, i23 -1279291, i23 -1297893, i23 -1316445, i23 -1334952, i23 -1353403, i23 -1371809, i23 -1390158, i23 -1408458, i23 -1426703, i23 -1444893, i23 -1463032, i23 -1481113, i23 -1499139, i23 -1517112, i23 -1535023, i23 -1552880, i23 -1570677, i23 -1588416, i23 -1606094, i23 -1623711, i23 -1641267, i23 -1658763, i23 -1676195, i23 -1693561, i23 -1710869, i23 -1728108, i23 -1745284, i23 -1762393, i23 -1779440, i23 -1796414, i23 -1813323, i23 -1830163, i23 -1846938, i23 -1863639, i23 -1880270, i23 -1896834, i23 -1913323, i23 -1929744, i23 -1946086, i23 -1962357, i23 -1978555, i23 -1994680, i23 -2010729, i23 -2026702, i23 -2042597, i23 -2058418, i23 -2074159, i23 -2089823, i23 -2105411, i23 -2120915, i23 -2136342, i23 -2151687, i23 -2166953, i23 -2182137, i23 -2197237, i23 -2212257, i23 -2227193, i23 -2242041, i23 -2256808, i23 -2271491, i23 -2286091, i23 -2300596, i23 -2315021, i23 2, i23 -5290, i23 -10584, i23 -15876, i23 -21168, i23 -26457, i23 -31749, i23 -37037, i23 -42324, i23 -47613, i23 -52897, i23 -58182, i23 -63466, i23 -68750, i23 -74029, i23 -79309, i23 -84586, i23 -89861, i23 -95133, i23 -100404, i23 -105674, i23 -110941, i23 -116207, i23 -121468, i23 -126726, i23 -131984, i23 -137237, i23 -142485, i23 -147731, i23 -152976, i23 -158213, i23 -163450, i23 -168682, i23 -173913, i23 -179138, i23 -184358, i23 -189574, i23 -194788, i23 -199997, i23 -205201, i23 -210400, i23 -215593, i23 -220783, i23 -225966, i23 -231144, i23 -236319, i23 -241488, i23 -246649, i23 -251807, i23 -256957, i23 -262105, i23 -267246, i23 -272379, i23 -277507, i23 -282631, i23 -287746, i23 -292852, i23 -297954, i23 -303054, i23 -308142, i23 -313221, i23 -318299, i23 -323365, i23 -328425, i23 -333479, i23 -338522, i23 -343560, i23 -348590, i23 -353614, i23 -358628, i23 -363633, i23 -368632, i23 -373619, i23 -378605, i23 -383576, i23 -388537, i23 -393492, i23 -398444, i23 -403381, i23 -408310, i23 -413228, i23 -418136, i23 -423036, i23 -427931, i23 -432812, i23 -437681, i23 -442542, i23 -447396, i23 -452238, i23 -457072, i23 -461891, i23 -466703, i23 -471501, i23 -476293, i23 -481073, i23 -485842, i23 -490599, i23 -495345, i23 -500081, i23 -504803, i23 -509518, i23 -514219, i23 -518911, i23 -523588, i23 -528254, i23 -532908, i23 -537554, i23 -542184, i23 -546804, i23 -551409, i23 -556004, i23 -560583, i23 -565153, i23 -569708, i23 -574253, i23 -578783, i23 -583301, i23 -587810, i23 -592301, i23 -596779, i23 -601242, i23 -605695, i23 -610132, i23 -614557, i23 -618969, i23 -623363, i23 -627748, i23 -632117]
@hls_sin_cos_K0_V = internal constant [256 x i30] [i30 -536870912, i30 536860806, i30 536830487, i30 536779956, i30 536709217, i30 536618270, i30 536507120, i30 536375771, i30 536224228, i30 536052496, i30 535860582, i30 535648493, i30 535416237, i30 535163823, i30 534891261, i30 534598560, i30 534285732, i30 533952788, i30 533599742, i30 533226605, i30 532833393, i30 532420120, i30 531986802, i30 531533454, i30 531060095, i30 530566742, i30 530053413, i30 529520128, i30 528966907, i30 528393770, i30 527800740, i30 527187838, i30 526555088, i30 525902514, i30 525230139, i30 524537990, i30 523826093, i30 523094473, i30 522343160, i30 521572180, i30 520781564, i30 519971340, i30 519141540, i30 518292195, i30 517423336, i30 516534996, i30 515627209, i30 514700009, i30 513753431, i30 512787510, i30 511802283, i30 510797788, i30 509774060, i30 508731141, i30 507669067, i30 506587881, i30 505487621, i30 504368330, i30 503230050, i30 502072824, i30 500896695, i30 499701707, i30 498487906, i30 497255338, i30 496004047, i30 494734083, i30 493445492, i30 492138323, i30 490812626, i30 489468449, i30 488105845, i30 486724863, i30 485325557, i30 483907978, i30 482472180, i30 481018218, i30 479546145, i30 478056018, i30 476547893, i30 475021825, i30 473477874, i30 471916096, i30 470336551, i30 468739298, i30 467124397, i30 465491909, i30 463841896, i30 462174419, i30 460489541, i30 458787327, i30 457067839, i30 455331143, i30 453577304, i30 451806389, i30 450018462, i30 448213593, i30 446391849, i30 444553299, i30 442698011, i30 440826056, i30 438937505, i30 437032427, i30 435110896, i30 433172982, i30 431218760, i30 429248303, i30 427261685, i30 425258981, i30 423240266, i30 421205616, i30 419155108, i30 417088819, i30 415006827, i30 412909211, i30 410796048, i30 408667419, i30 406523404, i30 404364084, i30 402189540, i30 399999853, i30 397795107, i30 395575384, i30 393340767, i30 391091342, i30 388827192, i30 386548404, i30 384255061, i30 381947252, i30 421657428, i30 421654782, i30 421646845, i30 421633616, i30 421615096, i30 421591285, i30 421562184, i30 421527793, i30 421488113, i30 421443146, i30 421392891, i30 421337351, i30 421276526, i30 421210419, i30 421139029, i30 421062360, i30 420980412, i30 420893188, i30 420800689, i30 420702918, i30 420599877, i30 420491568, i30 420377994, i30 420259157, i30 420135059, i30 420005705, i30 419871096, i30 419731235, i30 419586126, i30 419435773, i30 419280177, i30 419119344, i30 418953276, i30 418781978, i30 418605453, i30 418423705, i30 418236738, i30 418044557, i30 417847166, i30 417644569, i30 417436771, i30 417223776, i30 417005590, i30 416782217, i30 416553662, i30 416319931, i30 416081029, i30 415836960, i30 415587732, i30 415333348, i30 415073816, i30 414809141, i30 414539328, i30 414264384, i30 413984316, i30 413699129, i30 413408829, i30 413113424, i30 412812921, i30 412507325, i30 412196643, i30 411880884, i30 411560053, i30 411234158, i30 410903207, i30 410567206, i30 410226164, i30 409880088, i30 409528986, i30 409172866, i30 408811735, i30 408445603, i30 408074476, i30 407698365, i30 407317276, i30 406931218, i30 406540201, i30 406144234, i30 405743324, i30 405337481, i30 404926714, i30 404511032, i30 404090445, i30 403664963, i30 403234594, i30 402799348, i30 402359235, i30 401914266, i30 401464450, i30 401009797, i30 400550317, i30 400086021, i30 399616918, i30 399143021, i30 398664339, i30 398180883, i30 397692664, i30 397199692, i30 396701980, i30 396199537, i30 395692376, i30 395180508, i30 394663944, i30 394142695, i30 393616774, i30 393086192, i30 392550962, i30 392011094, i30 391466602, i30 390917497, i30 390363792, i30 389805498, i30 389242630, i30 388675198, i30 388103217, i30 387526698, i30 386945655, i30 386360101, i30 385770048, i30 385175510, i30 384576500, i30 383973032, i30 383365118, i30 382752774, i30 382136012, i30 381514845, i30 380889289, i30 380259357]
@hls_ref_4oPi_table_100_V = internal constant [13 x i100] [i100 651, i100 42722829, i100 2799883368761, i100 183493156455125076, i100 12025407501443077023728, i100 788097106014573495827078495, i100 -324942669586316838841415153708, i100 -180360774834634567866366241929, i100 -549543034600100134917344132243, i100 368887532063083979769717295702, i100 48704333708782244565861426417, i100 -56997435928453100404229468607, i100 382357865489658119201891647380]
@hamming = internal unnamed_addr constant [256 x float] [float 0x3FB47AE140000000, float 0x3FB4840E20000000, float 0x3FB49F7300000000, float 0x3FB4CD3180000000, float 0x3FB50D2800000000, float 0x3FB55F6760000000, float 0x3FB5C3BD60000000, float 0x3FB63A29C0000000, float 0x3FB6C2ACC0000000, float 0x3FB75D13E0000000, float 0x3FB8095F20000000, float 0x3FB8C76D20000000, float 0x3FB9971C20000000, float 0x3FBA786C20000000, float 0x3FBB6AE7E0000000, float 0x3FBC6E6DA0000000, float 0x3FBD83A540000000, float 0x3FBEA93F20000000, float 0x3FBFDFE320000000, float 0x3FC09374C0000000, float 0x3FC13ED520000000, float 0x3FC1F2BAA0000000, float 0x3FC2AE7D60000000, float 0x3FC371C980000000, float 0x3FC43D46C0000000, float 0x3FC50FF980000000, float 0x3FC5EA35A0000000, float 0x3FC6CBFB20000000, float 0x3FC7B4A240000000, float 0x3FC8A47EC0000000, float 0x3FC99B90E0000000, float 0x3FCA98DCE0000000, float 0x3FCB9D0A60000000, float 0x3FCCA7C5A0000000, float 0x3FCDB8BAC0000000, float 0x3FCECFE9C0000000, float 0x3FCFECAAC0000000, float 0x3FD087D2C0000000, float 0x3FD11BEF40000000, float 0x3FD1B2D4E0000000, float 0x3FD24C5980000000, float 0x3FD2E87D20000000, float 0x3FD386EC20000000, float 0x3FD427D020000000, float 0x3FD4CAD580000000, float 0x3FD56FFC20000000, float 0x3FD61743E0000000, float 0x3FD6C05920000000, float 0x3FD76B65A0000000, float 0x3FD81815A0000000, float 0x3FD8C69300000000, float 0x3FD9765FE0000000, float 0x3FDA27A640000000, float 0x3FDADA6620000000, float 0x3FDB8E21A0000000, float 0x3FDC4302C0000000, float 0x3FDCF8DF80000000, float 0x3FDDAFB7E0000000, float 0x3FDE673820000000, float 0x3FDF1F3620000000, float 0x3FDFD805E0000000, float 0x3FE0487FC0000000, float 0x3FE0A53B80000000, float 0x3FE1020C40000000, float 0x3FE15EDD00000000, float 0x3FE1BBC2C0000000, float 0x3FE2187E80000000, float 0x3FE2752540000000, float 0x3FE2D18D20000000, float 0x3FE32DCB20000000, float 0x3FE389B520000000, float 0x3FE3E54B40000000, float 0x3FE44078A0000000, float 0x3FE49B2800000000, float 0x3FE4F559C0000000, float 0x3FE54EE3A0000000, float 0x3FE5A7EFA0000000, float 0x3FE6003EE0000000, float 0x3FE657D180000000, float 0x3FE6AE9240000000, float 0x3FE7048160000000, float 0x3FE75989E0000000, float 0x3FE7ADABA0000000, float 0x3FE800D1C0000000, float 0x3FE852E720000000, float 0x3FE8A3D700000000, float 0x3FE8F3B640000000, float 0x3FE9424600000000, float 0x3FE98FB000000000, float 0x3FE9DBCAA0000000, float 0x3FEA2695A0000000, float 0x3FEA6FFC20000000, float 0x3FEAB7FE00000000, float 0x3FEAFE8680000000, float 0x3FEB438080000000, float 0x3FEB86EC20000000, float 0x3FEBC8C940000000, float 0x3FEC0902E0000000, float 0x3FEC479920000000, float 0x3FEC846200000000, float 0x3FECBF8760000000, float 0x3FECF8CA80000000, float 0x3FED305540000000, float 0x3FED65FD80000000, float 0x3FED99AEA0000000, float 0x3FEDCB9240000000, float 0x3FEDFB7EA0000000, float 0x3FEE295EA0000000, float 0x3FEE555C60000000, float 0x3FEE7F38C0000000, float 0x3FEEA708E0000000, float 0x3FEECCCCC0000000, float 0x3FEEF08460000000, float 0x3FEF1205C0000000, float 0x3FEF3165E0000000, float 0x3FEF4EA4A0000000, float 0x3FEF69C240000000, float 0x3FEF8294A0000000, float 0x3FEF9945C0000000, float 0x3FEFADABA0000000, float 0x3FEFBFDB40000000, float 0x3FEFCFBFC0000000, float 0x3FEFDD6E00000000, float 0x3FEFE8E600000000, float 0x3FEFF1FDE0000000, float 0x3FEFF8DF80000000, float 0x3FEFFD75E0000000, float 0x3FEFFFC120000000, float 0x3FEFFFC120000000, float 0x3FEFFD75E0000000, float 0x3FEFF8DF80000000, float 0x3FEFF1FDE0000000, float 0x3FEFE8E600000000, float 0x3FEFDD6E00000000, float 0x3FEFCFBFC0000000, float 0x3FEFBFDB40000000, float 0x3FEFADABA0000000, float 0x3FEF9945C0000000, float 0x3FEF8294A0000000, float 0x3FEF69C240000000, float 0x3FEF4EA4A0000000, float 0x3FEF3165E0000000, float 0x3FEF1205C0000000, float 0x3FEEF08460000000, float 0x3FEECCCCC0000000, float 0x3FEEA708E0000000, float 0x3FEE7F38C0000000, float 0x3FEE555C60000000, float 0x3FEE295EA0000000, float 0x3FEDFB7EA0000000, float 0x3FEDCB9240000000, float 0x3FED99AEA0000000, float 0x3FED65FD80000000, float 0x3FED305540000000, float 0x3FECF8CA80000000, float 0x3FECBF8760000000, float 0x3FEC846200000000, float 0x3FEC479920000000, float 0x3FEC0902E0000000, float 0x3FEBC8C940000000, float 0x3FEB86EC20000000, float 0x3FEB438080000000, float 0x3FEAFE8680000000, float 0x3FEAB7FE00000000, float 0x3FEA6FFC20000000, float 0x3FEA2695A0000000, float 0x3FE9DBCAA0000000, float 0x3FE98FB000000000, float 0x3FE9424600000000, float 0x3FE8F3B640000000, float 0x3FE8A3D700000000, float 0x3FE852E720000000, float 0x3FE800D1C0000000, float 0x3FE7ADABA0000000, float 0x3FE75989E0000000, float 0x3FE7048160000000, float 0x3FE6AE9240000000, float 0x3FE657D180000000, float 0x3FE6003EE0000000, float 0x3FE5A7EFA0000000, float 0x3FE54EE3A0000000, float 0x3FE4F559C0000000, float 0x3FE49B2800000000, float 0x3FE44078A0000000, float 0x3FE3E54B40000000, float 0x3FE389B520000000, float 0x3FE32DCB20000000, float 0x3FE2D18D20000000, float 0x3FE2752540000000, float 0x3FE2187E80000000, float 0x3FE1BBC2C0000000, float 0x3FE15EDD00000000, float 0x3FE1020C40000000, float 0x3FE0A53B80000000, float 0x3FE0487FC0000000, float 0x3FDFD805E0000000, float 0x3FDF1F3620000000, float 0x3FDE673820000000, float 0x3FDDAFB7E0000000, float 0x3FDCF8DF80000000, float 0x3FDC4302C0000000, float 0x3FDB8E21A0000000, float 0x3FDADA6620000000, float 0x3FDA27A640000000, float 0x3FD9765FE0000000, float 0x3FD8C69300000000, float 0x3FD81815A0000000, float 0x3FD76B65A0000000, float 0x3FD6C05920000000, float 0x3FD61743E0000000, float 0x3FD56FFC20000000, float 0x3FD4CAD580000000, float 0x3FD427D020000000, float 0x3FD386EC20000000, float 0x3FD2E87D20000000, float 0x3FD24C5980000000, float 0x3FD1B2D4E0000000, float 0x3FD11BEF40000000, float 0x3FD087D2C0000000, float 0x3FCFECAAC0000000, float 0x3FCECFE9C0000000, float 0x3FCDB8BAC0000000, float 0x3FCCA7C5A0000000, float 0x3FCB9D0A60000000, float 0x3FCA98DCE0000000, float 0x3FC99B90E0000000, float 0x3FC8A47EC0000000, float 0x3FC7B4A240000000, float 0x3FC6CBFB20000000, float 0x3FC5EA35A0000000, float 0x3FC50FF980000000, float 0x3FC43D46C0000000, float 0x3FC371C980000000, float 0x3FC2AE7D60000000, float 0x3FC1F2BAA0000000, float 0x3FC13ED520000000, float 0x3FC09374C0000000, float 0x3FBFDFE320000000, float 0x3FBEA93F20000000, float 0x3FBD83A540000000, float 0x3FBC6E6DA0000000, float 0x3FBB6AE7E0000000, float 0x3FBA786C20000000, float 0x3FB9971C20000000, float 0x3FB8C76D20000000, float 0x3FB8095F20000000, float 0x3FB75D13E0000000, float 0x3FB6C2ACC0000000, float 0x3FB63A29C0000000, float 0x3FB5C3BD60000000, float 0x3FB55F6760000000, float 0x3FB50D2800000000, float 0x3FB4CD3180000000, float 0x3FB49F7300000000, float 0x3FB4840E20000000, float 0x3FB47AE140000000], align 16
@dut_str = internal unnamed_addr constant [4 x i8] c"dut\00"
@ap_fifo_str = internal unnamed_addr constant [8 x i8] c"ap_fifo\00"
@p_str9 = private unnamed_addr constant [17 x i8] c"transform_length\00", align 1
@p_str8 = private unnamed_addr constant [9 x i8] c"channels\00", align 1
@p_str7 = private unnamed_addr constant [16 x i8] c"parameterizable\00", align 1
@p_str6 = private unnamed_addr constant [11 x i8] c"Vivado_FFT\00", align 1
@p_str4 = private unnamed_addr constant [8 x i8] c"ap_fifo\00", align 1
@p_str35 = private unnamed_addr constant [15 x i8] c"floating_point\00", align 1
@p_str33 = private unnamed_addr constant [15 x i8] c"butterfly_type\00", align 1
@p_str32 = private unnamed_addr constant [18 x i8] c"complex_mult_type\00", align 1
@p_str31 = private unnamed_addr constant [22 x i8] c"memory_options_hybrid\00", align 1
@p_str30 = private unnamed_addr constant [60 x i8] c"number_of_stages_using_block_ram_for_data_and_phase_factors\00", align 1
@p_str3 = private unnamed_addr constant [6 x i8] c"ap_hs\00", align 1
@p_str29 = private unnamed_addr constant [23 x i8] c"memory_options_reorder\00", align 1
@p_str28 = private unnamed_addr constant [29 x i8] c"memory_options_phase_factors\00", align 1
@p_str27 = private unnamed_addr constant [20 x i8] c"memory_options_data\00", align 1
@p_str26 = private unnamed_addr constant [24 x i8] c"cyclic_prefix_insertion\00", align 1
@p_str25 = private unnamed_addr constant [16 x i8] c"output_ordering\00", align 1
@p_str24 = private unnamed_addr constant [12 x i8] c"nonrealtime\00", align 1
@p_str23 = private unnamed_addr constant [16 x i8] c"throttle_scheme\00", align 1
@p_str22 = private unnamed_addr constant [9 x i8] c"xk_index\00", align 1
@p_str21 = private unnamed_addr constant [6 x i8] c"ovflo\00", align 1
@p_str20 = private unnamed_addr constant [8 x i8] c"aresetn\00", align 1
@p_str2 = private unnamed_addr constant [12 x i8] c"hls_label_0\00", align 1
@p_str19 = private unnamed_addr constant [5 x i8] c"true\00", align 1
@p_str1806 = private unnamed_addr constant [14 x i8] c"ROM_1P_LUTRAM\00", align 1
@p_str1804 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@p_str18 = private unnamed_addr constant [7 x i8] c"aclken\00", align 1
@p_str17 = private unnamed_addr constant [15 x i8] c"rounding_modes\00", align 1
@p_str16 = private unnamed_addr constant [16 x i8] c"scaling_options\00", align 1
@p_str15 = private unnamed_addr constant [19 x i8] c"phase_factor_width\00", align 1
@p_str14 = private unnamed_addr constant [13 x i8] c"output_width\00", align 1
@p_str13 = private unnamed_addr constant [12 x i8] c"input_width\00", align 1
@p_str12 = private unnamed_addr constant [12 x i8] c"data_format\00", align 1
@p_str11 = private unnamed_addr constant [39 x i8] c"run_time_configurable_transform_length\00", align 1
@p_str10 = private unnamed_addr constant [23 x i8] c"implementation_options\00", align 1
@p_str = private unnamed_addr constant [1 x i8] zeroinitializer, align 1

define internal fastcc float @dut_sinf_or_cosf(float %t_in) nounwind uwtable readnone {
._crit_edge_ifconv:
  %t_in_read = call float @_ssdm_op_Read.ap_auto.float(float %t_in) nounwind
  call void (...)* @_ssdm_op_SpecMemCore([256 x i30]* @hls_sin_cos_K0_V, [1 x i8]* @p_str1804, [14 x i8]* @p_str1806, [1 x i8]* @p_str1804, i32 -1, [1 x i8]* @p_str1804, [1 x i8]* @p_str1804, [1 x i8]* @p_str1804, [1 x i8]* @p_str1804, [1 x i8]* @p_str1804) nounwind
  call void (...)* @_ssdm_op_SpecMemCore([256 x i23]* @hls_sin_cos_K1_V, [1 x i8]* @p_str1804, [14 x i8]* @p_str1806, [1 x i8]* @p_str1804, i32 -1, [1 x i8]* @p_str1804, [1 x i8]* @p_str1804, [1 x i8]* @p_str1804, [1 x i8]* @p_str1804, [1 x i8]* @p_str1804) nounwind
  call void (...)* @_ssdm_op_SpecMemCore([256 x i15]* @hls_sin_cos_K2_V, [1 x i8]* @p_str1804, [14 x i8]* @p_str1806, [1 x i8]* @p_str1804, i32 -1, [1 x i8]* @p_str1804, [1 x i8]* @p_str1804, [1 x i8]* @p_str1804, [1 x i8]* @p_str1804, [1 x i8]* @p_str1804) nounwind
  %p_Val2_21 = bitcast float %t_in_read to i32
  %p_Result_s = call i1 @_ssdm_op_BitSelect.i1.i32.i32(i32 %p_Val2_21, i32 31)
  %loc_V = call i8 @_ssdm_op_PartSelect.i8.i32.i32.i32(i32 %p_Val2_21, i32 23, i32 30)
  %loc_V_1 = trunc i32 %p_Val2_21 to i23
  %closepath = icmp ult i8 %loc_V, 126
  %p_i = add i8 -125, %loc_V
  %storemerge_i = select i1 %closepath, i8 %p_i, i8 0
  %p_Val2_10 = call fastcc i95 @"dut_big_mult_v3small<71, 24, 17>"() nounwind
  %p_Val2_11 = call i49 @_ssdm_op_PartSelect.i49.i95.i32.i32(i95 %p_Val2_10, i32 19, i32 67)
  %tmp_83_i = call i3 @_ssdm_op_PartSelect.i3.i95.i32.i32(i95 %p_Val2_10, i32 68, i32 70) nounwind
  %p_Val2_23 = select i1 %closepath, i3 0, i3 %tmp_83_i
  %tmp = trunc i3 %p_Val2_23 to i1
  %p_Val2_i = sub i49 0, %p_Val2_11
  %p_Val2_13 = select i1 %tmp, i49 %p_Val2_i, i49 %p_Val2_11
  %p_Result_i3_i = call i18 @_ssdm_op_PartSelect.i18.i49.i32.i32(i49 %p_Val2_13, i32 31, i32 48) nounwind
  %p_Result_12 = call i19 @_ssdm_op_BitConcatenate.i19.i18.i1(i18 %p_Result_i3_i, i1 true) nounwind
  %p_Result_13 = call i19 @llvm.part.select.i19(i19 %p_Result_12, i32 18, i32 0) nounwind
  %p_Result_14 = call i32 @_ssdm_op_BitConcatenate.i32.i13.i19(i13 -1, i19 %p_Result_13) nounwind
  %val_assign = call i32 @llvm.cttz.i32(i32 %p_Result_14, i1 true) nounwind
  %Mx_zeros_V = trunc i32 %val_assign to i5
  %tmp_84_i = zext i5 %Mx_zeros_V to i49
  %p_Val2_15 = shl i49 %p_Val2_13, %tmp_84_i
  %p_Val2_16 = call i31 @_ssdm_op_PartSelect.i31.i49.i32.i32(i49 %p_Val2_15, i32 18, i32 48)
  %tmp_12 = call i1 @_ssdm_op_BitSelect.i1.i49.i32(i49 %p_Val2_15, i32 17)
  %tmp_86_i = zext i1 %tmp_12 to i31
  %p_Val2_24 = add i31 %p_Val2_16, %tmp_86_i
  %tmp_87_i = zext i5 %Mx_zeros_V to i8
  %Ex_V = sub i8 %storemerge_i, %tmp_87_i
  %sh_i_cast = sext i8 %Ex_V to i9
  %isNeg = call i1 @_ssdm_op_BitSelect.i1.i8.i32(i8 %Ex_V, i32 7)
  %tmp_89_i = sub i9 0, %sh_i_cast
  %sh_assign = select i1 %isNeg, i9 %tmp_89_i, i9 %sh_i_cast
  %sh_assign_1_i_cast1 = sext i9 %sh_assign to i32
  %sh_assign_1_i_cast = sext i9 %sh_assign to i31
  %tmp_90_i = zext i31 %p_Val2_24 to i32
  %tmp_91_i = lshr i31 %p_Val2_24, %sh_assign_1_i_cast
  %tmp_91_i_cast = zext i31 %tmp_91_i to i32
  %tmp_93_i = shl i32 %tmp_90_i, %sh_assign_1_i_cast1
  %p_Val2_0_i234_in_i = select i1 %isNeg, i32 %tmp_91_i_cast, i32 %tmp_93_i
  %p_Result_s_48 = call i7 @_ssdm_op_PartSelect.i7.i32.i32.i32(i32 %p_Val2_0_i234_in_i, i32 24, i32 30)
  %p_Val2_3 = call i17 @_ssdm_op_PartSelect.i17.i32.i32.i32(i32 %p_Val2_0_i234_in_i, i32 7, i32 23)
  %tmp_s = call i9 @_ssdm_op_PartSelect.i9.i32.i32.i32(i32 %p_Val2_0_i234_in_i, i32 15, i32 23)
  %OP1_V_3 = zext i9 %tmp_s to i18
  %p_Val2_4 = mul i18 %OP1_V_3, %OP1_V_3
  %tmp_1 = call i17 @_ssdm_op_PartSelect.i17.i18.i32.i32(i18 %p_Val2_4, i32 1, i32 17)
  %sel_tmp = icmp eq i3 %p_Val2_23, 1
  %sel_tmp1 = icmp eq i3 %p_Val2_23, 2
  %sel_tmp2 = or i1 %sel_tmp1, %sel_tmp
  %not_sel_tmp = icmp ne i3 %p_Val2_23, 3
  %not_sel_tmp1 = icmp ne i3 %p_Val2_23, -4
  %tmp7 = and i1 %not_sel_tmp, %not_sel_tmp1
  %sel_tmp3 = and i1 %tmp7, %sel_tmp2
  %sel_tmp4 = icmp eq i3 %p_Val2_23, -3
  %sel_tmp5 = icmp eq i3 %p_Val2_23, -2
  %tmp8 = or i1 %sel_tmp3, %sel_tmp5
  %sin_basis = or i1 %tmp8, %sel_tmp4
  %p_Result_15 = call i8 @_ssdm_op_BitConcatenate.i8.i1.i7(i1 %sin_basis, i7 %p_Result_s_48)
  %Ex_V_ret_s = select i1 %sin_basis, i8 %Ex_V, i8 0
  %Mx_V_ret_s = select i1 %sin_basis, i31 %p_Val2_24, i31 -1
  %tmp_2 = zext i8 %p_Result_15 to i64
  %hls_sin_cos_K0_V_addr = getelementptr [256 x i30]* @hls_sin_cos_K0_V, i64 0, i64 %tmp_2
  %p_Val2_s = load i30* %hls_sin_cos_K0_V_addr, align 4
  %p_Val2_8 = call i31 @_ssdm_op_BitConcatenate.i31.i30.i1(i30 %p_Val2_s, i1 false)
  %OP1_V = zext i17 %p_Val2_3 to i40
  %hls_sin_cos_K1_V_addr = getelementptr [256 x i23]* @hls_sin_cos_K1_V, i64 0, i64 %tmp_2
  %hls_sin_cos_K1_V_load = load i23* %hls_sin_cos_K1_V_addr, align 4
  %OP2_V_1 = sext i23 %hls_sin_cos_K1_V_load to i40
  %p_Val2_6 = mul i40 %OP2_V_1, %OP1_V
  %tmp_3 = call i24 @_ssdm_op_PartSelect.i24.i40.i32.i32(i40 %p_Val2_6, i32 16, i32 39)
  %OP1_V_1 = zext i17 %tmp_1 to i32
  %hls_sin_cos_K2_V_addr = getelementptr [256 x i15]* @hls_sin_cos_K2_V, i64 0, i64 %tmp_2
  %hls_sin_cos_K2_V_load = load i15* %hls_sin_cos_K2_V_addr, align 2
  %OP2_V_2 = sext i15 %hls_sin_cos_K2_V_load to i32
  %p_Val2_7 = mul i32 %OP1_V_1, %OP2_V_2
  %tmp_4 = call i16 @_ssdm_op_PartSelect.i16.i32.i32.i32(i32 %p_Val2_7, i32 16, i32 31)
  %tmp_5 = sext i31 %p_Val2_8 to i32
  %tmp_6 = sext i24 %tmp_3 to i32
  %p_Val2_9 = add nsw i32 %tmp_5, %tmp_6
  %tmp_76_cast = sext i16 %tmp_4 to i32
  %r_V = add i32 %p_Val2_9, %tmp_76_cast
  %OP1_V_2_cast = sext i32 %r_V to i62
  %OP2_V_3_cast = zext i31 %Mx_V_ret_s to i62
  %p_Val2_18 = mul i62 %OP1_V_2_cast, %OP2_V_3_cast
  %p_0 = call i31 @_ssdm_op_PartSelect.i31.i62.i32.i32(i62 %p_Val2_18, i32 31, i32 61)
  %rhs_V = sext i8 %Ex_V_ret_s to i9
  %r_V_1 = sub i9 0, %rhs_V
  %resultf = call fastcc float @"dut_my_to_float<31, 1>"(i31 %p_0, i9 %r_V_1) nounwind
  %p_Val2_19 = bitcast float %resultf to i32
  %p_Result_16 = call i1 @_ssdm_op_BitSelect.i1.i32.i32(i32 %p_Val2_19, i32 31)
  %p_Result_17 = call i4 @_ssdm_op_BitConcatenate.i4.i1.i3(i1 %p_Result_s, i3 %p_Val2_23)
  %k_V_off1 = add i3 -1, %p_Val2_23
  %tmp_15 = call i2 @_ssdm_op_PartSelect.i2.i3.i32.i32(i3 %k_V_off1, i32 1, i32 2)
  %icmp = icmp eq i2 %tmp_15, 0
  br i1 %icmp, label %switch.early.test57, label %switch.early.test

switch.early.test57:                              ; preds = %._crit_edge_ifconv
  %k_V_off2 = add i3 %p_Val2_23, -3
  %tmp_16 = call i2 @_ssdm_op_PartSelect.i2.i3.i32.i32(i3 %k_V_off2, i32 1, i32 2)
  %icmp1 = icmp ne i2 %tmp_16, 0
  %k_V_off = add i3 %p_Val2_23, 3
  %tmp_17 = call i2 @_ssdm_op_PartSelect.i2.i3.i32.i32(i3 %k_V_off, i32 1, i32 2)
  %icmp2 = icmp eq i2 %tmp_17, 0
  %or_cond1 = or i1 %icmp1, %icmp2
  br i1 %or_cond1, label %1, label %0

switch.early.test:                                ; preds = %._crit_edge_ifconv
  %p_old = add i3 %p_Val2_23, 3
  %tmp_18 = call i2 @_ssdm_op_PartSelect.i2.i3.i32.i32(i3 %p_old, i32 1, i32 2)
  %icmp3 = icmp eq i2 %tmp_18, 0
  br i1 %icmp3, label %1, label %0

; <label>:0                                       ; preds = %switch.early.test, %switch.early.test57
  switch i4 %p_Result_17, label %._crit_edge273_ifconv [
    i4 -4, label %branch20
    i4 -5, label %branch19
    i4 -6, label %branch18
    i4 3, label %branch11
    i4 4, label %branch12
    i4 5, label %branch13
    i4 6, label %branch14
    i4 -7, label %branch17
  ]

; <label>:1                                       ; preds = %switch.early.test, %switch.early.test57
  switch i4 %p_Result_17, label %._crit_edge273_ifconv [
    i4 -3, label %branch37
    i4 -5, label %branch35
    i4 2, label %branch26
    i4 -6, label %branch34
    i4 4, label %branch28
    i4 5, label %branch29
    i4 -8, label %branch32
    i4 7, label %branch31
  ]

._crit_edge273_ifconv:                            ; preds = %branch37, %branch35, %branch34, %branch32, %branch31, %branch29, %branch28, %branch26, %branch20, %branch19, %branch18, %branch17, %branch14, %branch13, %branch12, %branch11, %1, %0
  %tmp_7 = phi i1 [ true, %branch11 ], [ true, %branch12 ], [ true, %branch13 ], [ true, %branch14 ], [ true, %branch17 ], [ true, %branch18 ], [ true, %branch19 ], [ true, %branch20 ], [ true, %branch26 ], [ true, %branch28 ], [ true, %branch29 ], [ true, %branch31 ], [ true, %branch32 ], [ true, %branch34 ], [ true, %branch35 ], [ true, %branch37 ], [ false, %0 ], [ false, %1 ]
  %p_Result_11 = or i1 %tmp_7, %p_Result_16
  %tmp_8 = icmp eq i8 %loc_V, 0
  %tmp_9 = icmp eq i23 %loc_V_1, 0
  %or_cond = and i1 %tmp_8, %tmp_9
  %tmp_i = icmp eq i8 %loc_V, -1
  %tmp_19 = trunc i32 %p_Val2_19 to i31
  %p_Result_18 = call i32 @_ssdm_op_BitConcatenate.i32.i1.i31(i1 %p_Result_11, i31 %tmp_19)
  %ret_i_i = bitcast i32 %p_Result_18 to float
  %sel_tmp6_demorgan = and i1 %tmp_8, %tmp_9
  %sel_tmp6 = xor i1 %sel_tmp6_demorgan, true
  %sel_tmp7 = and i1 %tmp_i, %sel_tmp6
  %sel_tmp8 = select i1 %sel_tmp7, float 0x7FFFFFFFE0000000, float 1.000000e+00
  %tmp_10 = or i1 %sel_tmp7, %or_cond
  %p_s = select i1 %tmp_10, float %sel_tmp8, float %ret_i_i
  ret float %p_s

branch11:                                         ; preds = %0
  br label %._crit_edge273_ifconv

branch12:                                         ; preds = %0
  br label %._crit_edge273_ifconv

branch13:                                         ; preds = %0
  br label %._crit_edge273_ifconv

branch14:                                         ; preds = %0
  br label %._crit_edge273_ifconv

branch17:                                         ; preds = %0
  br label %._crit_edge273_ifconv

branch18:                                         ; preds = %0
  br label %._crit_edge273_ifconv

branch19:                                         ; preds = %0
  br label %._crit_edge273_ifconv

branch20:                                         ; preds = %0
  br label %._crit_edge273_ifconv

branch26:                                         ; preds = %1
  br label %._crit_edge273_ifconv

branch28:                                         ; preds = %1
  br label %._crit_edge273_ifconv

branch29:                                         ; preds = %1
  br label %._crit_edge273_ifconv

branch31:                                         ; preds = %1
  br label %._crit_edge273_ifconv

branch32:                                         ; preds = %1
  br label %._crit_edge273_ifconv

branch34:                                         ; preds = %1
  br label %._crit_edge273_ifconv

branch35:                                         ; preds = %1
  br label %._crit_edge273_ifconv

branch37:                                         ; preds = %1
  br label %._crit_edge273_ifconv
}

define internal fastcc float @"dut_my_to_float<31, 1>"(i31 %in_V, i9 %prescale) readnone {
.preheader.preheader:
  %prescale_read = call i9 @_ssdm_op_Read.ap_auto.i9(i9 %prescale)
  %in_V_read = call i31 @_ssdm_op_Read.ap_auto.i31(i31 %in_V)
  %p_Result_3 = call i16 @_ssdm_op_PartSelect.i16.i31.i32.i32(i31 %in_V_read, i32 15, i32 30)
  %tmp = call i17 @_ssdm_op_BitConcatenate.i17.i16.i1(i16 %p_Result_3, i1 true)
  %out_bits_0_V = call i32 @_ssdm_op_PartSet.i32.i32.i17.i32.i32(i32 undef, i17 %tmp, i32 15, i32 31)
  %tmp_22 = trunc i31 %in_V_read to i15
  %tmp_s = call i16 @_ssdm_op_BitConcatenate.i16.i15.i1(i15 %tmp_22, i1 true)
  %p_Result_s = call i32 @_ssdm_op_PartSet.i32.i32.i16.i32.i32(i32 undef, i16 %tmp_s, i32 16, i32 31)
  br label %0

; <label>:0                                       ; preds = %1, %.preheader.preheader
  %c_0_s = phi i32 [ undef, %.preheader.preheader ], [ %c_1_1, %1 ]
  %c_1_s = phi i32 [ undef, %.preheader.preheader ], [ %c_1_2, %1 ]
  %i1 = phi i2 [ 0, %.preheader.preheader ], [ %i, %1 ]
  %exitcond = icmp eq i2 %i1, -2
  %empty = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 2, i64 2, i64 2)
  %i = add i2 %i1, 1
  br i1 %exitcond, label %.preheader3, label %1

; <label>:1                                       ; preds = %0
  %tmp_24 = trunc i2 %i1 to i1
  %out_bits_V_load_phi = select i1 %tmp_24, i32 %p_Result_s, i32 %out_bits_0_V
  %c_0 = call i32 @llvm.ctlz.i32(i32 %out_bits_V_load_phi, i1 true)
  %c_1_1 = select i1 %tmp_24, i32 %c_0_s, i32 %c_0
  %c_1_2 = select i1 %tmp_24, i32 %c_0, i32 %c_1_s
  br label %0

.preheader3:                                      ; preds = %0, %_ifconv
  %in_shift = phi i31 [ %in_shift_V, %_ifconv ], [ %in_V_read, %0 ]
  %shift = phi i32 [ %shift_2, %_ifconv ], [ 0, %0 ]
  %i2 = phi i2 [ %i_1, %_ifconv ], [ 0, %0 ]
  %tmp_23 = call i1 @_ssdm_op_BitSelect.i1.i2.i32(i2 %i2, i32 1)
  %empty_49 = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 1, i64 2, i64 1)
  %i_1 = add i2 %i2, 1
  br i1 %tmp_23, label %.loopexit_ifconv, label %_ifconv

_ifconv:                                          ; preds = %.preheader3
  %tmp_25 = trunc i2 %i2 to i1
  %sh_assign = select i1 %tmp_25, i32 %c_1_s, i32 %c_0_s
  %shift_2 = add nsw i32 %shift, %sh_assign
  %isNeg = call i1 @_ssdm_op_BitSelect.i1.i32.i32(i32 %sh_assign, i32 31)
  %tmp_11 = sub nsw i32 0, %sh_assign
  %sh_assign_2 = select i1 %isNeg, i32 %tmp_11, i32 %sh_assign
  %tmp_12 = sext i31 %in_shift to i32
  %tmp_14 = ashr i32 %tmp_12, %sh_assign_2
  %tmp_15 = shl i32 %tmp_12, %sh_assign_2
  %tmp_27 = trunc i32 %tmp_14 to i31
  %tmp_28 = trunc i32 %tmp_15 to i31
  %in_shift_V = select i1 %isNeg, i31 %tmp_27, i31 %tmp_28
  %tmp_16 = icmp eq i32 %sh_assign, 16
  br i1 %tmp_16, label %.preheader3, label %.loopexit_ifconv

.loopexit_ifconv:                                 ; preds = %.preheader3, %_ifconv
  %p_Val2_in = phi i31 [ %in_shift, %.preheader3 ], [ %in_shift_V, %_ifconv ]
  %shift_1 = phi i32 [ %shift, %.preheader3 ], [ %shift_2, %_ifconv ]
  %p_Val2_s = call i23 @_ssdm_op_PartSelect.i23.i31.i32.i32(i31 %p_Val2_in, i32 7, i32 29)
  %tmp_17 = icmp eq i31 %in_V_read, 0
  %tmp_30 = trunc i9 %prescale_read to i8
  %tmp_13 = sub i8 127, %tmp_30
  %tmp_31 = trunc i32 %shift_1 to i8
  %phitmp = sub i8 %tmp_13, %tmp_31
  %out_exp_V = select i1 %tmp_17, i8 0, i8 %phitmp
  %p_Result_19 = call i32 @_ssdm_op_BitConcatenate.i32.i1.i8.i23(i1 false, i8 %out_exp_V, i23 %p_Val2_s)
  %result_write_assign = bitcast i32 %p_Result_19 to float
  ret float %result_write_assign
}

define internal fastcc i1 @dut_mfcc([12544 x float]* nocapture %sound_file) {
.preheader76.preheader:
  %xn = alloca [256 x i64], align 8
  %xk = alloca [256 x i64], align 8
  %M = alloca [12544 x float], align 4
  %fft_config_data_V = alloca i16, align 2
  %fft_status_data_V = alloca i8, align 1
  %z = alloca [980 x float], align 4
  %z2 = alloca [129 x float], align 16
  %X = alloca [980 x float], align 4
  br label %.loopexit

.loopexit:                                        ; preds = %.preheader74, %.preheader76.preheader
  %i = phi i9 [ 0, %.preheader76.preheader ], [ %i_1, %.preheader74 ]
  %phi_mul2 = phi i14 [ 0, %.preheader76.preheader ], [ %next_mul3, %.preheader74 ]
  %next_mul3 = add i14 %phi_mul2, 49
  %i_cast = zext i9 %i to i13
  %exitcond = icmp eq i9 %i, -256
  %empty = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 256, i64 256, i64 256)
  %i_1 = add i9 %i, 1
  br i1 %exitcond, label %.preheader73, label %.preheader74.preheader

.preheader74.preheader:                           ; preds = %.loopexit
  %tmp_4 = zext i9 %i to i64
  %hamming_addr = getelementptr inbounds [256 x float]* @hamming, i64 0, i64 %tmp_4
  %hamming_load = load float* %hamming_addr, align 4
  br label %.preheader74

.preheader74:                                     ; preds = %0, %.preheader74.preheader
  %j = phi i6 [ %j_1, %0 ], [ 0, %.preheader74.preheader ]
  %phi_mul = phi i13 [ %next_mul, %0 ], [ 0, %.preheader74.preheader ]
  %exitcond2 = icmp eq i6 %j, -15
  %empty_50 = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 49, i64 49, i64 49)
  %j_1 = add i6 %j, 1
  br i1 %exitcond2, label %.loopexit, label %0

; <label>:0                                       ; preds = %.preheader74
  %next_mul = add i13 %phi_mul, 100
  %tmp_8 = add i13 %phi_mul, %i_cast
  %tmp_9 = zext i13 %tmp_8 to i64
  %sound_file_addr = getelementptr [12544 x float]* %sound_file, i64 0, i64 %tmp_9
  %sound_file_load = load float* %sound_file_addr, align 4
  %tmp_s = fmul float %sound_file_load, %hamming_load
  %tmp_6_cast = zext i6 %j to i14
  %tmp_26 = add i14 %phi_mul2, %tmp_6_cast
  %tmp_41_cast = zext i14 %tmp_26 to i64
  %M_addr = getelementptr [12544 x float]* %M, i64 0, i64 %tmp_41_cast
  store float %tmp_s, float* %M_addr, align 4
  br label %.preheader74

.preheader73:                                     ; preds = %.preheader72, %.loopexit
  %i1 = phi i9 [ 0, %.loopexit ], [ %i_2, %.preheader72 ]
  %phi_mul4 = phi i14 [ 0, %.loopexit ], [ %next_mul5, %.preheader72 ]
  %next_mul5 = add i14 %phi_mul4, 49
  %exitcond1 = icmp eq i9 %i1, -256
  %empty_51 = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 256, i64 256, i64 256)
  %i_2 = add i9 %i1, 1
  br i1 %exitcond1, label %arrayctor.loop, label %.preheader72.preheader

.preheader72.preheader:                           ; preds = %.preheader73
  %tmp_5_cast = zext i9 %i1 to i15
  br label %.preheader72

.preheader72:                                     ; preds = %1, %.preheader72.preheader
  %j2 = phi i6 [ %j_2, %1 ], [ 0, %.preheader72.preheader ]
  %exitcond3 = icmp eq i6 %j2, -15
  %empty_52 = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 49, i64 49, i64 49)
  %j_2 = add i6 %j2, 1
  br i1 %exitcond3, label %.preheader73, label %1

; <label>:1                                       ; preds = %.preheader72
  %tmp_14_cast = zext i6 %j2 to i14
  %tmp_32 = call i14 @_ssdm_op_BitConcatenate.i14.i6.i8(i6 %j2, i8 0)
  %tmp_43_cast = zext i14 %tmp_32 to i15
  %tmp_33 = add i15 %tmp_5_cast, %tmp_43_cast
  %tmp_44_cast = zext i15 %tmp_33 to i64
  %xn_input_M_real_addr = getelementptr [12544 x float]* @xn_input_M_real, i64 0, i64 %tmp_44_cast
  %tmp_40 = add i14 %tmp_14_cast, %phi_mul4
  %tmp_45_cast = zext i14 %tmp_40 to i64
  %M_addr_1 = getelementptr [12544 x float]* %M, i64 0, i64 %tmp_45_cast
  %M_load = load float* %M_addr_1, align 4
  store float %M_load, float* %xn_input_M_real_addr, align 8
  br label %.preheader72

arrayctor.loop:                                   ; preds = %.preheader73, %arrayctor.loop
  %tmp_1 = phi i8 [ %tmp_2, %arrayctor.loop ], [ 0, %.preheader73 ]
  %tmp_2 = add i8 %tmp_1, 1
  %tmp_3 = zext i8 %tmp_1 to i64
  %xn_addr = getelementptr [256 x i64]* %xn, i64 0, i64 %tmp_3
  store i64 0, i64* %xn_addr, align 8
  %tmp_10 = icmp eq i8 %tmp_1, -1
  %empty_53 = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 256, i64 256, i64 256)
  br i1 %tmp_10, label %arrayctor.loop3, label %arrayctor.loop

arrayctor.loop3:                                  ; preds = %arrayctor.loop, %arrayctor.loop3
  %tmp_11 = phi i8 [ %tmp_12, %arrayctor.loop3 ], [ 0, %arrayctor.loop ]
  %tmp_12 = add i8 %tmp_11, 1
  %tmp_13 = zext i8 %tmp_11 to i64
  %xk_addr = getelementptr [256 x i64]* %xk, i64 0, i64 %tmp_13
  store i64 0, i64* %xk_addr, align 8
  %tmp_15 = icmp eq i8 %tmp_11, -1
  %empty_54 = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 256, i64 256, i64 256)
  br i1 %tmp_15, label %.preheader, label %arrayctor.loop3

.preheader:                                       ; preds = %arrayctor.loop3, %7
  %i4 = phi i6 [ %i_4, %7 ], [ 0, %arrayctor.loop3 ]
  %exitcond4 = icmp eq i6 %i4, -15
  %empty_55 = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 49, i64 49, i64 49)
  %i_4 = add i6 %i4, 1
  br i1 %exitcond4, label %.preheader71, label %_ZN3hls6ip_fft8config_tI7config1E6setSchEjj.exit

_ZN3hls6ip_fft8config_tI7config1E6setSchEjj.exit: ; preds = %.preheader
  %tmp = call i32 (...)* @_ssdm_op_SpecRegionBegin([12 x i8]* @p_str2)
  %p_Val2_s = call i16 @_ssdm_op_Read.ap_fifo.i16P(i16* %fft_config_data_V)
  %p_Result_s = call i16 @_ssdm_op_PartSet.i16.i16.i9.i32.i32(i16 %p_Val2_s, i9 -170, i32 0, i32 8)
  call void @_ssdm_op_Write.ap_fifo.i16P(i16* %fft_config_data_V, i16 %p_Result_s)
  %tmp_41 = call i14 @_ssdm_op_BitConcatenate.i14.i6.i8(i6 %i4, i8 0)
  %tmp_47_cast = zext i14 %tmp_41 to i15
  br label %2

; <label>:2                                       ; preds = %3, %_ZN3hls6ip_fft8config_tI7config1E6setSchEjj.exit
  %j5 = phi i9 [ 0, %_ZN3hls6ip_fft8config_tI7config1E6setSchEjj.exit ], [ %j_3, %3 ]
  %exitcond6 = icmp eq i9 %j5, -256
  %empty_56 = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 256, i64 256, i64 256)
  %j_3 = add i9 %j5, 1
  br i1 %exitcond6, label %4, label %3

; <label>:3                                       ; preds = %2
  %tmp_18 = zext i9 %j5 to i64
  %tmp_18_cast = zext i9 %j5 to i15
  %tmp_42 = add i15 %tmp_47_cast, %tmp_18_cast
  %tmp_48_cast = zext i15 %tmp_42 to i64
  %xn_input_M_real_addr_1 = getelementptr [12544 x float]* @xn_input_M_real, i64 0, i64 %tmp_48_cast
  %xn_input_M_real_load = load float* %xn_input_M_real_addr_1, align 8
  %xn_addr_1 = getelementptr [256 x i64]* %xn, i64 0, i64 %tmp_18
  %xn_input_M_real_load_toint = bitcast float %xn_input_M_real_load to i32
  %xn_M_imag_addr_23941_part_set = call i64 @_ssdm_op_BitConcatenate.i64.i32.i32(i32 0, i32 %xn_input_M_real_load_toint)
  store i64 %xn_M_imag_addr_23941_part_set, i64* %xn_addr_1, align 8
  br label %2

; <label>:4                                       ; preds = %2
  call void (...)* @_ssdm_op_SpecInterface(i32 0, [6 x i8]* @p_str3, i32 0, i32 0, i32 0, i32 0, [1 x i8]* @p_str, [1 x i8]* @p_str, [1 x i8]* @p_str, i32 0, i32 0, i32 0, i32 0, [1 x i8]* @p_str) nounwind
  call void (...)* @_ssdm_op_SpecInterface(i32 undef, [8 x i8]* @p_str4, i32 0, i32 0, i32 0, i32 1, [1 x i8]* @p_str, [1 x i8]* @p_str, [1 x i8]* @p_str, i32 0, i32 0, i32 0, i32 0, [1 x i8]* @p_str) nounwind
  call void (...)* @_ssdm_op_SpecInterface([256 x i64]* %xn, [8 x i8]* @p_str4, i32 0, i32 0, i32 0, i32 1024, [1 x i8]* @p_str, [1 x i8]* @p_str, [1 x i8]* @p_str, i32 0, i32 0, i32 0, i32 0, [1 x i8]* @p_str) nounwind
  call void (...)* @_ssdm_op_SpecInterface([256 x i64]* %xk, [8 x i8]* @p_str4, i32 0, i32 0, i32 0, i32 1024, [1 x i8]* @p_str, [1 x i8]* @p_str, [1 x i8]* @p_str, i32 0, i32 0, i32 0, i32 0, [1 x i8]* @p_str) nounwind
  call void (...)* @_ssdm_op_SpecInterface(i16* %fft_config_data_V, [8 x i8]* @p_str4, i32 0, i32 0, i32 0, i32 0, [1 x i8]* @p_str, [1 x i8]* @p_str, [1 x i8]* @p_str, i32 0, i32 0, i32 0, i32 0, [1 x i8]* @p_str) nounwind
  call void @"fft<config1>"([256 x i64]* %xn, [256 x i64]* %xk, i8* %fft_status_data_V, i16* %fft_config_data_V)
  br label %5

; <label>:5                                       ; preds = %6, %4
  %j6 = phi i9 [ 0, %4 ], [ %j_4, %6 ]
  %exitcond8 = icmp eq i9 %j6, -256
  %empty_57 = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 256, i64 256, i64 256)
  %j_4 = add i9 %j6, 1
  br i1 %exitcond8, label %7, label %6

; <label>:6                                       ; preds = %5
  %tmp_23 = zext i9 %j6 to i64
  %tmp_23_cast = zext i9 %j6 to i15
  %tmp_45 = add i15 %tmp_23_cast, %tmp_47_cast
  %tmp_51_cast = zext i15 %tmp_45 to i64
  %xk_output_M_imag_addr_1 = getelementptr [12544 x float]* @xk_output_M_imag, i64 0, i64 %tmp_51_cast
  %xk_output_M_real_addr_1 = getelementptr [12544 x float]* @xk_output_M_real, i64 0, i64 %tmp_51_cast
  %xk_addr_1 = getelementptr [256 x i64]* %xk, i64 0, i64 %tmp_23
  %xk_load = load volatile i64* %xk_addr_1, align 8
  %tmp_46 = trunc i64 %xk_load to i32
  %xk_M_real_load7 = bitcast i32 %tmp_46 to float
  store float %xk_M_real_load7, float* %xk_output_M_real_addr_1, align 8
  %xk_M_imag_load_new = call i32 @_ssdm_op_PartSelect.i32.i64.i32.i32(i64 %xk_load, i32 32, i32 63)
  %xk_M_imag_load = bitcast i32 %xk_M_imag_load_new to float
  store float %xk_M_imag_load, float* %xk_output_M_imag_addr_1, align 4
  br label %5

; <label>:7                                       ; preds = %5
  %empty_58 = call i32 (...)* @_ssdm_op_SpecRegionEnd([12 x i8]* @p_str2, i32 %tmp)
  br label %.preheader

.preheader71:                                     ; preds = %.preheader67, %.preheader
  %frame = phi i6 [ 0, %.preheader ], [ %frame_1, %.preheader67 ]
  %exitcond5 = icmp eq i6 %frame, -15
  %empty_59 = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 49, i64 49, i64 49)
  %frame_1 = add i6 %frame, 1
  br i1 %exitcond5, label %.preheader66.preheader, label %.preheader70.preheader

.preheader70.preheader:                           ; preds = %.preheader71
  %tmp_17_cast = zext i6 %frame to i10
  br label %.preheader70

.preheader70:                                     ; preds = %8, %.preheader70.preheader
  %i7 = phi i8 [ %i_3, %8 ], [ 0, %.preheader70.preheader ]
  %exitcond7 = icmp eq i8 %i7, -127
  %empty_60 = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 129, i64 129, i64 129)
  %i_3 = add i8 %i7, 1
  br i1 %exitcond7, label %.preheader69, label %8

; <label>:8                                       ; preds = %.preheader70
  %tmp_19 = zext i8 %i7 to i64
  %tmp_43 = call i14 @_ssdm_op_BitConcatenate.i14.i6.i8(i6 %frame, i8 %i7)
  %tmp_44 = zext i14 %tmp_43 to i64
  %xk_output_M_imag_addr = getelementptr [12544 x float]* @xk_output_M_imag, i64 0, i64 %tmp_44
  %xk_output_M_real_addr = getelementptr [12544 x float]* @xk_output_M_real, i64 0, i64 %tmp_44
  %xk_output_M_real_load = load float* %xk_output_M_real_addr, align 8
  %tmp_20 = fmul float %xk_output_M_real_load, %xk_output_M_real_load
  %xk_output_M_imag_load = load float* %xk_output_M_imag_addr, align 4
  %tmp_21 = fmul float %xk_output_M_imag_load, %xk_output_M_imag_load
  %tmp_22 = fadd float %tmp_20, %tmp_21
  %z2_addr = getelementptr inbounds [129 x float]* %z2, i64 0, i64 %tmp_19
  store float %tmp_22, float* %z2_addr, align 4
  br label %.preheader70

.preheader69:                                     ; preds = %.preheader70, %10
  %j8 = phi i5 [ %j_5, %10 ], [ 0, %.preheader70 ]
  %phi_mul6 = phi i10 [ %next_mul7, %10 ], [ 0, %.preheader70 ]
  %next_mul7 = add i10 %phi_mul6, 49
  %j8_cast7 = zext i5 %j8 to i8
  %exitcond9 = icmp eq i5 %j8, -12
  %empty_61 = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 20, i64 20, i64 20)
  %j_5 = add i5 %j8, 1
  br i1 %exitcond9, label %.preheader67, label %.preheader68.preheader

.preheader68.preheader:                           ; preds = %.preheader69
  %p_shl = call i12 @_ssdm_op_BitConcatenate.i12.i5.i7(i5 %j8, i7 0)
  br label %.preheader68

.preheader68:                                     ; preds = %9, %.preheader68.preheader
  %p_x_assign = phi float [ %sum, %9 ], [ 0.000000e+00, %.preheader68.preheader ]
  %x = phi i8 [ %x_1, %9 ], [ 0, %.preheader68.preheader ]
  %exitcond11 = icmp eq i8 %x, -127
  %empty_62 = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 129, i64 129, i64 129)
  %x_1 = add i8 %x, 1
  br i1 %exitcond11, label %10, label %9

; <label>:9                                       ; preds = %.preheader68
  %tmp1 = add i8 %j8_cast7, %x
  %tmp1_cast = zext i8 %tmp1 to i12
  %tmp_27 = add i12 %tmp1_cast, %p_shl
  %tmp_28 = zext i12 %tmp_27 to i64
  %melfb_addr = getelementptr inbounds [2580 x float]* @melfb, i64 0, i64 %tmp_28
  %melfb_load = load float* %melfb_addr, align 4
  %tmp_29 = zext i8 %x to i64
  %z2_addr_1 = getelementptr inbounds [129 x float]* %z2, i64 0, i64 %tmp_29
  %z2_load = load float* %z2_addr_1, align 4
  %tmp_30 = fmul float %melfb_load, %z2_load
  %sum = fadd float %p_x_assign, %tmp_30
  br label %.preheader68

; <label>:10                                      ; preds = %.preheader68
  %tmp_i = call float @llvm.log.f32(float %p_x_assign) nounwind
  %tmp_47 = add i10 %tmp_17_cast, %phi_mul6
  %tmp_53_cast = zext i10 %tmp_47 to i64
  %z_addr = getelementptr [980 x float]* %z, i64 0, i64 %tmp_53_cast
  store float %tmp_i, float* %z_addr, align 4
  br label %.preheader69

.preheader67:                                     ; preds = %.preheader69, %13
  %k = phi i5 [ %k_1, %13 ], [ 0, %.preheader69 ]
  %phi_mul1 = phi i10 [ %next_mul1, %13 ], [ 0, %.preheader69 ]
  %next_mul1 = add i10 %phi_mul1, 49
  %k_cast3 = zext i5 %k to i32
  %exitcond10 = icmp eq i5 %k, -12
  %empty_63 = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 20, i64 20, i64 20)
  %k_1 = add i5 %k, 1
  br i1 %exitcond10, label %.preheader71, label %._crit_edge78

._crit_edge78:                                    ; preds = %.preheader67
  %tmp_24 = icmp eq i5 %k, 0
  %p_s = select i1 %tmp_24, float 0x3FCC9F25C0000000, float 0x3FD43D1360000000
  %tmp_25 = sitofp i32 %k_cast3 to float
  br label %11

; <label>:11                                      ; preds = %12, %._crit_edge78
  %sum9 = phi float [ 0.000000e+00, %._crit_edge78 ], [ %sum_1, %12 ]
  %n1 = phi i5 [ 0, %._crit_edge78 ], [ %n, %12 ]
  %phi_mul8 = phi i10 [ 0, %._crit_edge78 ], [ %next_mul9, %12 ]
  %n1_cast2 = zext i5 %n1 to i32
  %exitcond12 = icmp eq i5 %n1, -12
  %empty_64 = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 20, i64 20, i64 20)
  %n = add i5 %n1, 1
  br i1 %exitcond12, label %13, label %12

; <label>:12                                      ; preds = %11
  %next_mul9 = add i10 %phi_mul8, 49
  %tmp_49 = add i10 %tmp_17_cast, %phi_mul8
  %tmp_57_cast = zext i10 %tmp_49 to i64
  %z_addr_1 = getelementptr [980 x float]* %z, i64 0, i64 %tmp_57_cast
  %z_load = load float* %z_addr_1, align 4
  %tmp_34 = sitofp i32 %n1_cast2 to float
  %tmp_35 = fmul float %tmp_34, 2.000000e+00
  %tmp_36 = fadd float %tmp_35, 1.000000e+00
  %tmp_37 = fmul float %tmp_36, 0x400921FB00000000
  %tmp_38 = fmul float %tmp_37, %tmp_25
  %p_x_assign_2 = fdiv float %tmp_38, 4.000000e+01
  %tmp_i_i_i_i = call fastcc float @dut_sinf_or_cosf(float %p_x_assign_2) nounwind
  %tmp_39 = fmul float %z_load, %tmp_i_i_i_i
  %sum_1 = fadd float %sum9, %tmp_39
  br label %11

; <label>:13                                      ; preds = %11
  %tmp_31 = fmul float %p_s, %sum9
  %tmp_48 = add i10 %tmp_17_cast, %phi_mul1
  %tmp_55_cast = zext i10 %tmp_48 to i64
  %X_addr = getelementptr [980 x float]* %X, i64 0, i64 %tmp_55_cast
  store float %tmp_31, float* %X_addr, align 4
  br label %.preheader67

.preheader66.preheader:                           ; preds = %.preheader71
  %output1 = call fastcc i1 @dut_knn([980 x float]* %X)
  ret i1 %output1
}

declare i95 @llvm.part.set.i95.i27(i95, i27, i32, i32) nounwind readnone

declare i32 @llvm.part.set.i32.i17(i32, i17, i32, i32) nounwind readnone

declare i32 @llvm.part.set.i32.i16(i32, i16, i32, i32) nounwind readnone

declare i16 @llvm.part.set.i16.i9(i16, i9, i32, i32) nounwind readnone

declare i95 @llvm.part.select.i95(i95, i32, i32) nounwind readnone

declare i9 @llvm.part.select.i9(i9, i32, i32) nounwind readnone

declare i78 @llvm.part.select.i78(i78, i32, i32) nounwind readnone

declare i64 @llvm.part.select.i64(i64, i32, i32) nounwind readnone

declare i62 @llvm.part.select.i62(i62, i32, i32) nounwind readnone

declare i49 @llvm.part.select.i49(i49, i32, i32) nounwind readnone

declare i41 @llvm.part.select.i41(i41, i32, i32) nounwind readnone

declare i40 @llvm.part.select.i40(i40, i32, i32) nounwind readnone

declare i32 @llvm.part.select.i32(i32, i32, i32) nounwind readnone

declare i31 @llvm.part.select.i31(i31, i32, i32) nounwind readnone

declare i3 @llvm.part.select.i3(i3, i32, i32) nounwind readnone

declare i19 @llvm.part.select.i19(i19, i32, i32) nounwind readnone

declare i18 @llvm.part.select.i18(i18, i32, i32) nounwind readnone

declare i16 @llvm.part.select.i16(i16, i32, i32) nounwind readnone

declare float @llvm.log.f32(float) nounwind readonly

declare void @llvm.dbg.value(metadata, i64, metadata) nounwind readnone

declare void @llvm.dbg.declare(metadata, metadata) nounwind readnone

declare i32 @llvm.cttz.i32(i32, i1) nounwind readnone

declare i32 @llvm.ctlz.i32(i32, i1) nounwind readnone

define internal fastcc i1 @dut_knn([980 x float]* nocapture %input_r) readonly {
  %training_data2 = alloca [13734 x float], align 4
  %training_instance = alloca [13720 x float], align 4
  %min_distance = alloca [20 x i32], align 16
  %distance = alloca [14 x i32], align 16
  %group = alloca [20 x i32], align 16
  br label %1

; <label>:1                                       ; preds = %3, %0
  %j = phi i4 [ 0, %0 ], [ %j_6, %3 ]
  %phi_mul3 = phi i9 [ 0, %0 ], [ %next_mul4, %3 ]
  %phi_mul5 = phi i14 [ 0, %0 ], [ %next_mul6, %3 ]
  %phi_mul7 = phi i14 [ 0, %0 ], [ %next_mul8, %3 ]
  %next_mul8 = add i14 %phi_mul7, 981
  %next_mul6 = add i14 %phi_mul5, 1000
  %next_mul4 = add i9 %phi_mul3, 19
  %exitcond10 = icmp eq i4 %j, -2
  %empty = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 14, i64 14, i64 14)
  %j_6 = add i4 %j, 1
  br i1 %exitcond10, label %.preheader15, label %.preheader17.preheader

.preheader17.preheader:                           ; preds = %1
  %tmp_s = add i14 %phi_mul7, 980
  %tmp_63_cast = zext i14 %tmp_s to i64
  %training_data2_addr = getelementptr [13734 x float]* %training_data2, i64 0, i64 %tmp_63_cast
  br label %.preheader17

.preheader17:                                     ; preds = %.preheader16, %.preheader17.preheader
  %i = phi i5 [ 0, %.preheader17.preheader ], [ %i_6, %.preheader16 ]
  %phi_mul1 = phi i10 [ 0, %.preheader17.preheader ], [ %next_mul2, %.preheader16 ]
  %next_mul2 = add i10 %phi_mul1, 50
  %i_cast_cast = zext i5 %i to i10
  %exitcond9 = icmp eq i5 %i, -12
  %empty_65 = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 20, i64 20, i64 20)
  %i_6 = add i5 %i, 1
  br i1 %exitcond9, label %3, label %.preheader16

.preheader16:                                     ; preds = %.preheader17, %2
  %k = phi i6 [ %k_2, %2 ], [ 0, %.preheader17 ]
  %phi_mul = phi i10 [ %next_mul, %2 ], [ 0, %.preheader17 ]
  %k_cast1 = zext i6 %k to i10
  %exitcond8 = icmp eq i6 %k, -15
  %empty_66 = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 49, i64 49, i64 49)
  %k_2 = add i6 %k, 1
  br i1 %exitcond8, label %.preheader17, label %2

; <label>:2                                       ; preds = %.preheader16
  %tmp1 = add i10 %k_cast1, %phi_mul1
  %tmp1_cast = zext i10 %tmp1 to i14
  %tmp_46 = add i14 %phi_mul5, %tmp1_cast
  %tmp_47 = zext i14 %tmp_46 to i64
  %training_data_V_addr = getelementptr [14000 x i6]* @training_data_V, i64 0, i64 %tmp_47
  %training_data_V_load = load i6* %training_data_V_addr, align 1
  %tmp_54 = zext i6 %training_data_V_load to i32
  %tmp_48 = uitofp i32 %tmp_54 to float
  %next_mul = add i10 %i_cast_cast, %phi_mul
  %tmp_52_cast = zext i10 %phi_mul to i14
  %tmp_55 = add i14 %phi_mul7, %tmp_52_cast
  %tmp_68_cast = zext i14 %tmp_55 to i64
  %training_data2_addr_1 = getelementptr [13734 x float]* %training_data2, i64 0, i64 %tmp_68_cast
  store float %tmp_48, float* %training_data2_addr_1, align 4
  br label %.preheader16

; <label>:3                                       ; preds = %.preheader17
  %tmp = call i2 @_ssdm_op_PartSelect.i2.i9.i32.i32(i9 %phi_mul3, i32 7, i32 8)
  %tmp_41 = zext i2 %tmp to i32
  %tmp_42 = sitofp i32 %tmp_41 to float
  store float %tmp_42, float* %training_data2_addr, align 4
  br label %1

.preheader15:                                     ; preds = %.preheader14, %1
  %i1 = phi i5 [ 0, %1 ], [ %i_5, %.preheader14 ]
  %phi_mul2 = phi i14 [ 0, %1 ], [ %next_mul3, %.preheader14 ]
  %next_mul3 = add i14 %phi_mul2, 686
  %i1_cast_cast = zext i5 %i1 to i10
  %exitcond7 = icmp eq i5 %i1, -12
  %empty_67 = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 20, i64 20, i64 20)
  %i_5 = add i5 %i1, 1
  br i1 %exitcond7, label %.preheader12, label %.preheader14

.preheader14:                                     ; preds = %.preheader13, %.preheader15
  %j2 = phi i4 [ 0, %.preheader15 ], [ %j_7, %.preheader13 ]
  %phi_mul8 = phi i14 [ 0, %.preheader15 ], [ %next_mul9, %.preheader13 ]
  %next_mul9 = add i14 %phi_mul8, 981
  %j2_cast = zext i4 %j2 to i10
  %exitcond6 = icmp eq i4 %j2, -2
  %empty_68 = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 14, i64 14, i64 14)
  %j_7 = add i4 %j2, 1
  br i1 %exitcond6, label %.preheader15, label %.preheader13

.preheader13:                                     ; preds = %.preheader14, %4
  %k3 = phi i6 [ %k_3, %4 ], [ 0, %.preheader14 ]
  %phi_mul9 = phi i10 [ %next_mul10, %4 ], [ 0, %.preheader14 ]
  %phi_mul10 = phi i10 [ %next_mul12, %4 ], [ 0, %.preheader14 ]
  %exitcond5 = icmp eq i6 %k3, -15
  %empty_69 = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 49, i64 49, i64 49)
  %k_3 = add i6 %k3, 1
  br i1 %exitcond5, label %.preheader14, label %4

; <label>:4                                       ; preds = %.preheader13
  %next_mul10 = add i10 %i1_cast_cast, %phi_mul9
  %tmp_54_cast = zext i10 %phi_mul9 to i14
  %tmp_52 = add i14 %phi_mul8, %tmp_54_cast
  %tmp_71_cast = zext i14 %tmp_52 to i64
  %training_data2_addr_2 = getelementptr [13734 x float]* %training_data2, i64 0, i64 %tmp_71_cast
  %training_data2_load = load float* %training_data2_addr_2, align 4
  %next_mul12 = add i10 %j2_cast, %phi_mul10
  %tmp_56_cast = zext i10 %phi_mul10 to i14
  %tmp_53 = add i14 %phi_mul2, %tmp_56_cast
  %tmp_72_cast = zext i14 %tmp_53 to i64
  %training_instance_addr = getelementptr [13720 x float]* %training_instance, i64 0, i64 %tmp_72_cast
  store float %training_data2_load, float* %training_instance_addr, align 4
  br label %.preheader13

.preheader12:                                     ; preds = %.preheader15, %8
  %group_zero_s = phi i32 [ %group_zero_1, %8 ], [ undef, %.preheader15 ]
  %group_one_s = phi i32 [ %group_one_1, %8 ], [ undef, %.preheader15 ]
  %i4 = phi i5 [ %i_7, %8 ], [ 0, %.preheader15 ]
  %phi_mul4 = phi i10 [ %next_mul7, %8 ], [ 0, %.preheader15 ]
  %phi_mul6 = phi i14 [ %next_mul5, %8 ], [ 0, %.preheader15 ]
  %next_mul5 = add i14 %phi_mul6, 686
  %next_mul7 = add i10 %phi_mul4, 49
  %exitcond4 = icmp eq i5 %i4, -12
  %empty_70 = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 20, i64 20, i64 20)
  %i_7 = add i5 %i4, 1
  br i1 %exitcond4, label %9, label %.preheader11.preheader

.preheader11.preheader:                           ; preds = %.preheader12
  %tmp_44 = zext i5 %i4 to i64
  %min_distance_addr = getelementptr inbounds [20 x i32]* %min_distance, i64 0, i64 %tmp_44
  %group_addr = getelementptr inbounds [20 x i32]* %group, i64 0, i64 %tmp_44
  br label %.preheader11

.preheader11:                                     ; preds = %._crit_edge18, %.preheader11.preheader
  %j5 = phi i4 [ %j_8, %._crit_edge18 ], [ 0, %.preheader11.preheader ]
  %phi_mul11 = phi i14 [ %next_mul11, %._crit_edge18 ], [ 0, %.preheader11.preheader ]
  %next_mul11 = add i14 %phi_mul11, 981
  %j5_cast6 = zext i4 %j5 to i10
  %exitcond3 = icmp eq i4 %j5, -2
  %empty_71 = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 14, i64 14, i64 14)
  %j_8 = add i4 %j5, 1
  br i1 %exitcond3, label %8, label %.preheader.preheader

.preheader.preheader:                             ; preds = %.preheader11
  %tmp_51 = zext i4 %j5 to i64
  %tmp_56 = add i14 %phi_mul11, 980
  %tmp_70_cast = zext i14 %tmp_56 to i64
  %training_data2_addr_3 = getelementptr [13734 x float]* %training_data2, i64 0, i64 %tmp_70_cast
  %distance_addr = getelementptr inbounds [14 x i32]* %distance, i64 0, i64 %tmp_51
  br label %.preheader

.preheader:                                       ; preds = %._crit_edge, %.preheader.preheader
  %k6 = phi i6 [ %k_4, %._crit_edge ], [ 0, %.preheader.preheader ]
  %phi_mul12 = phi i10 [ %next_mul13, %._crit_edge ], [ 0, %.preheader.preheader ]
  %exitcond = icmp eq i6 %k6, -15
  %empty_72 = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 49, i64 49, i64 49)
  %k_4 = add i6 %k6, 1
  br i1 %exitcond, label %7, label %5

; <label>:5                                       ; preds = %.preheader
  %tmp_58_cast = zext i6 %k6 to i10
  %tmp_58 = add i10 %tmp_58_cast, %phi_mul4
  %tmp_73_cast = zext i10 %tmp_58 to i64
  %input_addr = getelementptr [980 x float]* %input_r, i64 0, i64 %tmp_73_cast
  %input_load = load float* %input_addr, align 4
  %next_mul13 = add i10 %phi_mul12, %j5_cast6
  %tmp_60_cast = zext i10 %phi_mul12 to i14
  %tmp_59 = add i14 %tmp_60_cast, %phi_mul6
  %tmp_74_cast = zext i14 %tmp_59 to i64
  %training_instance_addr_1 = getelementptr [13720 x float]* %training_instance, i64 0, i64 %tmp_74_cast
  %training_instance_load = load float* %training_instance_addr_1, align 4
  %p_x_assign = fsub float %input_load, %training_instance_load
  %p_Val2_s = bitcast float %p_x_assign to i32
  %tmp_49 = trunc i32 %p_Val2_s to i31
  %tmp_60 = trunc i32 %p_Val2_s to i23
  %p_Result_s = call i32 @_ssdm_op_BitConcatenate.i32.i1.i31(i1 false, i31 %tmp_49)
  %ret_i_i_i_i_i_i = bitcast i32 %p_Result_s to float
  %tmp_3 = call i8 @_ssdm_op_PartSelect.i8.i32.i32.i32(i32 %p_Val2_s, i32 23, i32 30)
  %notlhs = icmp ne i8 %tmp_3, -1
  %notrhs = icmp eq i23 %tmp_60, 0
  %tmp_4 = or i1 %notrhs, %notlhs
  %tmp_5 = fcmp olt float %ret_i_i_i_i_i_i, 0x3FC99999A0000000
  %tmp_6 = and i1 %tmp_4, %tmp_5
  br i1 %tmp_6, label %6, label %._crit_edge

; <label>:6                                       ; preds = %5
  %distance_load_1 = load i32* %distance_addr, align 4
  %tmp_61 = add nsw i32 %distance_load_1, 1
  store i32 %tmp_61, i32* %distance_addr, align 4
  br label %._crit_edge

._crit_edge:                                      ; preds = %6, %5
  br label %.preheader

; <label>:7                                       ; preds = %.preheader
  %distance_load = load i32* %distance_addr, align 4
  %min_distance_load = load i32* %min_distance_addr, align 4
  %tmp_57 = icmp slt i32 %distance_load, %min_distance_load
  br i1 %tmp_57, label %_ifconv, label %._crit_edge18

_ifconv:                                          ; preds = %7
  store i32 %distance_load, i32* %min_distance_addr, align 4
  %training_data2_load_1 = load float* %training_data2_addr_3, align 4
  %p_Val2_25 = bitcast float %training_data2_load_1 to i32
  %p_Result_20 = call i1 @_ssdm_op_BitSelect.i1.i32.i32(i32 %p_Val2_25, i32 31)
  %loc_V = call i8 @_ssdm_op_PartSelect.i8.i32.i32.i32(i32 %p_Val2_25, i32 23, i32 30) nounwind
  %loc_V_2 = trunc i32 %p_Val2_25 to i23
  %p_Result_21 = call i24 @_ssdm_op_BitConcatenate.i24.i1.i23(i1 true, i23 %loc_V_2) nounwind
  %tmp_i_i = zext i24 %p_Result_21 to i78
  %tmp_i_i_i_cast2 = zext i8 %loc_V to i9
  %sh_assign = add i9 -127, %tmp_i_i_i_cast2
  %isNeg = call i1 @_ssdm_op_BitSelect.i1.i9.i32(i9 %sh_assign, i32 8)
  %tmp_117_i_i = sub i8 127, %loc_V
  %tmp_117_i_i_cast = sext i8 %tmp_117_i_i to i9
  %sh_assign_1 = select i1 %isNeg, i9 %tmp_117_i_i_cast, i9 %sh_assign
  %sh_assign_1_cast = sext i9 %sh_assign_1 to i32
  %sh_assign_1_cast_cast = sext i9 %sh_assign_1 to i24
  %tmp_118_i_i = zext i32 %sh_assign_1_cast to i78
  %tmp_119_i_i = lshr i24 %p_Result_21, %sh_assign_1_cast_cast
  %tmp_121_i_i = shl i78 %tmp_i_i, %tmp_118_i_i
  %tmp_65 = call i1 @_ssdm_op_BitSelect.i1.i24.i32(i24 %tmp_119_i_i, i32 23)
  %tmp_62 = zext i1 %tmp_65 to i32
  %tmp_63 = call i32 @_ssdm_op_PartSelect.i32.i78.i32.i32(i78 %tmp_121_i_i, i32 23, i32 54)
  %p_Val2_28 = select i1 %isNeg, i32 %tmp_62, i32 %tmp_63
  %p_Val2_i_i = sub i32 0, %p_Val2_28
  %p_Val2_30 = select i1 %p_Result_20, i32 %p_Val2_i_i, i32 %p_Val2_28
  store i32 %p_Val2_30, i32* %group_addr, align 4
  br label %._crit_edge18

._crit_edge18:                                    ; preds = %_ifconv, %7
  br label %.preheader11

; <label>:8                                       ; preds = %.preheader11
  %group_load = load i32* %group_addr, align 4
  %tmp_50 = icmp eq i32 %group_load, 0
  %group_zero = add nsw i32 %group_zero_s, 1
  %group_one = add nsw i32 %group_one_s, 1
  %group_zero_1 = select i1 %tmp_50, i32 %group_zero, i32 %group_zero_s
  %group_one_1 = select i1 %tmp_50, i32 %group_one_s, i32 %group_one
  br label %.preheader12

; <label>:9                                       ; preds = %.preheader12
  %slt = icmp slt i32 %group_one_s, %group_zero_s
  %rev = xor i1 %slt, true
  ret i1 %rev
}

define void @"fft<config1>"([256 x i64]* %xn, [256 x i64]* %xk, i8* %status_data_V, i16* %config_ch_data_V) {
_ZN3hls6ip_fft8config_tI7config1E6getSchEj.exit.i:
  call void (...)* @_ssdm_op_SpecIPCore(i32 0, [1 x i8]* @p_str, [11 x i8]* @p_str6, [1 x i8]* @p_str, i32 -1, [1 x i8]* @p_str, [1 x i8]* @p_str, [1 x i8]* @p_str, [1 x i8]* @p_str, [16 x i8]* @p_str7)
  call void (...)* @_ssdm_op_SpecInterface(i16* %config_ch_data_V, [8 x i8]* @p_str4, i32 0, i32 0, i32 0, i32 0, [1 x i8]* @p_str, [1 x i8]* @p_str, [1 x i8]* @p_str, i32 0, i32 0, i32 0, i32 0, [1 x i8]* @p_str) nounwind
  call void (...)* @_ssdm_op_SpecInterface(i8* %status_data_V, [8 x i8]* @p_str4, i32 0, i32 0, i32 0, i32 0, [1 x i8]* @p_str, [1 x i8]* @p_str, [1 x i8]* @p_str, i32 0, i32 0, i32 0, i32 0, [1 x i8]* @p_str) nounwind
  call void (...)* @_ssdm_op_SpecInterface([256 x i64]* %xn, [8 x i8]* @p_str4, i32 0, i32 0, i32 0, i32 0, [1 x i8]* @p_str, [1 x i8]* @p_str, [1 x i8]* @p_str, i32 0, i32 0, i32 0, i32 0, [1 x i8]* @p_str) nounwind
  call void (...)* @_ssdm_op_SpecInterface([256 x i64]* %xk, [8 x i8]* @p_str4, i32 0, i32 0, i32 0, i32 0, [1 x i8]* @p_str, [1 x i8]* @p_str, [1 x i8]* @p_str, i32 0, i32 0, i32 0, i32 0, [1 x i8]* @p_str) nounwind
  call void (...)* @_ssdm_op_SpecKeepValue([9 x i8]* @p_str8, i32 1, [17 x i8]* @p_str9, i32 256, [23 x i8]* @p_str10, i32 2, [39 x i8]* @p_str11, i32 0, [12 x i8]* @p_str12, [15 x i8]* @p_str35, [12 x i8]* @p_str13, i32 32, [13 x i8]* @p_str14, i32 32, [19 x i8]* @p_str15, i32 24, [16 x i8]* @p_str16, i32 0, [15 x i8]* @p_str17, i32 0, [7 x i8]* @p_str18, [5 x i8]* @p_str19, [8 x i8]* @p_str20, [5 x i8]* @p_str19, [6 x i8]* @p_str21, i32 1, [9 x i8]* @p_str22, i32 0, [16 x i8]* @p_str23, [12 x i8]* @p_str24, [16 x i8]* @p_str25, i32 1, [24 x i8]* @p_str26, i32 0, [20 x i8]* @p_str27, i32 0, [29 x i8]* @p_str28, i32 0, [23 x i8]* @p_str29, i32 0, [60 x i8]* @p_str30, i32 1, [22 x i8]* @p_str31, i32 0, [18 x i8]* @p_str32, i32 1, [15 x i8]* @p_str33, i32 0) nounwind
  %p_Val2_s = call i16 @_ssdm_op_Read.ap_fifo.i16P(i16* %config_ch_data_V)
  %p_Result_s = call i1 @_ssdm_op_PartSelect.i1.i16.i32.i32(i16 %p_Val2_s, i32 0, i32 0)
  %tmp = call i1 @_ssdm_op_PartSelect.i1.i16.i32.i32(i16 %p_Val2_s, i32 1, i32 1)
  %tmp_27 = or i1 %tmp, %p_Result_s
  %tmp_28 = call i7 @_ssdm_op_PartSelect.i7.i16.i32.i32(i16 %p_Val2_s, i32 2, i32 8)
  %tmp_29 = call i8 @_ssdm_op_BitConcatenate.i8.i7.i1(i7 %tmp_28, i1 %tmp_27)
  %tmp_s = icmp eq i8 %tmp_29, 0
  br i1 %tmp_s, label %_ZN3hls8fft_coreI7config1Lc32ELc32EffLi256ELc1ELNS_6ip_fft4typeE1EEEvPSt7complexIT2_EPS4_IT3_EPNS2_8status_tIT_EEPNS2_8config_tISC_EE.exit, label %.preheader

.preheader:                                       ; preds = %_ZN3hls6ip_fft8config_tI7config1E6getSchEj.exit.i, %0
  %i_i = phi i32 [ %i, %0 ], [ 0, %_ZN3hls6ip_fft8config_tI7config1E6getSchEj.exit.i ]
  %exitcond = icmp eq i32 %i_i, 256
  %empty = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 256, i64 256, i64 256)
  %i = add nsw i32 %i_i, 1
  br i1 %exitcond, label %_ZN3hls8fft_coreI7config1Lc32ELc32EffLi256ELc1ELNS_6ip_fft4typeE1EEEvPSt7complexIT2_EPS4_IT3_EPNS2_8status_tIT_EEPNS2_8config_tISC_EE.exit, label %0

; <label>:0                                       ; preds = %.preheader
  %tmp_62 = zext i32 %i_i to i64
  %xn_addr = getelementptr [256 x i64]* %xn, i64 0, i64 %tmp_62
  %xn_load = load i64* %xn_addr, align 8
  %xk_addr = getelementptr [256 x i64]* %xk, i64 0, i64 %tmp_62
  store i64 %xn_load, i64* %xk_addr, align 8
  br label %.preheader

_ZN3hls8fft_coreI7config1Lc32ELc32EffLi256ELc1ELNS_6ip_fft4typeE1EEEvPSt7complexIT2_EPS4_IT3_EPNS2_8status_tIT_EEPNS2_8config_tISC_EE.exit: ; preds = %.preheader, %_ZN3hls6ip_fft8config_tI7config1E6getSchEj.exit.i
  %p_s = zext i1 %p_Result_s to i8
  call void @_ssdm_op_Write.ap_fifo.i8P(i8* %status_data_V, i8 %p_s)
  ret void
}

define void @dut(i32* %strm_in_V_V, i32* %strm_out_V_V) {
  call void (...)* @_ssdm_op_SpecInterface(i32* %strm_out_V_V, [8 x i8]* @ap_fifo_str, i32 0, i32 0, i32 0, i32 0, [1 x i8]* @p_str, [1 x i8]* @p_str, [1 x i8]* @p_str, i32 2, i32 2, i32 16, i32 16, [1 x i8]* @p_str)
  call void (...)* @_ssdm_op_SpecInterface(i32* %strm_in_V_V, [8 x i8]* @ap_fifo_str, i32 0, i32 0, i32 0, i32 0, [1 x i8]* @p_str, [1 x i8]* @p_str, [1 x i8]* @p_str, i32 2, i32 2, i32 16, i32 16, [1 x i8]* @p_str)
  call void (...)* @_ssdm_op_SpecBitsMap(i32* %strm_in_V_V), !map !87
  call void (...)* @_ssdm_op_SpecBitsMap(i32* %strm_out_V_V), !map !93
  call void (...)* @_ssdm_op_SpecTopModule([4 x i8]* @dut_str) nounwind
  %sound_in = alloca [12544 x float], align 16
  br label %1

; <label>:1                                       ; preds = %2, %0
  %i = phi i14 [ 0, %0 ], [ %i_8, %2 ]
  %exitcond = icmp eq i14 %i, -3840
  %empty = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 12544, i64 12544, i64 12544)
  %i_8 = add i14 %i, 1
  br i1 %exitcond, label %3, label %2

; <label>:2                                       ; preds = %1
  %tmp_V_1 = call i32 @_ssdm_op_Read.ap_fifo.volatile.i32P(i32* %strm_in_V_V)
  %tmp_V_2 = call i32 @_ssdm_op_Read.ap_fifo.volatile.i32P(i32* %strm_in_V_V)
  %p_Result_s = call i64 @_ssdm_op_BitConcatenate.i64.i32.i32(i32 %tmp_V_2, i32 %tmp_V_1)
  %tmp_s = uitofp i64 %p_Result_s to float
  %tmp_63 = zext i14 %i to i64
  %sound_in_addr = getelementptr inbounds [12544 x float]* %sound_in, i64 0, i64 %tmp_63
  store float %tmp_s, float* %sound_in_addr, align 4
  br label %1

; <label>:3                                       ; preds = %1
  %val_assign = call fastcc i1 @dut_mfcc([12544 x float]* %sound_in)
  %tmp_V = zext i1 %val_assign to i32
  call void @_ssdm_op_Write.ap_fifo.volatile.i32P(i32* %strm_out_V_V, i32 %tmp_V)
  ret void
}

define internal fastcc i95 @"dut_big_mult_v3small<71, 24, 17>"() readnone {
.preheader142.preheader:
  %pps_V = alloca [5 x i41], align 8
  br label %.preheader142

.preheader142:                                    ; preds = %.preheader142, %.preheader142.preheader
  %i = phi i3 [ 0, %.preheader142.preheader ], [ %i_10, %.preheader142 ]
  %exitcond13 = icmp eq i3 %i, -3
  %empty = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 5, i64 5, i64 5)
  %i_10 = add i3 %i, 1
  br i1 %exitcond13, label %arrayctor.loop1.preheader, label %.preheader142

arrayctor.loop1.preheader:                        ; preds = %.preheader142
  %pps_V_addr = getelementptr [5 x i41]* %pps_V, i64 0, i64 0
  store i41 438916950976, i41* %pps_V_addr, align 16
  br label %0

; <label>:0                                       ; preds = %_ZrsILi41ELb0EE11ap_int_baseIXT_EXT0_EXleT_Li64EEERKS1_i.exit, %arrayctor.loop1.preheader
  %i_1 = phi i3 [ 1, %arrayctor.loop1.preheader ], [ %i_9, %_ZrsILi41ELb0EE11ap_int_baseIXT_EXT0_EXleT_Li64EEERKS1_i.exit ]
  %exitcond14 = icmp eq i3 %i_1, -3
  %empty_73 = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 4, i64 4, i64 4)
  br i1 %exitcond14, label %.preheader, label %_ZrsILi41ELb0EE11ap_int_baseIXT_EXT0_EXleT_Li64EEERKS1_i.exit

_ZrsILi41ELb0EE11ap_int_baseIXT_EXT0_EXleT_Li64EEERKS1_i.exit: ; preds = %0
  %tmp_64 = zext i3 %i_1 to i64
  %tmp_65 = add i3 %i_1, -1
  %tmp_66 = zext i3 %tmp_65 to i64
  %pps_V_addr_1 = getelementptr [5 x i41]* %pps_V, i64 0, i64 %tmp_66
  %pps_V_load = load i41* %pps_V_addr_1, align 8
  %tmp = call i24 @_ssdm_op_PartSelect.i24.i41.i32.i32(i41 %pps_V_load, i32 17, i32 40)
  %r_V_4_cast = zext i24 %tmp to i40
  %pps_V_addr_2 = getelementptr [5 x i41]* %pps_V, i64 0, i64 %tmp_64
  %pp_V_addr = getelementptr [5 x i40]* @pp_V, i64 0, i64 %tmp_64
  %pp_V_load = load i40* %pp_V_addr, align 8
  %tmp_67 = add i40 %r_V_4_cast, %pp_V_load
  %tmp_71_cast = zext i40 %tmp_67 to i41
  store i41 %tmp_71_cast, i41* %pps_V_addr_2, align 8
  %i_9 = add i3 %i_1, 1
  br label %0

.preheader:                                       ; preds = %0, %._crit_edge143
  %p_Val2_s = phi i95 [ %p_Result_22, %._crit_edge143 ], [ undef, %0 ]
  %i_2 = phi i3 [ %tmp_s, %._crit_edge143 ], [ 0, %0 ]
  %exitcond = icmp eq i3 %i_2, -4
  %empty_74 = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 4, i64 4, i64 4)
  %tmp_s = add i3 %i_2, 1
  br i1 %exitcond, label %1, label %._crit_edge143

._crit_edge143:                                   ; preds = %.preheader
  %tmp_69 = trunc i3 %i_2 to i2
  %Li = call i6 @_ssdm_op_BitConcatenate.i6.i2.i1.i3(i2 %tmp_69, i1 false, i3 %i_2)
  %Li_cast1 = zext i6 %Li to i7
  %Li_cast = zext i6 %Li to i32
  %Ui = add i7 16, %Li_cast1
  %Ui_1_cast = zext i7 %Ui to i32
  %tmp_70 = zext i3 %i_2 to i64
  %pps_V_addr_4 = getelementptr [5 x i41]* %pps_V, i64 0, i64 %tmp_70
  %p_Val2_31 = load i41* %pps_V_addr_4, align 8
  %tmp_71 = trunc i41 %p_Val2_31 to i17
  %loc_V = zext i17 %tmp_71 to i95
  %tmp_72 = icmp ugt i32 %Li_cast, %Ui_1_cast
  %tmp_73 = zext i6 %Li to i7
  %tmp_74 = sub i7 -34, %tmp_73
  %tmp_75 = select i1 %tmp_72, i7 %tmp_73, i7 %Ui
  %tmp_76 = select i1 %tmp_72, i7 %Ui, i7 %tmp_73
  %tmp_77 = select i1 %tmp_72, i7 %tmp_74, i7 %tmp_73
  %tmp_78 = sub i7 -34, %tmp_75
  %tmp_79 = zext i7 %tmp_77 to i95
  %tmp_80 = zext i7 %tmp_76 to i95
  %tmp_81 = zext i7 %tmp_78 to i95
  %tmp_82 = shl i95 %loc_V, %tmp_79
  %tmp_83 = call i95 @llvm.part.select.i95(i95 %tmp_82, i32 94, i32 0)
  %tmp_84 = select i1 %tmp_72, i95 %tmp_83, i95 %tmp_82
  %tmp_85 = shl i95 -1, %tmp_80
  %tmp_86 = lshr i95 -1, %tmp_81
  %p_demorgan = and i95 %tmp_85, %tmp_86
  %tmp_87 = xor i95 %p_demorgan, -1
  %tmp_88 = and i95 %p_Val2_s, %tmp_87
  %tmp_89 = and i95 %tmp_84, %p_demorgan
  %p_Result_22 = or i95 %tmp_88, %tmp_89
  br label %.preheader

; <label>:1                                       ; preds = %.preheader
  %pps_V_addr_3 = getelementptr [5 x i41]* %pps_V, i64 0, i64 4
  %pps_V_load_1 = load i41* %pps_V_addr_3, align 16
  %tmp_68 = trunc i41 %pps_V_load_1 to i27
  %p_Result_s = call i95 @llvm.part.set.i95.i27(i95 %p_Val2_s, i27 %tmp_68, i32 68, i32 94)
  ret i95 %p_Result_s
}

define weak void @_ssdm_op_Write.ap_fifo.volatile.i32P(i32*, i32) {
entry:
  %empty = call i32 @_autotb_FifoWrite_i32(i32* %0, i32 %1)
  ret void
}

define weak void @_ssdm_op_Write.ap_fifo.i8P(i8*, i8) {
entry:
  %empty = call i8 @_autotb_FifoWrite_i8(i8* %0, i8 %1)
  ret void
}

define weak void @_ssdm_op_Write.ap_fifo.i16P(i16*, i16) {
entry:
  %empty = call i16 @_autotb_FifoWrite_i16(i16* %0, i16 %1)
  ret void
}

define weak void @_ssdm_op_SpecTopModule(...) {
entry:
  ret void
}

define weak i32 @_ssdm_op_SpecRegionEnd(...) {
entry:
  ret i32 0
}

define weak i32 @_ssdm_op_SpecRegionBegin(...) {
entry:
  ret i32 0
}

define weak void @_ssdm_op_SpecMemCore(...) {
entry:
  ret void
}

define weak i32 @_ssdm_op_SpecLoopTripCount(...) {
entry:
  ret i32 0
}

define weak void @_ssdm_op_SpecKeepValue(...) nounwind {
entry:
  ret void
}

define weak void @_ssdm_op_SpecInterface(...) nounwind {
entry:
  ret void
}

define weak void @_ssdm_op_SpecIPCore(...) {
entry:
  ret void
}

define weak void @_ssdm_op_SpecBitsMap(...) {
entry:
  ret void
}

define weak i32 @_ssdm_op_Read.ap_fifo.volatile.i32P(i32*) {
entry:
  %empty = call i32 @_autotb_FifoRead_i32(i32* %0)
  ret i32 %empty
}

define weak i16 @_ssdm_op_Read.ap_fifo.i16P(i16*) {
entry:
  %empty = call i16 @_autotb_FifoRead_i16(i16* %0)
  ret i16 %empty
}

define weak i9 @_ssdm_op_Read.ap_auto.i9(i9) {
entry:
  ret i9 %0
}

define weak i31 @_ssdm_op_Read.ap_auto.i31(i31) {
entry:
  ret i31 %0
}

define weak float @_ssdm_op_Read.ap_auto.float(float) {
entry:
  ret float %0
}

define weak i32 @_ssdm_op_PartSet.i32.i32.i17.i32.i32(i32, i17, i32, i32) nounwind readnone {
entry:
  %empty = call i32 @llvm.part.set.i32.i17(i32 %0, i17 %1, i32 %2, i32 %3)
  ret i32 %empty
}

define weak i32 @_ssdm_op_PartSet.i32.i32.i16.i32.i32(i32, i16, i32, i32) nounwind readnone {
entry:
  %empty = call i32 @llvm.part.set.i32.i16(i32 %0, i16 %1, i32 %2, i32 %3)
  ret i32 %empty
}

define weak i16 @_ssdm_op_PartSet.i16.i16.i9.i32.i32(i16, i9, i32, i32) nounwind readnone {
entry:
  %empty = call i16 @llvm.part.set.i16.i9(i16 %0, i9 %1, i32 %2, i32 %3)
  ret i16 %empty
}

define weak i9 @_ssdm_op_PartSelect.i9.i32.i32.i32(i32, i32, i32) nounwind readnone {
entry:
  %empty = call i32 @llvm.part.select.i32(i32 %0, i32 %1, i32 %2)
  %empty_75 = trunc i32 %empty to i9
  ret i9 %empty_75
}

declare i8 @_ssdm_op_PartSelect.i8.i9.i32.i32(i9, i32, i32) nounwind readnone

define weak i8 @_ssdm_op_PartSelect.i8.i32.i32.i32(i32, i32, i32) nounwind readnone {
entry:
  %empty = call i32 @llvm.part.select.i32(i32 %0, i32 %1, i32 %2)
  %empty_76 = trunc i32 %empty to i8
  ret i8 %empty_76
}

define weak i7 @_ssdm_op_PartSelect.i7.i32.i32.i32(i32, i32, i32) nounwind readnone {
entry:
  %empty = call i32 @llvm.part.select.i32(i32 %0, i32 %1, i32 %2)
  %empty_77 = trunc i32 %empty to i7
  ret i7 %empty_77
}

define weak i7 @_ssdm_op_PartSelect.i7.i16.i32.i32(i16, i32, i32) nounwind readnone {
entry:
  %empty = call i16 @llvm.part.select.i16(i16 %0, i32 %1, i32 %2)
  %empty_78 = trunc i16 %empty to i7
  ret i7 %empty_78
}

declare i5 @_ssdm_op_PartSelect.i5.i32.i32.i32(i32, i32, i32) nounwind readnone

define weak i49 @_ssdm_op_PartSelect.i49.i95.i32.i32(i95, i32, i32) nounwind readnone {
entry:
  %empty = call i95 @llvm.part.select.i95(i95 %0, i32 %1, i32 %2)
  %empty_79 = trunc i95 %empty to i49
  ret i49 %empty_79
}

define weak i32 @_ssdm_op_PartSelect.i32.i78.i32.i32(i78, i32, i32) nounwind readnone {
entry:
  %empty = call i78 @llvm.part.select.i78(i78 %0, i32 %1, i32 %2)
  %empty_80 = trunc i78 %empty to i32
  ret i32 %empty_80
}

define weak i32 @_ssdm_op_PartSelect.i32.i64.i32.i32(i64, i32, i32) nounwind readnone {
entry:
  %empty = call i64 @llvm.part.select.i64(i64 %0, i32 %1, i32 %2)
  %empty_81 = trunc i64 %empty to i32
  ret i32 %empty_81
}

define weak i31 @_ssdm_op_PartSelect.i31.i62.i32.i32(i62, i32, i32) nounwind readnone {
entry:
  %empty = call i62 @llvm.part.select.i62(i62 %0, i32 %1, i32 %2)
  %empty_82 = trunc i62 %empty to i31
  ret i31 %empty_82
}

define weak i31 @_ssdm_op_PartSelect.i31.i49.i32.i32(i49, i32, i32) nounwind readnone {
entry:
  %empty = call i49 @llvm.part.select.i49(i49 %0, i32 %1, i32 %2)
  %empty_83 = trunc i49 %empty to i31
  ret i31 %empty_83
}

declare i31 @_ssdm_op_PartSelect.i31.i32.i32.i32(i32, i32, i32) nounwind readnone

define weak i3 @_ssdm_op_PartSelect.i3.i95.i32.i32(i95, i32, i32) nounwind readnone {
entry:
  %empty = call i95 @llvm.part.select.i95(i95 %0, i32 %1, i32 %2)
  %empty_84 = trunc i95 %empty to i3
  ret i3 %empty_84
}

declare i27 @_ssdm_op_PartSelect.i27.i41.i32.i32(i41, i32, i32) nounwind readnone

define weak i24 @_ssdm_op_PartSelect.i24.i41.i32.i32(i41, i32, i32) nounwind readnone {
entry:
  %empty = call i41 @llvm.part.select.i41(i41 %0, i32 %1, i32 %2)
  %empty_85 = trunc i41 %empty to i24
  ret i24 %empty_85
}

define weak i24 @_ssdm_op_PartSelect.i24.i40.i32.i32(i40, i32, i32) nounwind readnone {
entry:
  %empty = call i40 @llvm.part.select.i40(i40 %0, i32 %1, i32 %2)
  %empty_86 = trunc i40 %empty to i24
  ret i24 %empty_86
}

declare i23 @_ssdm_op_PartSelect.i23.i32.i32.i32(i32, i32, i32) nounwind readnone

define weak i23 @_ssdm_op_PartSelect.i23.i31.i32.i32(i31, i32, i32) nounwind readnone {
entry:
  %empty = call i31 @llvm.part.select.i31(i31 %0, i32 %1, i32 %2)
  %empty_87 = trunc i31 %empty to i23
  ret i23 %empty_87
}

define weak i2 @_ssdm_op_PartSelect.i2.i9.i32.i32(i9, i32, i32) nounwind readnone {
entry:
  %empty = call i9 @llvm.part.select.i9(i9 %0, i32 %1, i32 %2)
  %empty_88 = trunc i9 %empty to i2
  ret i2 %empty_88
}

define weak i2 @_ssdm_op_PartSelect.i2.i3.i32.i32(i3, i32, i32) nounwind readnone {
entry:
  %empty = call i3 @llvm.part.select.i3(i3 %0, i32 %1, i32 %2)
  %empty_89 = trunc i3 %empty to i2
  ret i2 %empty_89
}

define weak i18 @_ssdm_op_PartSelect.i18.i49.i32.i32(i49, i32, i32) nounwind readnone {
entry:
  %empty = call i49 @llvm.part.select.i49(i49 %0, i32 %1, i32 %2)
  %empty_90 = trunc i49 %empty to i18
  ret i18 %empty_90
}

declare i17 @_ssdm_op_PartSelect.i17.i41.i32.i32(i41, i32, i32) nounwind readnone

define weak i17 @_ssdm_op_PartSelect.i17.i32.i32.i32(i32, i32, i32) nounwind readnone {
entry:
  %empty = call i32 @llvm.part.select.i32(i32 %0, i32 %1, i32 %2)
  %empty_91 = trunc i32 %empty to i17
  ret i17 %empty_91
}

define weak i17 @_ssdm_op_PartSelect.i17.i18.i32.i32(i18, i32, i32) nounwind readnone {
entry:
  %empty = call i18 @llvm.part.select.i18(i18 %0, i32 %1, i32 %2)
  %empty_92 = trunc i18 %empty to i17
  ret i17 %empty_92
}

define weak i16 @_ssdm_op_PartSelect.i16.i32.i32.i32(i32, i32, i32) nounwind readnone {
entry:
  %empty = call i32 @llvm.part.select.i32(i32 %0, i32 %1, i32 %2)
  %empty_93 = trunc i32 %empty to i16
  ret i16 %empty_93
}

define weak i16 @_ssdm_op_PartSelect.i16.i31.i32.i32(i31, i32, i32) nounwind readnone {
entry:
  %empty = call i31 @llvm.part.select.i31(i31 %0, i32 %1, i32 %2)
  %empty_94 = trunc i31 %empty to i16
  ret i16 %empty_94
}

declare i15 @_ssdm_op_PartSelect.i15.i31.i32.i32(i31, i32, i32) nounwind readnone

declare i1 @_ssdm_op_PartSelect.i1.i3.i32.i32(i3, i32, i32) nounwind readnone

declare i1 @_ssdm_op_PartSelect.i1.i2.i32.i32(i2, i32, i32) nounwind readnone

define weak i1 @_ssdm_op_PartSelect.i1.i16.i32.i32(i16, i32, i32) nounwind readnone {
entry:
  %empty = call i16 @llvm.part.select.i16(i16 %0, i32 %1, i32 %2)
  %empty_95 = trunc i16 %empty to i1
  ret i1 %empty_95
}

define weak i1 @_ssdm_op_BitSelect.i1.i9.i32(i9, i32) nounwind readnone {
entry:
  %empty = trunc i32 %1 to i9
  %empty_96 = shl i9 1, %empty
  %empty_97 = and i9 %0, %empty_96
  %empty_98 = icmp ne i9 %empty_97, 0
  ret i1 %empty_98
}

define weak i1 @_ssdm_op_BitSelect.i1.i8.i32(i8, i32) nounwind readnone {
entry:
  %empty = trunc i32 %1 to i8
  %empty_99 = shl i8 1, %empty
  %empty_100 = and i8 %0, %empty_99
  %empty_101 = icmp ne i8 %empty_100, 0
  ret i1 %empty_101
}

define weak i1 @_ssdm_op_BitSelect.i1.i49.i32(i49, i32) nounwind readnone {
entry:
  %empty = zext i32 %1 to i49
  %empty_102 = shl i49 1, %empty
  %empty_103 = and i49 %0, %empty_102
  %empty_104 = icmp ne i49 %empty_103, 0
  ret i1 %empty_104
}

define weak i1 @_ssdm_op_BitSelect.i1.i32.i32(i32, i32) nounwind readnone {
entry:
  %empty = shl i32 1, %1
  %empty_105 = and i32 %0, %empty
  %empty_106 = icmp ne i32 %empty_105, 0
  ret i1 %empty_106
}

define weak i1 @_ssdm_op_BitSelect.i1.i24.i32(i24, i32) nounwind readnone {
entry:
  %empty = trunc i32 %1 to i24
  %empty_107 = shl i24 1, %empty
  %empty_108 = and i24 %0, %empty_107
  %empty_109 = icmp ne i24 %empty_108, 0
  ret i1 %empty_109
}

define weak i1 @_ssdm_op_BitSelect.i1.i2.i32(i2, i32) nounwind readnone {
entry:
  %empty = trunc i32 %1 to i2
  %empty_110 = shl i2 1, %empty
  %empty_111 = and i2 %0, %empty_110
  %empty_112 = icmp ne i2 %empty_111, 0
  ret i1 %empty_112
}

define weak i8 @_ssdm_op_BitConcatenate.i8.i7.i1(i7, i1) nounwind readnone {
entry:
  %empty = zext i7 %0 to i8
  %empty_113 = zext i1 %1 to i8
  %empty_114 = shl i8 %empty, 1
  %empty_115 = or i8 %empty_114, %empty_113
  ret i8 %empty_115
}

define weak i8 @_ssdm_op_BitConcatenate.i8.i1.i7(i1, i7) nounwind readnone {
entry:
  %empty = zext i1 %0 to i8
  %empty_116 = zext i7 %1 to i8
  %empty_117 = shl i8 %empty, 7
  %empty_118 = or i8 %empty_117, %empty_116
  ret i8 %empty_118
}

define weak i64 @_ssdm_op_BitConcatenate.i64.i32.i32(i32, i32) nounwind readnone {
entry:
  %empty = zext i32 %0 to i64
  %empty_119 = zext i32 %1 to i64
  %empty_120 = shl i64 %empty, 32
  %empty_121 = or i64 %empty_120, %empty_119
  ret i64 %empty_121
}

define weak i6 @_ssdm_op_BitConcatenate.i6.i2.i1.i3(i2, i1, i3) nounwind readnone {
entry:
  %empty = zext i1 %1 to i4
  %empty_122 = zext i3 %2 to i4
  %empty_123 = shl i4 %empty, 3
  %empty_124 = or i4 %empty_123, %empty_122
  %empty_125 = zext i2 %0 to i6
  %empty_126 = zext i4 %empty_124 to i6
  %empty_127 = shl i6 %empty_125, 4
  %empty_128 = or i6 %empty_127, %empty_126
  ret i6 %empty_128
}

define weak i4 @_ssdm_op_BitConcatenate.i4.i1.i3(i1, i3) nounwind readnone {
entry:
  %empty = zext i1 %0 to i4
  %empty_129 = zext i3 %1 to i4
  %empty_130 = shl i4 %empty, 3
  %empty_131 = or i4 %empty_130, %empty_129
  ret i4 %empty_131
}

define weak i32 @_ssdm_op_BitConcatenate.i32.i13.i19(i13, i19) nounwind readnone {
entry:
  %empty = zext i13 %0 to i32
  %empty_132 = zext i19 %1 to i32
  %empty_133 = shl i32 %empty, 19
  %empty_134 = or i32 %empty_133, %empty_132
  ret i32 %empty_134
}

define weak i32 @_ssdm_op_BitConcatenate.i32.i1.i8.i23(i1, i8, i23) nounwind readnone {
entry:
  %empty = zext i8 %1 to i31
  %empty_135 = zext i23 %2 to i31
  %empty_136 = shl i31 %empty, 23
  %empty_137 = or i31 %empty_136, %empty_135
  %empty_138 = zext i1 %0 to i32
  %empty_139 = zext i31 %empty_137 to i32
  %empty_140 = shl i32 %empty_138, 31
  %empty_141 = or i32 %empty_140, %empty_139
  ret i32 %empty_141
}

define weak i32 @_ssdm_op_BitConcatenate.i32.i1.i31(i1, i31) nounwind readnone {
entry:
  %empty = zext i1 %0 to i32
  %empty_142 = zext i31 %1 to i32
  %empty_143 = shl i32 %empty, 31
  %empty_144 = or i32 %empty_143, %empty_142
  ret i32 %empty_144
}

define weak i31 @_ssdm_op_BitConcatenate.i31.i30.i1(i30, i1) nounwind readnone {
entry:
  %empty = zext i30 %0 to i31
  %empty_145 = zext i1 %1 to i31
  %empty_146 = shl i31 %empty, 1
  %empty_147 = or i31 %empty_146, %empty_145
  ret i31 %empty_147
}

define weak i24 @_ssdm_op_BitConcatenate.i24.i1.i23(i1, i23) nounwind readnone {
entry:
  %empty = zext i1 %0 to i24
  %empty_148 = zext i23 %1 to i24
  %empty_149 = shl i24 %empty, 23
  %empty_150 = or i24 %empty_149, %empty_148
  ret i24 %empty_150
}

define weak i19 @_ssdm_op_BitConcatenate.i19.i18.i1(i18, i1) nounwind readnone {
entry:
  %empty = zext i18 %0 to i19
  %empty_151 = zext i1 %1 to i19
  %empty_152 = shl i19 %empty, 1
  %empty_153 = or i19 %empty_152, %empty_151
  ret i19 %empty_153
}

define weak i17 @_ssdm_op_BitConcatenate.i17.i16.i1(i16, i1) nounwind readnone {
entry:
  %empty = zext i16 %0 to i17
  %empty_154 = zext i1 %1 to i17
  %empty_155 = shl i17 %empty, 1
  %empty_156 = or i17 %empty_155, %empty_154
  ret i17 %empty_156
}

define weak i16 @_ssdm_op_BitConcatenate.i16.i15.i1(i15, i1) nounwind readnone {
entry:
  %empty = zext i15 %0 to i16
  %empty_157 = zext i1 %1 to i16
  %empty_158 = shl i16 %empty, 1
  %empty_159 = or i16 %empty_158, %empty_157
  ret i16 %empty_159
}

define weak i14 @_ssdm_op_BitConcatenate.i14.i6.i8(i6, i8) nounwind readnone {
entry:
  %empty = zext i6 %0 to i14
  %empty_160 = zext i8 %1 to i14
  %empty_161 = shl i14 %empty, 8
  %empty_162 = or i14 %empty_161, %empty_160
  ret i14 %empty_162
}

define weak i12 @_ssdm_op_BitConcatenate.i12.i5.i7(i5, i7) nounwind readnone {
entry:
  %empty = zext i5 %0 to i12
  %empty_163 = zext i7 %1 to i12
  %empty_164 = shl i12 %empty, 7
  %empty_165 = or i12 %empty_164, %empty_163
  ret i12 %empty_165
}

declare i8 @_autotb_FifoWrite_i8(i8*, i8)

declare i32 @_autotb_FifoWrite_i32(i32*, i32)

declare i16 @_autotb_FifoWrite_i16(i16*, i16)

declare i32 @_autotb_FifoRead_i32(i32*)

declare i16 @_autotb_FifoRead_i16(i16*)

declare void @_GLOBAL__I_a59() nounwind section ".text.startup"

declare void @_GLOBAL__I_a1949() nounwind section ".text.startup"

declare void @_GLOBAL__I_a() nounwind section ".text.startup"

!opencl.kernels = !{!0, !7, !13, !17, !23, !23, !29, !29, !17, !17, !33, !36, !17, !17, !38, !41, !41, !36, !47, !49, !52, !54, !54, !17, !57, !17, !17, !17, !17, !17, !60, !63, !17, !65, !67, !67, !17, !38, !68, !68, !17, !17, !17, !17, !17, !17, !17, !17, !70, !70, !70, !70, !17, !17, !72, !72, !17, !17, !74, !74, !74, !74, !17, !17, !17, !17, !17, !17, !77, !77}
!hls.encrypted.func = !{}
!llvm.map.gv = !{!80}

!0 = metadata !{null, metadata !1, metadata !2, metadata !3, metadata !4, metadata !5, metadata !6}
!1 = metadata !{metadata !"kernel_arg_addr_space", i32 0, i32 0}
!2 = metadata !{metadata !"kernel_arg_access_qual", metadata !"none", metadata !"none"}
!3 = metadata !{metadata !"kernel_arg_type", metadata !"hls::stream<bit32_t> &", metadata !"hls::stream<bit32_t> &"}
!4 = metadata !{metadata !"kernel_arg_type_qual", metadata !"", metadata !""}
!5 = metadata !{metadata !"kernel_arg_name", metadata !"strm_in", metadata !"strm_out"}
!6 = metadata !{metadata !"reqd_work_group_size", i32 1, i32 1, i32 1}
!7 = metadata !{null, metadata !8, metadata !9, metadata !10, metadata !11, metadata !12, metadata !6}
!8 = metadata !{metadata !"kernel_arg_addr_space", i32 1}
!9 = metadata !{metadata !"kernel_arg_access_qual", metadata !"none"}
!10 = metadata !{metadata !"kernel_arg_type", metadata !"float*"}
!11 = metadata !{metadata !"kernel_arg_type_qual", metadata !"const"}
!12 = metadata !{metadata !"kernel_arg_name", metadata !"sound_file"}
!13 = metadata !{null, metadata !8, metadata !9, metadata !14, metadata !15, metadata !16, metadata !6}
!14 = metadata !{metadata !"kernel_arg_type", metadata !"float [49]*"}
!15 = metadata !{metadata !"kernel_arg_type_qual", metadata !""}
!16 = metadata !{metadata !"kernel_arg_name", metadata !"input"}
!17 = metadata !{null, metadata !18, metadata !19, metadata !20, metadata !21, metadata !22, metadata !6}
!18 = metadata !{metadata !"kernel_arg_addr_space"}
!19 = metadata !{metadata !"kernel_arg_access_qual"}
!20 = metadata !{metadata !"kernel_arg_type"}
!21 = metadata !{metadata !"kernel_arg_type_qual"}
!22 = metadata !{metadata !"kernel_arg_name"}
!23 = metadata !{null, metadata !24, metadata !25, metadata !26, metadata !27, metadata !28, metadata !6}
!24 = metadata !{metadata !"kernel_arg_addr_space", i32 1, i32 1, i32 1, i32 1}
!25 = metadata !{metadata !"kernel_arg_access_qual", metadata !"none", metadata !"none", metadata !"none", metadata !"none"}
!26 = metadata !{metadata !"kernel_arg_type", metadata !"complex<float>*", metadata !"complex<float>*", metadata !"ip_fft::status_t<config1>*", metadata !"ip_fft::config_t<config1>*"}
!27 = metadata !{metadata !"kernel_arg_type_qual", metadata !"", metadata !"", metadata !"", metadata !""}
!28 = metadata !{metadata !"kernel_arg_name", metadata !"xn", metadata !"xk", metadata !"status", metadata !"config_ch"}
!29 = metadata !{null, metadata !30, metadata !9, metadata !31, metadata !15, metadata !32, metadata !6}
!30 = metadata !{metadata !"kernel_arg_addr_space", i32 0}
!31 = metadata !{metadata !"kernel_arg_type", metadata !"uint"}
!32 = metadata !{metadata !"kernel_arg_name", metadata !"val"}
!33 = metadata !{null, metadata !30, metadata !9, metadata !34, metadata !15, metadata !35, metadata !6}
!34 = metadata !{metadata !"kernel_arg_type", metadata !"const ap_uint<8> &"}
!35 = metadata !{metadata !"kernel_arg_name", metadata !"op2"}
!36 = metadata !{null, metadata !30, metadata !9, metadata !31, metadata !15, metadata !37, metadata !6}
!37 = metadata !{metadata !"kernel_arg_name", metadata !"ch"}
!38 = metadata !{null, metadata !1, metadata !2, metadata !39, metadata !4, metadata !40, metadata !6}
!39 = metadata !{metadata !"kernel_arg_type", metadata !"int", metadata !"int"}
!40 = metadata !{metadata !"kernel_arg_name", metadata !"Hi", metadata !"Lo"}
!41 = metadata !{null, metadata !42, metadata !43, metadata !44, metadata !45, metadata !46, metadata !6}
!42 = metadata !{metadata !"kernel_arg_addr_space", i32 1, i32 0, i32 0}
!43 = metadata !{metadata !"kernel_arg_access_qual", metadata !"none", metadata !"none", metadata !"none"}
!44 = metadata !{metadata !"kernel_arg_type", metadata !"ap_int_base<16, false>*", metadata !"int", metadata !"int"}
!45 = metadata !{metadata !"kernel_arg_type_qual", metadata !"", metadata !"", metadata !""}
!46 = metadata !{metadata !"kernel_arg_name", metadata !"bv", metadata !"h", metadata !"l"}
!47 = metadata !{null, metadata !30, metadata !9, metadata !31, metadata !15, metadata !48, metadata !6}
!48 = metadata !{metadata !"kernel_arg_name", metadata !"scaling_opt"}
!49 = metadata !{null, metadata !1, metadata !2, metadata !50, metadata !4, metadata !51, metadata !6}
!50 = metadata !{metadata !"kernel_arg_type", metadata !"uint", metadata !"uint"}
!51 = metadata !{metadata !"kernel_arg_name", metadata !"sch", metadata !"ch"}
!52 = metadata !{null, metadata !30, metadata !9, metadata !53, metadata !15, metadata !32, metadata !6}
!53 = metadata !{metadata !"kernel_arg_type", metadata !"ulong long"}
!54 = metadata !{null, metadata !30, metadata !9, metadata !55, metadata !15, metadata !56, metadata !6}
!55 = metadata !{metadata !"kernel_arg_type", metadata !"ap_ulong"}
!56 = metadata !{metadata !"kernel_arg_name", metadata !"op"}
!57 = metadata !{null, metadata !1, metadata !2, metadata !58, metadata !4, metadata !59, metadata !6}
!58 = metadata !{metadata !"kernel_arg_type", metadata !"_Bool", metadata !"uint"}
!59 = metadata !{metadata !"kernel_arg_name", metadata !"dir", metadata !"ch"}
!60 = metadata !{null, metadata !30, metadata !9, metadata !61, metadata !15, metadata !62, metadata !6}
!61 = metadata !{metadata !"kernel_arg_type", metadata !"const struct ap_uint<32> &"}
!62 = metadata !{metadata !"kernel_arg_name", metadata !"din"}
!63 = metadata !{null, metadata !30, metadata !9, metadata !64, metadata !15, metadata !35, metadata !6}
!64 = metadata !{metadata !"kernel_arg_type", metadata !"const ap_uint<32> &"}
!65 = metadata !{null, metadata !30, metadata !9, metadata !66, metadata !15, metadata !32, metadata !6}
!66 = metadata !{metadata !"kernel_arg_type", metadata !"const ap_int_base<32, false> &"}
!67 = metadata !{null, metadata !30, metadata !9, metadata !66, metadata !15, metadata !56, metadata !6}
!68 = metadata !{null, metadata !42, metadata !43, metadata !69, metadata !45, metadata !46, metadata !6}
!69 = metadata !{metadata !"kernel_arg_type", metadata !"ap_int_base<64, false>*", metadata !"int", metadata !"int"}
!70 = metadata !{null, metadata !30, metadata !9, metadata !71, metadata !15, metadata !32, metadata !6}
!71 = metadata !{metadata !"kernel_arg_type", metadata !"int"}
!72 = metadata !{null, metadata !30, metadata !9, metadata !73, metadata !15, metadata !32, metadata !6}
!73 = metadata !{metadata !"kernel_arg_type", metadata !"double"}
!74 = metadata !{null, metadata !30, metadata !9, metadata !75, metadata !15, metadata !76, metadata !6}
!75 = metadata !{metadata !"kernel_arg_type", metadata !"float"}
!76 = metadata !{metadata !"kernel_arg_name", metadata !"__x"}
!77 = metadata !{null, metadata !1, metadata !2, metadata !78, metadata !4, metadata !79, metadata !6}
!78 = metadata !{metadata !"kernel_arg_type", metadata !"float", metadata !"float"}
!79 = metadata !{metadata !"kernel_arg_name", metadata !"__r", metadata !"__i"}
!80 = metadata !{metadata !81, [3 x i32]* @llvm_global_ctors_0}
!81 = metadata !{metadata !82}
!82 = metadata !{i32 0, i32 31, metadata !83}
!83 = metadata !{metadata !84}
!84 = metadata !{metadata !"llvm.global_ctors.0", metadata !85, metadata !"", i32 0, i32 31}
!85 = metadata !{metadata !86}
!86 = metadata !{i32 0, i32 2, i32 1}
!87 = metadata !{metadata !88}
!88 = metadata !{i32 0, i32 31, metadata !89}
!89 = metadata !{metadata !90}
!90 = metadata !{metadata !"strm_in.V.V", metadata !91, metadata !"uint32", i32 0, i32 31}
!91 = metadata !{metadata !92}
!92 = metadata !{i32 0, i32 0, i32 1}
!93 = metadata !{metadata !94}
!94 = metadata !{i32 0, i32 31, metadata !95}
!95 = metadata !{metadata !96}
!96 = metadata !{metadata !"strm_out.V.V", metadata !91, metadata !"uint32", i32 0, i32 31}
